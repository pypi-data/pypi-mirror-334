
import datetime
from decimal import Decimal
from typing import Any, List, Optional, Union

class Faker:
    def __init__(self, locale: str = "en_US", *args, **kwargs): ...
    def __getattr__(self, name: str) -> Any: ...

    # Personal details
    def name(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def first_name(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def last_name(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def email(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def phone_number(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def ssn(self) -> str: ...
    def prefix(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...

    # Address
    def address(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def street_address(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def city(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def state(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def state_abbr(self) -> str: ...
    def postal_code(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def country(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...

    # Company and Job
    def company(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...
    def job(self, max_length: int = 0, min_length: int = 0, *args, **kwargs) -> str: ...

    # Date and time
    def date_between(self, start_date: Union[datetime.date, datetime.datetime, datetime.timedelta, str, int] = "-30y", end_date: Union[datetime.date, datetime.datetime, datetime.timedelta, str, int] = "today") -> datetime.date: ...
    def date_time_between(
        self, start_date: Union[datetime.date, datetime.datetime, datetime.timedelta, str, int] = "-30y", end_date: Union[datetime.date, datetime.datetime, datetime.timedelta, str, int] = "now", tzinfo: Optional[datetime.timezone] = None
    ) -> datetime.datetime: ...
    def date_time_this_year(self, tzinfo: Optional[datetime.timezone] = None) -> datetime.datetime: ...
    def date_this_year(self) -> datetime.date: ...

    # Internet
    def ipv4(self, network: bool = False, *args, **kwargs) -> str: ...
    def ipv6(self, network: bool = False, *args, **kwargs) -> str: ...
    def mac_address(self, *args, **kwargs) -> str: ...
    def url(self, *args, **kwargs) -> str: ...
    def user_name(self, *args, **kwargs) -> str: ...
    def domain_name(self, *args, **kwargs) -> str: ...

    # Finance
    def credit_card_number(self, card_type: str | None = None, *args, **kwargs) -> str: ...
    def credit_card_expire(self, start: str = "now", end: str = "+10y", date_format: str = "%m/%y") -> str: ...
    def credit_card_full(self, card_type: str | None = None, *args, **kwargs) -> str: ...
    def iban(self, country_code: str = "US", *args, **kwargs) -> str: ...
    def swift(self, bank_country: str = "US", *args, **kwargs) -> str: ...
    def random_number(self, digits: int = 10, fix_len: bool = False, *args, **kwargs) -> str: ...

    # Miscellaneous
    def lorem(self, nb_words: int = 3, *args, **kwargs) -> str: ...
    def boolean(self, chance_of_getting_true: int = 50, *args, **kwargs) -> bool: ...
    def random_digit(self, *args, **kwargs) -> int: ...
    def random_digit_not_null(self, *args, **kwargs) -> int: ...
    def random_int(self, min: int = 0, max: int = 9999, *args, **kwargs) -> int: ...
    def random_element(self, elements: Union[List[Any], Any] = ("a", "b", "c"), *args, **kwargs) -> Any: ...
    def random_sample(self, elements: Union[List[Any], Any], length: int, *args, **kwargs) -> List[Any]: ...
    def random_choices(self, elements: Union[List[Any], Any], length: int, *args, **kwargs) -> List[Any]: ...
    def random_letter(self, *args, **kwargs) -> str: ...
    def word(self, *args, **kwargs) -> str: ...

    # Unclassified (TODO: check signatures are correct. Generated from copilot)
    def pystr(self, max_chars: int = 20, min_chars: int = 10, *args, **kwargs) -> str: ...
    def pyint(self, min_value: int = 0, max_value: int = 9999, *args, **kwargs) -> int: ...
    def pyfloat(self, left_digits: int = 5, right_digits: int = 2, positive: bool = True, *args, **kwargs) -> float: ...
    def pydecimal(self, left_digits: int = 5, right_digits: int = 2, positive: bool = True, *args, **kwargs) -> Decimal: ...
    def time_delta(self, *args, **kwargs) -> datetime.timedelta: ...
    def file_path(self, depth: int = 1, category: str = None, *args, **kwargs) -> str: ...
    def date(self, pattern: str = "%Y-%m-%d", end_datetime: datetime.datetime = None, *args, **kwargs) -> str: ...
    def date_time(self, pattern: str = "%Y-%m-%d %H:%M:%S", end_datetime: datetime.datetime = None, *args, **kwargs) -> str: ...

fake = Faker()
