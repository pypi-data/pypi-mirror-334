# -*- coding: utf-8 -*-
"""KOSM_20250317_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FMjSNUAVl-xYm2M88m69E4FpyQhSVzY_

# KohyaSetupManager
Kohya_ss GUI の起動を管理します。[(GitHub)](https://github.com/bmaltais/kohya_ss)

```
2025/03/17 0.1.0 BranchRouter用ダミー生成
2025/03/18 0.1.6 デバッグ
2025/03/19 0.1.7 CondaManager との依存関係デバッグ
```

# KohyaSetupManager

## 1. モジュール定義
"""

# %%writefile /content/drive/MyDrive/code/KohyaSetupManager.py
# @title a. KohyaSetupManager 定義
from inspect import ClassFoundException
import os
import sys
import subprocess
import logging
import shutil
from pathlib import Path
from contextlib import contextmanager

get_ipython().system( "pip install an_debughelper" )
from an_debughelper import DebugHelper
get_ipython().system( "pip install an_envmanager" )
from an_envmanager import EnvManager
get_ipython().system( "pip install an_CudaUtility" )
from an_cudautility import CudaUtility
get_ipython().system( "pip install an_CondaManager" )
from an_condamanager import CondaManager

class KohyaSetupManager:
    """Kohya_ss GUI のセットアップと管理を行うクラス"""

    def __init__( self,
                  venv_path_persistent = "/content/drive/MyDrive/cEnv/venv/kohya_env",
                  venv_path_local = "/content/cEnv/venv/kohya_env",
                  kohya_path_persistent = "/content/drive/MyDrive/cEnv/app/kohya_ss",
                  kohya_path_local = "/content/cEnv/app/kohya_ss",
                  interactive = False ):
        self.debug = DebugHelper(instance_name="KohyaSetup")
        self.debug.enable_log_to_file_stdout()
        self.debug.enable_log_to_file_stderr()
        self.debug.enable_timestamp()

        # 実行権限の引き上げ
        get_ipython().system( "chmod +x /content/drive/MyDrive/cEnv/venv/kohya_env/bin/python" )
        get_ipython().system( "chmod +x /content/drive/MyDrive/cEnv/venv/kohya_env/bin/pip" )

        # 環境変数の設定
        self.envmanager = EnvManager(env_files=["settings_ven.env"])
        self.base_dir = Path( self.envmanager.get_env_var( "Ven_base_folder" ) )
        self.venv_dir = Path( self.envmanager.get_env_var( "Ven_venv_folder" ) )
        self.app_dir  = Path( self.envmanager.get_env_var( "Ven_app_folder"  ) )
        self.python_path = self.venv_dir.joinpath( "kohya_env", "bin", "python" )

        self.cudau = CudaUtility()
        self.condamanager = CondaManager()

        # 対話モードの管理
        self.interactive = interactive

        # レポジトリ管理
        self.repo_url = "https://github.com/bmaltais/kohya_ss.git"
        self.target_dir = self.app_dir.joinpath( "kohya_ss" )
        self.repo_url_sd_scripts = "https://github.com/kohya-ss/sd-scripts.git"
        self.target_dir_sd_scripts = self.target_dir.joinpath("sd-scripts")



    def clone_kohya_ss_repository(self, force_install=True):
        """
        kohya_ss GUI リポジトリをクローンするメソッド。
        force_install が False なら既存のリポジトリがあれば再クローンは行わず、存在する場合はそのまま利用する。
        """
        self.debug.log_step(f"Cloning Kohya_ss repository into {self.target_dir}", success=None)
        if os.path.isdir(self.target_dir):
            if force_install:
                if self.interactive:
                    choice = input(f"The directory {self.target_dir} exists. Re-clone? [y/N]: ").strip().lower()
                    if choice in ('y', 'yes'):
                        shutil.rmtree(self.target_dir)
                    else:
                        self.debug.log_step("Skipping re-cloning and using existing Kohya_ss repository.", char="⚠️")
                else:
                    shutil.rmtree(self.target_dir)
            else:
                self.debug.log_step(f"Kohya_ss repository already exists at {self.target_dir}. Skipping clone.", success=True)
        if not os.path.isdir(self.target_dir):
            cmd_kohya = f"git clone --recursive {self.repo_url} {self.target_dir}"
            result, stdout, stderr = self.debug.run_command(command=cmd_kohya, stdout=True, stderr=True)
            if result == 0:
                self.debug.log_step("Kohya_ss repository cloned successfully.", success=True)
            else:
                self.debug.log_step("Failed to clone Kohya_ss repository.", success=False)

    def clone_sd_scripts_repository(self, force_install=True):
        """
        sd-scripts リポジトリをクローンするメソッド。
        force_install が False なら既に存在していれば再クローンは行わず、存在する場合はそのまま利用する。
        """
        self.debug.log_step(f"Cloning sd-scripts repository into {self.target_dir_sd_scripts}", success=None)
        if os.path.isdir(self.target_dir_sd_scripts):
            if force_install:
                if self.interactive:
                    choice = input(f"The directory {self.target_dir_sd_scripts} exists. Re-clone? [y/N]: ").strip().lower()
                    if choice in ('y', 'yes'):
                        shutil.rmtree(self.target_dir_sd_scripts)
                    else:
                        self.debug.log_step("Skipping re-cloning and using existing sd-scripts repository.", char="⚠️")
                else:
                    shutil.rmtree(self.target_dir_sd_scripts)
            else:
                self.debug.log_step(f"sd-scripts repository already exists at {self.target_dir_sd_scripts}. Skipping clone.", success=True)
        if not os.path.isdir(self.target_dir_sd_scripts):
            cmd_sd = f"git clone --recursive {self.repo_url_sd_scripts} {self.target_dir_sd_scripts}"
            result, stdout, stderr = self.debug.run_command(command=cmd_sd, stdout=True, stderr=True)
            if result == 0:
                self.debug.log_step("sd-scripts repository cloned successfully.", success=True)
            else:
                self.debug.log_step("Failed to clone sd-scripts repository.", success=False)



    def clone_all_repositories(self, kohya_ss_rep_force_install=False, sd_scripts_rep_force_install=False):
        """
        kohya_ss GUI と sd-scripts の両方のリポジトリをクローンする統合メソッド。
        既存のクローンが存在する場合、force_install が False なら再クローンは行わない。
        また、クローン完了後に各 requirements.txt 内の editable 要件の相対パスを絶対パスに変換する処理も実施する。
        """
        # kohya_ss リポジトリのクローン
        self.clone_kohya_ss_repository(force_install=kohya_ss_rep_force_install)
        # sd-scripts リポジトリのクローン
        self.clone_sd_scripts_repository(force_install=sd_scripts_rep_force_install)

        # kohya_ss の requirements.txt の存在確認と変換処理
        ks_req = "/content/drive/MyDrive/cEnv/app/kohya_ss/requirements.txt"
        if os.path.isfile(ks_req):
            self.convert_editable_requirements(ks_req)
        else:
            self.debug.log_step(f"File not found: {ks_req}", success=False)
            raise Exception(f"File not found: {ks_req}")

        # sd-scripts の requirements.txt の存在確認と変換処理
        sd_req = "/content/drive/MyDrive/cEnv/app/sd-scripts/requirements.txt"
        if os.path.isfile(sd_req):
            self.convert_editable_requirements(sd_req)
        else:
            self.debug.log_step(f"File not found: {sd_req}", success=False)
            raise Exception(f"File not found: {sd_req}")



    def convert_editable_requirements( self, req_file_path: str ):
        """
        指定した requirements.txt 内の editable 要件 (-e 行) の相対パスを絶対パスに変換する。
        変換後は同じファイルに上書き保存する。

        :param req_file_path: requirements.txt のファイルパス（例: /content/drive/MyDrive/cEnv/app/kohya_ss/requirements.txt）
        """
        req_path = Path(req_file_path)
        base_dir = req_path.parent  # requirements.txt があるディレクトリ
        new_lines = []

        with req_path.open("r", encoding="utf-8") as f:
            for line in f:
                stripped = line.strip()
                if stripped.startswith("-e "):
                    # 行を分割して、-e の後ろのパス部分を取得
                    parts = stripped.split(maxsplit=1)
                    if len(parts) == 2:
                        rel_path = parts[1].split()[0]  # コメント部分などを除外するため最初のトークンを取得
                        # 相対パスを絶対パスに変換
                        abs_path = os.path.abspath(os.path.join(base_dir, rel_path))
                        # その後ろにコメントがある場合は保持（元の行の"-e"以降の全体を置換するならコメントは削除される）
                        comment = ""
                        if "#" in parts[1]:
                            comment = " " + parts[1].split("#", 1)[1]
                        new_line = f"-e {abs_path}{comment}\n"
                        new_lines.append(new_line)
                    else:
                        new_lines.append(line)
                else:
                    new_lines.append(line)

        # 新しい内容でファイルを上書き
        with req_path.open("w", encoding="utf-8") as f:
            f.writelines(new_lines)
        self.debug.log_step(f"Editable 要件のパスが絶対パスに変換されました: {req_file_path}", success = True )

# 例: ファイルパスを指定して実行
# convert_editable_requirements("/content/drive/MyDrive/cEnv/app/kohya_ss/requirements.txt")



    def install_kohya_dependencies(self):
        """Python モジュールを requirements.txt からインストール"""
        req = Path( self.target_dir ) / "requirements.txt"
        if not os.path.isfile( req ):
            self.debug.log_step(f"Requirements file not found: {self.requirements_path}", success=False)
            raise Exception("Requirements file not found")

        cdcmd = f"cd { self.target_dir }"
        self.debug.log_step( f"cdcmd : { cdcmd }")
        get_ipython().system( cdcmd )
        cmd = f"{ self.python_path } -m pip install -r { req }"
        self.debug.log_step( f"command : {cmd}" )
        result, stdout, stderr = self.debug.run_command( command = cmd, stdout = True, stderr = True, sync = False, timeout = 3600 )
        if result == 0:
            self.debug.log_step("Python dependencies installed successfully.", success = True)
            self.debug.debug_print( stdout )
        else:
            self.debug.log_step("Failed to install Python dependencies.", success = False)
            self.debug.debug_print( stderr )
            raise Exception("Failed to install Python dependencies")
        get_ipython().system( f"{self.python_path} -m pip install --upgrade gradio" )



    def install_sd_scripts_dependencies(self):
        """
        sd-scripts ディレクトリ内に requirements.txt が存在すれば、
        その内容を使って sd-scripts の依存関係をインストールする。
        """
        sd_req = Path(self.target_dir_sd_scripts) / "requirements.txt"
        if sd_req.is_file():
            cmd = f"{ self.python_path } -m pip install -r {sd_req}"
            self.debug.log_step(f"Installing sd-scripts dependencies with command: {cmd}", success=None)
            result, stdout, stderr = self.debug.run_command(command=cmd, stdout=True, stderr=True, sync = False, timeout = 1800 )
            if result == 0:
                self.debug.log_step("sd-scripts dependencies installed successfully.", success=True)
                self.debug.debug_print( stdout )
            else:
                self.debug.log_step("Failed to install sd-scripts dependencies.", success=False)
                self.debug.debug_print( stderr )
                raise Exception("Failed to install sd-scripts dependencies")
        else:
            self.debug.log_step("No requirements.txt found in sd-scripts directory. Skipping sd-scripts dependency installation.", success=True)

    def install_all_dependencies( self ):
        self.install_kohya_dependencies()
        self.install_sd_scripts_dependencies()


    def launch_gui(self, copy = True ):
        kohya_path = Path( "/content/kohya_ss" )
        # get_ipython().system( f"{self.python_path} -m pip install --upgrade gradio" )

        if copy:
            if os.path.exists( kohya_path ):
                get_ipython().system( f"rm -rf {kohya_path}" )
            get_ipython().system( f"cp -r /content/drive/MyDrive/cEnv/app/kohya_ss {kohya_path}" )
        else:
            if not os.path.exists( kohya_path ):
                raise Exception( f"{kohya_path} が存在しません。" )

        os.chmod( kohya_path, 0o755 )
        os.chmod( kohya_path / "kohya_gui.py", 0o755 )
        get_ipython().system( f"ls -ld { kohya_path }" )
        get_ipython().system( f"ls -ld { kohya_path / 'kohya_gui.py' }" )
        os.chdir( kohya_path )

        # cmd = f'bash -c "source /usr/local/etc/profile.d/conda.sh && conda activate {kohya_path} && exec bash"'
        # self.debug.log_step( f"cmd : {cmd}", success = None )
        # result, stdout, stderr = self.debug.run_command( command = cmd, stdout = True, stderr = True )
        # self.debug.log_step( f"result: { result }", success = None )
        # self.debug.log_step( f"stdout: { stdout }", success = None )
        # self.debug.log_step( f"stderr: { stderr }", success = None )

        # print( os.getcwd())
        # get_ipython().system( "which python" )
        # get_ipython().system( f"{self.python_path} -m pip show transformers" )
        # get_ipython().system( f"{self.python_path} -m pip freeze | grep transformers" )

        # 仮想環境のPythonでGUIを起動（ヘッドレスモードでポート7860を開放）
        # get_ipython().system( f"{self.python_path} kohya_gui.py --share --headless --listen 0.0.0.0 --server_port 7860 --inbrowser" )


        # cmd = f"{self.python_path} -m pip uninstall -y xformers"

        # デバッグモードで実行
        kohya_log = "/content/drive/MyDrive/log/kohya_gui.log"
        cmd = f"nohup { self.python_path } kohya_gui.py --share --headless --listen 0.0.0.0 --server_port 8000 --inbrowser > { kohya_log } 2>&1"
        self.debug.log_step( f"cmd : { cmd }", success = None )
        get_ipython().system( cmd )
        get_ipython().system( "sleep 5" )  # 少し待ってから
        get_ipython().system( f"tail -n 20 { kohya_log }" )



    def run_setup(self, reset = False ):
        """セットアップの実行"""
        self.reset = reset

        self.debug.log_step("🐎🐎🐎🐎🐎 Starting Kohya_ss GUI setup. 🐎🐎🐎🐎🐎", success = None )

        if self.interactive:
            if self.reset:
                if input("Install CUDA Toolkit 11.8? [Y/n]: ").strip().lower() not in ('n', 'no'):
                    self.condamanager.install_cuda( env_name = "kohya_env", cuda_version = "CU118" )
                if input("Clone all repository? [Y/n]: ").strip().lower() not in ('n', 'no'):
                    self.clone_all_repository()
                if input("Install all dependencies? [Y/n]: ").strip().lower() not in ('n', 'no'):
                    self.install_all_dependencies()
            if input("Launch Kohya_ss GUI now? [Y/n]: ").strip().lower() in ('y', 'yes'):
            # with self.cuda_cleanup_context():
                self.launch_gui()
        else:
            if self.reset:
                self.condamanager.install_cuda( env_name = "kohya_env", cuda_version = "CU118" )
                self.clone_all_repositories()
                self.install_all_dependencies()

            # with self.cuda_cleanup_context():
            self.launch_gui()


    @contextmanager
    def cuda_cleanup_context(self):
        """
        Context manager to ensure CUDA dependencies are cleaned up after launching the GUI.
        """
        try:
            # Enter the context (nothing special to do on entry)
            yield
        finally:
            # This block executes after exiting the 'with' context,
            # ensuring CUDA cleanup is called even if an exception occurs.
            # self.condamanager.cleanup_cuda()
            pass