import click
import os
from rich.console import Console
from rich.markdown import Markdown
from rich.panel import Panel
from rich.prompt import Prompt
from .llm import LLM, MODELS, make_prompt
from .version import VERSION

console = Console()


@click.command(name='ask')
@click.option('--file', '-f',
              type=click.Path(exists=True, file_okay=True, dir_okay=False, readable=True),
              help='Path to memo file for the sensei to read')
@click.option('--text', '-t',
              type=click.types.STRING,
              help='Text to ask the sensei')
@click.option('--instruction', '-i',
              type=click.types.STRING,
              default='You are an expert penetration testing assistant. You help with ethical hacking, vulnerability assessment, and cybersecurity best practices.',
              help='Custom instruction for LLM')
@click.option('--model', '-m',
              type=click.Choice(list(MODELS.keys()), case_sensitive=True),
              default=list(MODELS.keys())[0],
              help='Specific model used by the sensei')
def ask_command(file: str | None, text: str | None, instruction: str, model: str):
    """Ask the sensei"""
    home_dir = os.path.expanduser("~")
    app_dir = os.path.join(home_dir, ".exploit-sensei")
    apikey_file = os.path.join(app_dir, "apikey")
    try:
        with open(apikey_file, 'r') as f:
            apikey = f.read().strip()
    except FileNotFoundError:
        console.print(":exclamation: Error: OpenRouter API key not found. Please set the API key with the following command:")
        console.print(Markdown("""
```bash
exploit-sensei set <OPENROUTER_API_KEY>
```
"""))
        return
    except Exception as e:
        console.print(f":exclamation: Unexpected Error: {e}")
        return
        
    used_model = MODELS[model]
    llm = LLM(apikey, used_model)

    content = ""

    if not file and not text:
        console.print(":man_teacher: Please answer some questions about target system. There is no problem if you leave the unknown items blank.")
        console.print()
        host = Prompt.ask(":white_check_mark: Host (IP or domain)")
        ports = Prompt.ask(":white_check_mark: Ports (e.g. \"22,80,3000\")")
        operating_system = Prompt.ask(":white_check_mark: Operating System (e.g. \"Linux\", \"Windows\")")
        subdomains = Prompt.ask(":white_check_mark: Known Subdomains (e.g. \"api.example.com, blog.example.com\")")
        creds = Prompt.ask(":white_check_mark: Known Credentials (e.g. \"john:pass123, emily:pass456\")")
        goal = Prompt.ask(":white_check_mark: Your Goal (e.g. \"Find admin credential on port 80\", \"Gain root privileges\")")
        console.print()
        console.print(":man_teacher: Thank you! Based on this information, ask the sensei.")
        console.print()

        content = f"""
- Host: {host}
- Ports: {ports}
- Operating System: {operating_system}
- Subdomains: {subdomains}
- Credentials: {creds}
- Goal: {goal}
"""
    elif file:
        # Check if the memo file path exists
        if not os.path.exists(file):
            console.print(f"Memo file not found: {file}")
            return
        # Read the content of the memo
        with open(file, 'r') as f:
            content = f.read().strip()
        
    prompt = make_prompt(content, text)
    messages = [
        { "role": "system", "content": instruction },
        { "role": "user", "content": prompt },
    ]
        
    with console.status("The sensei is thinking. It may take a few minutes...", spinner="point"):
        try:
            response = llm.chat(messages)
        except Exception as e:
            if '401' in str(e) or 'No auth credentials' in str(e):
                console.print(":exclamation: Invalid Credentials: Check whether your OpenRouter API key is correct.")
            else:
                console.print(f":exclamation: Error: {e}")
            return

        md = Markdown(response)
        panel = Panel(
            md,
            title=":bulb: Exploit Sensei's Answer :bulb:",
            subtitle=f"Used Model: {model}",
            border_style="bright_yellow",
            style="bold white",
            padding=1,
            expand=True,
        )
        console.print(panel)


@click.command(name='set')
@click.argument('apikey', type=click.types.STRING)
def set_command(apikey: str):
    """Set OpenRouter API key"""
    home_dir = os.path.expanduser("~")
    app_dir = os.path.join(home_dir, ".exploit-sensei")
    if not os.path.exists(app_dir):
        os.makedirs(app_dir)

    # Save the API key
    apikey_file = os.path.join(app_dir, "apikey")
    with open(apikey_file, 'w') as f:
        f.write(apikey)

    console.print(f":white_check_mark: API key saved: {apikey_file}")


@click.command(name='version')
def version_command():
    """Print the version of Exploit Sensei"""
    click.echo(f"Exploit Sensei v{VERSION}")


@click.group()
def cli():
    """Exploit Sensei: LLM-powered Exploitation Recommendation Tool"""
    pass


cli.add_command(ask_command)
cli.add_command(set_command)
cli.add_command(version_command)
