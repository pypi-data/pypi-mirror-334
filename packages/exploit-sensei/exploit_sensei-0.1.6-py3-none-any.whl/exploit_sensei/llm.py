from openai import OpenAI

# OpenRouter models: https://openrouter.ai/models?max_price=0
MODELS = {
    'deepseek-r1': 'deepseek/deepseek-r1:free',
    'deepseek-r1-zero': 'deepseek/deepseek-r1-zero:free',
    'gemma-3-12b': 'google/gemma-3-12b-it:free',
    'gemma-3-27b': 'google/gemma-3-27b-it:free',
    'llama-3.3-70b': 'meta-llama/llama-3.3-70b-instruct:free',
    'olympiccoder-7b': 'open-r1/olympiccoder-7b:free',
    'olympiccoder-32b': 'open-r1/olympiccoder-32b:free',
    'qwq-32b': 'qwen/qwq-32b:free',
    'r1-mistral-24b': 'cognitivecomputations/dolphin3.0-r1-mistral-24b:free',
    'rogue-rose-103b': 'sophosympatheia/rogue-rose-103b-v0.2:free',
    'mistral-small-24b': 'mistralai/mistral-small-24b-instruct-2501:free',
    'reka-flash-3': 'rekaai/reka-flash-3:free',
}


class LLM:
    def __init__(self, apikey: str, site_url: str = "", site_name: str = "", model: str = "deepseek/deepseek-r1-zero:free"):
        self.client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=apikey,
        )
        self.extra_headers = {}
        if site_url:
            self.extra_headers["HTTP-Referer"] = site_url
        if site_name:
            self.extra_headers["X-Title"] = site_name
        self.model = model

    def chat(self, messages: list[dict[str, str]]):
        response = self.client.chat.completions.create(
            extra_headers=self.extra_headers,
            model=self.model,
            # models=list(MODELS.values())[1:], TODO: I don't understand why this parameter cannot be set in python?
            messages=messages,
        )
        answer = response.choices[0].message.content.replace("\\box{", "").replace("\\boxed{", "").rstrip("}")
        # Remove ```markdown
        if answer.startswith('```markdown') and answer.endswith('```'):
            answer = answer[11:-3]
        return answer
    

def make_prompt(content: str = "", text: str = "") -> str:
    prompt = "I am conducting a security assessment on a fully authorized target system. "

    if content:
        prompt += "Below are the details of the environment:"
        prompt += f"""

```
{content}
```

"""

    if text:
        prompt += "Below is the question:"
        prompt += f"""

```
{text}
```

"""
        
    prompt += """
I would like guidance on common security assessment methodologies for this type of environment.

- Could you provide insights on standard security testing techniques for the target system.
- What general approaches should I take to evaluate security risks in this context?
- Could you provide specific commands or payloads?
- Please let me know any additional unique ideas.
"""
    return prompt