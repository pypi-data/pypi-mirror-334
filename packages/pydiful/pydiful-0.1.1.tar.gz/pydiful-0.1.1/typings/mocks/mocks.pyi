import abc
from _typeshed import Incomplete
from typing import TypeVar

T = TypeVar("T")

class AbstractMockDatabase(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def fetch_string(self) -> str: ...
    @abc.abstractmethod
    def fetch_int(self) -> int: ...
    @abc.abstractmethod
    def delete_str(self) -> None: ...
    @abc.abstractmethod
    def delete_int(self) -> None: ...

class Database(AbstractMockDatabase):
    connection: str
    def delete_str(self) -> None: ...
    number: int
    def delete_int(self) -> None: ...
    def __init__(self) -> None: ...
    def fetch_int(self) -> int: ...
    def fetch_string(self): ...

class AbstractMockRepository[T](abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def fetch(self) -> T: ...

class StringMockRepository(AbstractMockRepository[str]):
    db: Incomplete
    def __init__(self, db: AbstractMockDatabase) -> None: ...
    def fetch(self) -> str: ...

class IntMockRepository(AbstractMockRepository[int]):
    db: Incomplete
    def __init__(self, db: AbstractMockDatabase) -> None: ...
    def fetch(self) -> int: ...
