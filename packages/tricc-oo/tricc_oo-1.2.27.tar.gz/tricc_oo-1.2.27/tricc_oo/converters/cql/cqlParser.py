# Generated from cql.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a5")
        buf.write("\u0492\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\3\2\5\2")
        buf.write("\u00ce\n\2\3\2\7\2\u00d1\n\2\f\2\16\2\u00d4\13\2\3\2\7")
        buf.write("\2\u00d7\n\2\f\2\16\2\u00da\13\2\3\2\7\2\u00dd\n\2\f\2")
        buf.write("\16\2\u00e0\13\2\3\2\7\2\u00e3\n\2\f\2\16\2\u00e6\13\2")
        buf.write("\3\2\7\2\u00e9\n\2\f\2\16\2\u00ec\13\2\3\2\7\2\u00ef\n")
        buf.write("\2\f\2\16\2\u00f2\13\2\3\2\7\2\u00f5\n\2\f\2\16\2\u00f8")
        buf.write("\13\2\3\2\7\2\u00fb\n\2\f\2\16\2\u00fe\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\3\5\3\u0106\n\3\3\4\3\4\3\4\3\4\5\4\u010c")
        buf.write("\n\4\3\5\3\5\3\5\3\5\5\5\u0112\n\5\3\5\3\5\5\5\u0116\n")
        buf.write("\5\3\6\3\6\3\7\3\7\3\b\5\b\u011d\n\b\3\b\3\b\3\b\5\b\u0122")
        buf.write("\n\b\3\b\3\b\5\b\u0126\n\b\3\t\5\t\u0129\n\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\5\t\u0131\n\t\3\n\5\n\u0134\n\n\3\n\3\n")
        buf.write("\3\n\3\n\3\n\3\n\5\n\u013c\n\n\3\n\5\n\u013f\n\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\7\13\u0146\n\13\f\13\16\13\u0149")
        buf.write("\13\13\3\13\3\13\3\f\3\f\3\f\5\f\u0150\n\f\3\f\3\f\3\r")
        buf.write("\3\r\3\16\5\16\u0157\n\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u0160\n\16\3\17\5\17\u0163\n\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\7\17\u016c\n\17\f\17\16\17\u016f")
        buf.write("\13\17\3\17\3\17\5\17\u0173\n\17\3\20\3\20\3\20\5\20\u0178")
        buf.write("\n\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\5\25\u0189\n\25\3\26\3\26\3")
        buf.write("\26\7\26\u018e\n\26\f\26\16\26\u0191\13\26\3\26\3\26\3")
        buf.write("\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\32\3\32\3\32\3\32\3\32\7\32\u01a6\n\32\f\32\16")
        buf.write("\32\u01a9\13\32\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34")
        buf.write("\3\34\3\34\7\34\u01b5\n\34\f\34\16\34\u01b8\13\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\5\35\u01bf\n\35\3\36\3\36\5\36\u01c3")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\5\37\u01cd")
        buf.write("\n\37\3\37\3\37\3 \3 \5 \u01d3\n \3 \3 \3 \3 \3 \3 \7")
        buf.write(" \u01db\n \f \16 \u01de\13 \5 \u01e0\n \3 \3 \3 \5 \u01e5")
        buf.write("\n \3 \3 \3 \5 \u01ea\n \3!\3!\3!\3\"\3\"\3#\3#\3#\3#")
        buf.write("\3#\3#\5#\u01f7\n#\3$\3$\3$\3%\3%\3&\3&\5&\u0200\n&\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\5)\u0210")
        buf.write("\n)\3)\3)\3)\3)\3)\5)\u0217\n)\3)\5)\u021a\n)\3)\3)\3")
        buf.write("*\3*\3+\3+\3,\3,\5,\u0224\n,\3-\3-\3.\3.\5.\u022a\n.\3")
        buf.write(".\7.\u022d\n.\f.\16.\u0230\13.\3.\5.\u0233\n.\3.\5.\u0236")
        buf.write("\n.\3.\5.\u0239\n.\3/\5/\u023c\n/\3/\3/\3/\7/\u0241\n")
        buf.write("/\f/\16/\u0244\13/\3\60\3\60\3\60\3\60\7\60\u024a\n\60")
        buf.write("\f\60\16\60\u024d\13\60\3\61\3\61\3\61\3\61\3\62\3\62")
        buf.write("\3\62\3\63\3\63\5\63\u0258\n\63\3\63\3\63\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\7\64\u0262\n\64\f\64\16\64\u0265\13")
        buf.write("\64\5\64\u0267\n\64\3\65\3\65\3\66\3\66\5\66\u026d\n\66")
        buf.write("\3\67\3\67\3\67\7\67\u0272\n\67\f\67\16\67\u0275\13\67")
        buf.write("\3\67\3\67\38\38\38\78\u027c\n8\f8\168\u027f\138\38\3")
        buf.write("8\39\39\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\7:\u0290\n:\f")
        buf.write(":\16:\u0293\13:\3;\3;\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\5<\u02a6\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\5<\u02b6\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\5<\u02c5\n<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\5<\u02d7\n<\3<\3<\3<\3<\3<\3<\5<\u02df")
        buf.write("\n<\3<\3<\3<\3<\3<\7<\u02e6\n<\f<\16<\u02e9\13<\3=\3=")
        buf.write("\3>\3>\3>\3>\5>\u02f1\n>\3?\3?\3@\3@\3@\3@\3@\3@\3@\5")
        buf.write("@\u02fc\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u032d\n")
        buf.write("@\3@\6@\u0330\n@\r@\16@\u0331\3@\3@\3@\3@\3@\3@\3@\3@")
        buf.write("\3@\3@\3@\5@\u033f\n@\5@\u0341\n@\5@\u0343\n@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0356\n")
        buf.write("@\f@\16@\u0359\13@\3A\3A\3A\3A\3A\3B\3B\3B\3C\3C\3D\3")
        buf.write("D\3E\3E\3F\3F\5F\u036b\nF\3F\3F\3F\5F\u0370\nF\3G\5G\u0373")
        buf.write("\nG\3G\3G\3G\5G\u0378\nG\5G\u037a\nG\3H\5H\u037d\nH\3")
        buf.write("H\3H\5H\u0381\nH\3H\3H\5H\u0385\nH\3H\5H\u0388\nH\3H\5")
        buf.write("H\u038b\nH\3H\3H\5H\u038f\nH\3H\5H\u0392\nH\3H\5H\u0395")
        buf.write("\nH\3H\5H\u0398\nH\3H\3H\5H\u039c\nH\3H\5H\u039f\nH\3")
        buf.write("H\5H\u03a2\nH\3H\3H\5H\u03a6\nH\3H\5H\u03a9\nH\3H\5H\u03ac")
        buf.write("\nH\3H\5H\u03af\nH\3H\3H\3H\3H\5H\u03b5\nH\3H\3H\5H\u03b9")
        buf.write("\nH\3H\5H\u03bc\nH\3H\3H\5H\u03c0\nH\3H\5H\u03c3\nH\3")
        buf.write("H\3H\5H\u03c7\nH\3H\3H\5H\u03cb\nH\5H\u03cd\nH\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\5I\u03dc\nI\3J\3J\5J\u03e0")
        buf.write("\nJ\3K\3K\3K\5K\u03e5\nK\3K\3K\3L\3L\3L\3L\3L\5L\u03ee")
        buf.write("\nL\3M\3M\3M\5M\u03f3\nM\3M\3M\3N\3N\3N\3N\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\5O\u0403\nO\3P\3P\3P\3P\3P\3P\3P\3Q\5Q\u040d")
        buf.write("\nQ\3Q\3Q\3Q\3Q\3Q\7Q\u0414\nQ\fQ\16Q\u0417\13Q\5Q\u0419")
        buf.write("\nQ\3Q\3Q\3R\3R\3R\3R\3S\3S\3S\3S\3S\3S\7S\u0427\nS\f")
        buf.write("S\16S\u042a\13S\5S\u042c\nS\3S\3S\3T\3T\3T\3T\3U\3U\3")
        buf.write("U\3U\3U\5U\u0439\nU\5U\u043b\nU\3U\3U\3U\3U\7U\u0441\n")
        buf.write("U\fU\16U\u0444\13U\5U\u0446\nU\3U\3U\3V\3V\3V\3W\3W\3")
        buf.write("W\3W\3W\5W\u0452\nW\3X\3X\3X\3X\3X\7X\u0459\nX\fX\16X")
        buf.write("\u045c\13X\3X\3X\5X\u0460\nX\3Y\3Y\3Z\3Z\3[\3[\3\\\3\\")
        buf.write("\3]\3]\3^\3^\3_\3_\5_\u0470\n_\3`\3`\5`\u0474\n`\3a\3")
        buf.write("a\5a\u0478\na\3b\3b\3c\3c\3c\5c\u047f\nc\3d\3d\3d\7d\u0484")
        buf.write("\nd\fd\16d\u0487\13d\3e\3e\5e\u048b\ne\3f\3f\3f\5f\u0490")
        buf.write("\nf\3f\2\5rv~g\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt")
        buf.write("vxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e")
        buf.write("\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0")
        buf.write("\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2")
        buf.write("\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4")
        buf.write("\u00c6\u00c8\u00ca\2&\3\2\b\t\3\2./\3\2\62\65\3\2\u00a1")
        buf.write("\u00a2\4\2\30\31CD\3\2EH\4\2))II\3\2JK\3\2MP\3\28:\4\2")
        buf.write("\66\66;;\3\2QX\3\2\\c\3\2fg\3\2hi\3\2pq\4\2//||\3\2}~")
        buf.write("\3\2sv\4\2fgww\3\2\u0081\u0082\3\2\u0083\u0084\3\2\u0085")
        buf.write("\u0086\3\2\u0088\u0089\3\2\u008b\u008d\3\2\u0090\u0091")
        buf.write("\3\29:\4\2  \'\'\4\2!!**\22\2\3\f\16\17\24\27\32\33\35")
        buf.write("\37$&))+BILNehnpquvx\u0084\u0087\u0094\u0098\u009a\25")
        buf.write("\2\25\25\27\27\32\33$&))++-\60\66BJJQX\\ejjnnpqx\u0080")
        buf.write("\u0087\u008a\u008d\u008e\u0090\u0092\u0099\u009a\25\2")
        buf.write("\3\f\16\17\24\24\26\26\35\37,,\61\65IIKLNPY[hikmuv\u0081")
        buf.write("\u0084\u008b\u008c\u008f\u008f\u0093\u0094\u0098\u0098")
        buf.write("\r\2\4\4\24\24\26\26,,./\67\67==IIY[hi\u0098\u009a\23")
        buf.write("\2\3\f\16\17\24\27\32\33\35\37$&))+BILNehnpquvx\u0084")
        buf.write("\u0088\u0089\u008b\u0094\u0098\u009a\4\2YZ\u0099\u009a")
        buf.write("\4\2\u009c\u009c\u009f\u00a0\2\u04f2\2\u00cd\3\2\2\2\4")
        buf.write("\u0101\3\2\2\2\6\u0107\3\2\2\2\b\u010d\3\2\2\2\n\u0117")
        buf.write("\3\2\2\2\f\u0119\3\2\2\2\16\u011c\3\2\2\2\20\u0128\3\2")
        buf.write("\2\2\22\u0133\3\2\2\2\24\u0140\3\2\2\2\26\u014f\3\2\2")
        buf.write("\2\30\u0153\3\2\2\2\32\u0156\3\2\2\2\34\u0162\3\2\2\2")
        buf.write("\36\u0177\3\2\2\2 \u017b\3\2\2\2\"\u017d\3\2\2\2$\u017f")
        buf.write("\3\2\2\2&\u0181\3\2\2\2(\u0188\3\2\2\2*\u018f\3\2\2\2")
        buf.write(",\u0194\3\2\2\2.\u0196\3\2\2\2\60\u019b\3\2\2\2\62\u01a0")
        buf.write("\3\2\2\2\64\u01ac\3\2\2\2\66\u01af\3\2\2\28\u01be\3\2")
        buf.write("\2\2:\u01c0\3\2\2\2<\u01c8\3\2\2\2>\u01d0\3\2\2\2@\u01eb")
        buf.write("\3\2\2\2B\u01ee\3\2\2\2D\u01f6\3\2\2\2F\u01f8\3\2\2\2")
        buf.write("H\u01fb\3\2\2\2J\u01ff\3\2\2\2L\u0201\3\2\2\2N\u0206\3")
        buf.write("\2\2\2P\u020b\3\2\2\2R\u021d\3\2\2\2T\u021f\3\2\2\2V\u0223")
        buf.write("\3\2\2\2X\u0225\3\2\2\2Z\u0227\3\2\2\2\\\u023b\3\2\2\2")
        buf.write("^\u0245\3\2\2\2`\u024e\3\2\2\2b\u0252\3\2\2\2d\u0255\3")
        buf.write("\2\2\2f\u025b\3\2\2\2h\u0268\3\2\2\2j\u026a\3\2\2\2l\u0273")
        buf.write("\3\2\2\2n\u027d\3\2\2\2p\u0282\3\2\2\2r\u0284\3\2\2\2")
        buf.write("t\u0294\3\2\2\2v\u02b5\3\2\2\2x\u02ea\3\2\2\2z\u02f0\3")
        buf.write("\2\2\2|\u02f2\3\2\2\2~\u0342\3\2\2\2\u0080\u035a\3\2\2")
        buf.write("\2\u0082\u035f\3\2\2\2\u0084\u0362\3\2\2\2\u0086\u0364")
        buf.write("\3\2\2\2\u0088\u0366\3\2\2\2\u008a\u036f\3\2\2\2\u008c")
        buf.write("\u0379\3\2\2\2\u008e\u03cc\3\2\2\2\u0090\u03db\3\2\2\2")
        buf.write("\u0092\u03df\3\2\2\2\u0094\u03e1\3\2\2\2\u0096\u03ed\3")
        buf.write("\2\2\2\u0098\u03ef\3\2\2\2\u009a\u03f6\3\2\2\2\u009c\u0402")
        buf.write("\3\2\2\2\u009e\u0404\3\2\2\2\u00a0\u040c\3\2\2\2\u00a2")
        buf.write("\u041c\3\2\2\2\u00a4\u0420\3\2\2\2\u00a6\u042f\3\2\2\2")
        buf.write("\u00a8\u043a\3\2\2\2\u00aa\u0449\3\2\2\2\u00ac\u044c\3")
        buf.write("\2\2\2\u00ae\u0453\3\2\2\2\u00b0\u0461\3\2\2\2\u00b2\u0463")
        buf.write("\3\2\2\2\u00b4\u0465\3\2\2\2\u00b6\u0467\3\2\2\2\u00b8")
        buf.write("\u0469\3\2\2\2\u00ba\u046b\3\2\2\2\u00bc\u046f\3\2\2\2")
        buf.write("\u00be\u0473\3\2\2\2\u00c0\u0477\3\2\2\2\u00c2\u0479\3")
        buf.write("\2\2\2\u00c4\u047b\3\2\2\2\u00c6\u0480\3\2\2\2\u00c8\u0488")
        buf.write("\3\2\2\2\u00ca\u048f\3\2\2\2\u00cc\u00ce\5\4\3\2\u00cd")
        buf.write("\u00cc\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00d2\3\2\2\2")
        buf.write("\u00cf\u00d1\5\6\4\2\u00d0\u00cf\3\2\2\2\u00d1\u00d4\3")
        buf.write("\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d3\3\2\2\2\u00d3\u00d8")
        buf.write("\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00d7\5\b\5\2\u00d6")
        buf.write("\u00d5\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8\u00d6\3\2\2\2")
        buf.write("\u00d8\u00d9\3\2\2\2\u00d9\u00de\3\2\2\2\u00da\u00d8\3")
        buf.write("\2\2\2\u00db\u00dd\5\20\t\2\u00dc\u00db\3\2\2\2\u00dd")
        buf.write("\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2\2")
        buf.write("\u00df\u00e4\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00e3\5")
        buf.write("\22\n\2\u00e2\u00e1\3\2\2\2\u00e3\u00e6\3\2\2\2\u00e4")
        buf.write("\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2\u00e5\u00ea\3\2\2\2")
        buf.write("\u00e6\u00e4\3\2\2\2\u00e7\u00e9\5\32\16\2\u00e8\u00e7")
        buf.write("\3\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea")
        buf.write("\u00eb\3\2\2\2\u00eb\u00f0\3\2\2\2\u00ec\u00ea\3\2\2\2")
        buf.write("\u00ed\u00ef\5\34\17\2\u00ee\u00ed\3\2\2\2\u00ef\u00f2")
        buf.write("\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1\3\2\2\2\u00f1")
        buf.write("\u00f6\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f5\5\16\b")
        buf.write("\2\u00f4\u00f3\3\2\2\2\u00f5\u00f8\3\2\2\2\u00f6\u00f4")
        buf.write("\3\2\2\2\u00f6\u00f7\3\2\2\2\u00f7\u00fc\3\2\2\2\u00f8")
        buf.write("\u00f6\3\2\2\2\u00f9\u00fb\58\35\2\u00fa\u00f9\3\2\2\2")
        buf.write("\u00fb\u00fe\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fc\u00fd\3")
        buf.write("\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff\u0100")
        buf.write("\7\2\2\3\u0100\3\3\2\2\2\u0101\u0102\7\3\2\2\u0102\u0105")
        buf.write("\5l\67\2\u0103\u0104\7\4\2\2\u0104\u0106\5$\23\2\u0105")
        buf.write("\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\5\3\2\2\2\u0107")
        buf.write("\u0108\7\5\2\2\u0108\u010b\5,\27\2\u0109\u010a\7\4\2\2")
        buf.write("\u010a\u010c\5$\23\2\u010b\u0109\3\2\2\2\u010b\u010c\3")
        buf.write("\2\2\2\u010c\7\3\2\2\2\u010d\u010e\7\6\2\2\u010e\u0111")
        buf.write("\5l\67\2\u010f\u0110\7\4\2\2\u0110\u0112\5$\23\2\u0111")
        buf.write("\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112\u0115\3\2\2\2")
        buf.write("\u0113\u0114\7\7\2\2\u0114\u0116\5\n\6\2\u0115\u0113\3")
        buf.write("\2\2\2\u0115\u0116\3\2\2\2\u0116\t\3\2\2\2\u0117\u0118")
        buf.write("\5\u00c2b\2\u0118\13\3\2\2\2\u0119\u011a\t\2\2\2\u011a")
        buf.write("\r\3\2\2\2\u011b\u011d\5\f\7\2\u011c\u011b\3\2\2\2\u011c")
        buf.write("\u011d\3\2\2\2\u011d\u011e\3\2\2\2\u011e\u011f\7\n\2\2")
        buf.write("\u011f\u0121\5\u00c2b\2\u0120\u0122\5(\25\2\u0121\u0120")
        buf.write("\3\2\2\2\u0121\u0122\3\2\2\2\u0122\u0125\3\2\2\2\u0123")
        buf.write("\u0124\7\13\2\2\u0124\u0126\5v<\2\u0125\u0123\3\2\2\2")
        buf.write("\u0125\u0126\3\2\2\2\u0126\17\3\2\2\2\u0127\u0129\5\f")
        buf.write("\7\2\u0128\u0127\3\2\2\2\u0128\u0129\3\2\2\2\u0129\u012a")
        buf.write("\3\2\2\2\u012a\u012b\7\f\2\2\u012b\u012c\5\u00c2b\2\u012c")
        buf.write("\u012d\7\r\2\2\u012d\u0130\5 \21\2\u012e\u012f\7\4\2\2")
        buf.write("\u012f\u0131\5$\23\2\u0130\u012e\3\2\2\2\u0130\u0131\3")
        buf.write("\2\2\2\u0131\21\3\2\2\2\u0132\u0134\5\f\7\2\u0133\u0132")
        buf.write("\3\2\2\2\u0133\u0134\3\2\2\2\u0134\u0135\3\2\2\2\u0135")
        buf.write("\u0136\7\16\2\2\u0136\u0137\5\u00c2b\2\u0137\u0138\7\r")
        buf.write("\2\2\u0138\u013b\5\"\22\2\u0139\u013a\7\4\2\2\u013a\u013c")
        buf.write("\5$\23\2\u013b\u0139\3\2\2\2\u013b\u013c\3\2\2\2\u013c")
        buf.write("\u013e\3\2\2\2\u013d\u013f\5\24\13\2\u013e\u013d\3\2\2")
        buf.write("\2\u013e\u013f\3\2\2\2\u013f\23\3\2\2\2\u0140\u0141\7")
        buf.write("\17\2\2\u0141\u0142\7\20\2\2\u0142\u0147\5\26\f\2\u0143")
        buf.write("\u0144\7\21\2\2\u0144\u0146\5\26\f\2\u0145\u0143\3\2\2")
        buf.write("\2\u0146\u0149\3\2\2\2\u0147\u0145\3\2\2\2\u0147\u0148")
        buf.write("\3\2\2\2\u0148\u014a\3\2\2\2\u0149\u0147\3\2\2\2\u014a")
        buf.write("\u014b\7\22\2\2\u014b\25\3\2\2\2\u014c\u014d\5\30\r\2")
        buf.write("\u014d\u014e\7\23\2\2\u014e\u0150\3\2\2\2\u014f\u014c")
        buf.write("\3\2\2\2\u014f\u0150\3\2\2\2\u0150\u0151\3\2\2\2\u0151")
        buf.write("\u0152\5\u00c2b\2\u0152\27\3\2\2\2\u0153\u0154\5\u00c2")
        buf.write("b\2\u0154\31\3\2\2\2\u0155\u0157\5\f\7\2\u0156\u0155\3")
        buf.write("\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159")
        buf.write("\7\24\2\2\u0159\u015a\5\u00c2b\2\u015a\u015b\7\r\2\2\u015b")
        buf.write("\u015c\5&\24\2\u015c\u015d\7\25\2\2\u015d\u015f\5\26\f")
        buf.write("\2\u015e\u0160\5\u00aaV\2\u015f\u015e\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\33\3\2\2\2\u0161\u0163\5\f\7\2\u0162\u0161")
        buf.write("\3\2\2\2\u0162\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164")
        buf.write("\u0165\7\26\2\2\u0165\u0166\5\u00c2b\2\u0166\u0167\7\r")
        buf.write("\2\2\u0167\u0168\7\20\2\2\u0168\u016d\5\36\20\2\u0169")
        buf.write("\u016a\7\21\2\2\u016a\u016c\5\36\20\2\u016b\u0169\3\2")
        buf.write("\2\2\u016c\u016f\3\2\2\2\u016d\u016b\3\2\2\2\u016d\u016e")
        buf.write("\3\2\2\2\u016e\u0170\3\2\2\2\u016f\u016d\3\2\2\2\u0170")
        buf.write("\u0172\7\22\2\2\u0171\u0173\5\u00aaV\2\u0172\u0171\3\2")
        buf.write("\2\2\u0172\u0173\3\2\2\2\u0173\35\3\2\2\2\u0174\u0175")
        buf.write("\5\30\r\2\u0175\u0176\7\23\2\2\u0176\u0178\3\2\2\2\u0177")
        buf.write("\u0174\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179\3\2\2\2")
        buf.write("\u0179\u017a\5\u00c2b\2\u017a\37\3\2\2\2\u017b\u017c\7")
        buf.write("\u00a1\2\2\u017c!\3\2\2\2\u017d\u017e\7\u00a1\2\2\u017e")
        buf.write("#\3\2\2\2\u017f\u0180\7\u00a1\2\2\u0180%\3\2\2\2\u0181")
        buf.write("\u0182\7\u00a1\2\2\u0182\'\3\2\2\2\u0183\u0189\5*\26\2")
        buf.write("\u0184\u0189\5.\30\2\u0185\u0189\5\60\31\2\u0186\u0189")
        buf.write("\5\62\32\2\u0187\u0189\5\66\34\2\u0188\u0183\3\2\2\2\u0188")
        buf.write("\u0184\3\2\2\2\u0188\u0185\3\2\2\2\u0188\u0186\3\2\2\2")
        buf.write("\u0188\u0187\3\2\2\2\u0189)\3\2\2\2\u018a\u018b\5X-\2")
        buf.write("\u018b\u018c\7\23\2\2\u018c\u018e\3\2\2\2\u018d\u018a")
        buf.write("\3\2\2\2\u018e\u0191\3\2\2\2\u018f\u018d\3\2\2\2\u018f")
        buf.write("\u0190\3\2\2\2\u0190\u0192\3\2\2\2\u0191\u018f\3\2\2\2")
        buf.write("\u0192\u0193\5\u00be`\2\u0193+\3\2\2\2\u0194\u0195\5\u00c2")
        buf.write("b\2\u0195-\3\2\2\2\u0196\u0197\7\27\2\2\u0197\u0198\7")
        buf.write("\30\2\2\u0198\u0199\5(\25\2\u0199\u019a\7\31\2\2\u019a")
        buf.write("/\3\2\2\2\u019b\u019c\7\32\2\2\u019c\u019d\7\30\2\2\u019d")
        buf.write("\u019e\5(\25\2\u019e\u019f\7\31\2\2\u019f\61\3\2\2\2\u01a0")
        buf.write("\u01a1\7\33\2\2\u01a1\u01a2\7\20\2\2\u01a2\u01a7\5\64")
        buf.write("\33\2\u01a3\u01a4\7\21\2\2\u01a4\u01a6\5\64\33\2\u01a5")
        buf.write("\u01a3\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3")
        buf.write("\2\2\2\u01aa\u01ab\7\22\2\2\u01ab\63\3\2\2\2\u01ac\u01ad")
        buf.write("\5\u00bc_\2\u01ad\u01ae\5(\25\2\u01ae\65\3\2\2\2\u01af")
        buf.write("\u01b0\7\34\2\2\u01b0\u01b1\7\30\2\2\u01b1\u01b6\5(\25")
        buf.write("\2\u01b2\u01b3\7\21\2\2\u01b3\u01b5\5(\25\2\u01b4\u01b2")
        buf.write("\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b7\u01b9\3\2\2\2\u01b8\u01b6\3\2\2\2")
        buf.write("\u01b9\u01ba\7\31\2\2\u01ba\67\3\2\2\2\u01bb\u01bf\5:")
        buf.write("\36\2\u01bc\u01bf\5<\37\2\u01bd\u01bf\5> \2\u01be\u01bb")
        buf.write("\3\2\2\2\u01be\u01bc\3\2\2\2\u01be\u01bd\3\2\2\2\u01bf")
        buf.write("9\3\2\2\2\u01c0\u01c2\7\35\2\2\u01c1\u01c3\5\f\7\2\u01c2")
        buf.write("\u01c1\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2")
        buf.write("\u01c4\u01c5\5\u00c2b\2\u01c5\u01c6\7\r\2\2\u01c6\u01c7")
        buf.write("\5v<\2\u01c7;\3\2\2\2\u01c8\u01cc\7\36\2\2\u01c9\u01ca")
        buf.write("\5,\27\2\u01ca\u01cb\7\23\2\2\u01cb\u01cd\3\2\2\2\u01cc")
        buf.write("\u01c9\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3\2\2\2")
        buf.write("\u01ce\u01cf\5\u00c2b\2\u01cf=\3\2\2\2\u01d0\u01d2\7\35")
        buf.write("\2\2\u01d1\u01d3\5\f\7\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3")
        buf.write("\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d5\7\37\2\2\u01d5")
        buf.write("\u01d6\5\u00c0a\2\u01d6\u01df\7 \2\2\u01d7\u01dc\5@!\2")
        buf.write("\u01d8\u01d9\7\21\2\2\u01d9\u01db\5@!\2\u01da\u01d8\3")
        buf.write("\2\2\2\u01db\u01de\3\2\2\2\u01dc\u01da\3\2\2\2\u01dc\u01dd")
        buf.write("\3\2\2\2\u01dd\u01e0\3\2\2\2\u01de\u01dc\3\2\2\2\u01df")
        buf.write("\u01d7\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01e1\3\2\2\2")
        buf.write("\u01e1\u01e4\7!\2\2\u01e2\u01e3\7\"\2\2\u01e3\u01e5\5")
        buf.write("(\25\2\u01e4\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01e6")
        buf.write("\3\2\2\2\u01e6\u01e9\7\r\2\2\u01e7\u01ea\5B\"\2\u01e8")
        buf.write("\u01ea\7#\2\2\u01e9\u01e7\3\2\2\2\u01e9\u01e8\3\2\2\2")
        buf.write("\u01ea?\3\2\2\2\u01eb\u01ec\5\u00bc_\2\u01ec\u01ed\5(")
        buf.write("\25\2\u01edA\3\2\2\2\u01ee\u01ef\5v<\2\u01efC\3\2\2\2")
        buf.write("\u01f0\u01f7\5P)\2\u01f1\u01f7\5n8\2\u01f2\u01f3\7 \2")
        buf.write("\2\u01f3\u01f4\5v<\2\u01f4\u01f5\7!\2\2\u01f5\u01f7\3")
        buf.write("\2\2\2\u01f6\u01f0\3\2\2\2\u01f6\u01f1\3\2\2\2\u01f6\u01f2")
        buf.write("\3\2\2\2\u01f7E\3\2\2\2\u01f8\u01f9\5D#\2\u01f9\u01fa")
        buf.write("\5H%\2\u01faG\3\2\2\2\u01fb\u01fc\5\u00c2b\2\u01fcI\3")
        buf.write("\2\2\2\u01fd\u0200\5L\'\2\u01fe\u0200\5N(\2\u01ff\u01fd")
        buf.write("\3\2\2\2\u01ff\u01fe\3\2\2\2\u0200K\3\2\2\2\u0201\u0202")
        buf.write("\7$\2\2\u0202\u0203\5F$\2\u0203\u0204\7%\2\2\u0204\u0205")
        buf.write("\5v<\2\u0205M\3\2\2\2\u0206\u0207\7&\2\2\u0207\u0208\5")
        buf.write("F$\2\u0208\u0209\7%\2\2\u0209\u020a\5v<\2\u020aO\3\2\2")
        buf.write("\2\u020b\u020f\7\'\2\2\u020c\u020d\5R*\2\u020d\u020e\7")
        buf.write("(\2\2\u020e\u0210\3\2\2\2\u020f\u020c\3\2\2\2\u020f\u0210")
        buf.write("\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0219\5*\26\2\u0212")
        buf.write("\u0216\7\r\2\2\u0213\u0214\5T+\2\u0214\u0215\7)\2\2\u0215")
        buf.write("\u0217\3\2\2\2\u0216\u0213\3\2\2\2\u0216\u0217\3\2\2\2")
        buf.write("\u0217\u0218\3\2\2\2\u0218\u021a\5V,\2\u0219\u0212\3\2")
        buf.write("\2\2\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c")
        buf.write("\7*\2\2\u021cQ\3\2\2\2\u021d\u021e\5n8\2\u021eS\3\2\2")
        buf.write("\2\u021f\u0220\5r:\2\u0220U\3\2\2\2\u0221\u0224\5n8\2")
        buf.write("\u0222\u0224\5v<\2\u0223\u0221\3\2\2\2\u0223\u0222\3\2")
        buf.write("\2\2\u0224W\3\2\2\2\u0225\u0226\5\u00c2b\2\u0226Y\3\2")
        buf.write("\2\2\u0227\u0229\5\\/\2\u0228\u022a\5^\60\2\u0229\u0228")
        buf.write("\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022e\3\2\2\2\u022b")
        buf.write("\u022d\5J&\2\u022c\u022b\3\2\2\2\u022d\u0230\3\2\2\2\u022e")
        buf.write("\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0232\3\2\2\2")
        buf.write("\u0230\u022e\3\2\2\2\u0231\u0233\5b\62\2\u0232\u0231\3")
        buf.write("\2\2\2\u0232\u0233\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u0236")
        buf.write("\5d\63\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0238\3\2\2\2\u0237\u0239\5f\64\2\u0238\u0237\3\2\2\2")
        buf.write("\u0238\u0239\3\2\2\2\u0239[\3\2\2\2\u023a\u023c\7\25\2")
        buf.write("\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023d")
        buf.write("\3\2\2\2\u023d\u0242\5F$\2\u023e\u023f\7\21\2\2\u023f")
        buf.write("\u0241\5F$\2\u0240\u023e\3\2\2\2\u0241\u0244\3\2\2\2\u0242")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243]\3\2\2\2\u0244")
        buf.write("\u0242\3\2\2\2\u0245\u0246\7+\2\2\u0246\u024b\5`\61\2")
        buf.write("\u0247\u0248\7\21\2\2\u0248\u024a\5`\61\2\u0249\u0247")
        buf.write("\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b")
        buf.write("\u024c\3\2\2\2\u024c_\3\2\2\2\u024d\u024b\3\2\2\2\u024e")
        buf.write("\u024f\5\u00c2b\2\u024f\u0250\7\r\2\2\u0250\u0251\5v<")
        buf.write("\2\u0251a\3\2\2\2\u0252\u0253\7,\2\2\u0253\u0254\5v<\2")
        buf.write("\u0254c\3\2\2\2\u0255\u0257\7-\2\2\u0256\u0258\t\3\2\2")
        buf.write("\u0257\u0256\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259\3")
        buf.write("\2\2\2\u0259\u025a\5v<\2\u025ae\3\2\2\2\u025b\u0266\7")
        buf.write("\60\2\2\u025c\u0267\5h\65\2\u025d\u025e\7\61\2\2\u025e")
        buf.write("\u0263\5j\66\2\u025f\u0260\7\21\2\2\u0260\u0262\5j\66")
        buf.write("\2\u0261\u025f\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261")
        buf.write("\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0267\3\2\2\2\u0265")
        buf.write("\u0263\3\2\2\2\u0266\u025c\3\2\2\2\u0266\u025d\3\2\2\2")
        buf.write("\u0267g\3\2\2\2\u0268\u0269\t\4\2\2\u0269i\3\2\2\2\u026a")
        buf.write("\u026c\5~@\2\u026b\u026d\5h\65\2\u026c\u026b\3\2\2\2\u026c")
        buf.write("\u026d\3\2\2\2\u026dk\3\2\2\2\u026e\u026f\5X-\2\u026f")
        buf.write("\u0270\7\23\2\2\u0270\u0272\3\2\2\2\u0271\u026e\3\2\2")
        buf.write("\2\u0272\u0275\3\2\2\2\u0273\u0271\3\2\2\2\u0273\u0274")
        buf.write("\3\2\2\2\u0274\u0276\3\2\2\2\u0275\u0273\3\2\2\2\u0276")
        buf.write("\u0277\5\u00c2b\2\u0277m\3\2\2\2\u0278\u0279\5p9\2\u0279")
        buf.write("\u027a\7\23\2\2\u027a\u027c\3\2\2\2\u027b\u0278\3\2\2")
        buf.write("\2\u027c\u027f\3\2\2\2\u027d\u027b\3\2\2\2\u027d\u027e")
        buf.write("\3\2\2\2\u027e\u0280\3\2\2\2\u027f\u027d\3\2\2\2\u0280")
        buf.write("\u0281\5\u00bc_\2\u0281o\3\2\2\2\u0282\u0283\5\u00bc_")
        buf.write("\2\u0283q\3\2\2\2\u0284\u0285\b:\1\2\u0285\u0286\5\u00bc")
        buf.write("_\2\u0286\u0291\3\2\2\2\u0287\u0288\f\4\2\2\u0288\u0289")
        buf.write("\7\23\2\2\u0289\u0290\5\u00bc_\2\u028a\u028b\f\3\2\2\u028b")
        buf.write("\u028c\7\'\2\2\u028c\u028d\5t;\2\u028d\u028e\7*\2\2\u028e")
        buf.write("\u0290\3\2\2\2\u028f\u0287\3\2\2\2\u028f\u028a\3\2\2\2")
        buf.write("\u0290\u0293\3\2\2\2\u0291\u028f\3\2\2\2\u0291\u0292\3")
        buf.write("\2\2\2\u0292s\3\2\2\2\u0293\u0291\3\2\2\2\u0294\u0295")
        buf.write("\t\5\2\2\u0295u\3\2\2\2\u0296\u0297\b<\1\2\u0297\u02b6")
        buf.write("\5~@\2\u0298\u02b6\5P)\2\u0299\u02b6\5Z.\2\u029a\u029b")
        buf.write("\7<\2\2\u029b\u029c\5v<\2\u029c\u029d\7;\2\2\u029d\u029e")
        buf.write("\5(\25\2\u029e\u02b6\3\2\2\2\u029f\u02a0\7\67\2\2\u02a0")
        buf.write("\u02b6\5v<\17\u02a1\u02a2\7=\2\2\u02a2\u02b6\5v<\16\u02a3")
        buf.write("\u02a4\7A\2\2\u02a4\u02a6\7)\2\2\u02a5\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a6\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8\5|?\2\u02a8")
        buf.write("\u02a9\7?\2\2\u02a9\u02aa\5~@\2\u02aa\u02ab\7@\2\2\u02ab")
        buf.write("\u02ac\5~@\2\u02ac\u02b6\3\2\2\2\u02ad\u02ae\7B\2\2\u02ae")
        buf.write("\u02af\7)\2\2\u02af\u02b0\5|?\2\u02b0\u02b1\7?\2\2\u02b1")
        buf.write("\u02b2\5~@\2\u02b2\u02b3\7@\2\2\u02b3\u02b4\5~@\2\u02b4")
        buf.write("\u02b6\3\2\2\2\u02b5\u0296\3\2\2\2\u02b5\u0298\3\2\2\2")
        buf.write("\u02b5\u0299\3\2\2\2\u02b5\u029a\3\2\2\2\u02b5\u029f\3")
        buf.write("\2\2\2\u02b5\u02a1\3\2\2\2\u02b5\u02a5\3\2\2\2\u02b5\u02ad")
        buf.write("\3\2\2\2\u02b6\u02e7\3\2\2\2\u02b7\u02b8\f\n\2\2\u02b8")
        buf.write("\u02b9\t\6\2\2\u02b9\u02e6\5v<\13\u02ba\u02bb\f\t\2\2")
        buf.write("\u02bb\u02bc\5\u008eH\2\u02bc\u02bd\5v<\n\u02bd\u02e6")
        buf.write("\3\2\2\2\u02be\u02bf\f\b\2\2\u02bf\u02c0\t\7\2\2\u02c0")
        buf.write("\u02e6\5v<\t\u02c1\u02c2\f\7\2\2\u02c2\u02c4\t\b\2\2\u02c3")
        buf.write("\u02c5\5\u0082B\2\u02c4\u02c3\3\2\2\2\u02c4\u02c5\3\2")
        buf.write("\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02e6\5v<\b\u02c7\u02c8")
        buf.write("\f\6\2\2\u02c8\u02c9\7@\2\2\u02c9\u02e6\5v<\7\u02ca\u02cb")
        buf.write("\f\5\2\2\u02cb\u02cc\t\t\2\2\u02cc\u02e6\5v<\6\u02cd\u02ce")
        buf.write("\f\4\2\2\u02ce\u02cf\7L\2\2\u02cf\u02e6\5v<\5\u02d0\u02d1")
        buf.write("\f\3\2\2\u02d1\u02d2\t\n\2\2\u02d2\u02e6\5v<\4\u02d3\u02d4")
        buf.write("\f\22\2\2\u02d4\u02d6\7\66\2\2\u02d5\u02d7\7\67\2\2\u02d6")
        buf.write("\u02d5\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d8\3\2\2\2")
        buf.write("\u02d8\u02e6\t\13\2\2\u02d9\u02da\f\21\2\2\u02da\u02db")
        buf.write("\t\f\2\2\u02db\u02e6\5(\25\2\u02dc\u02de\f\r\2\2\u02dd")
        buf.write("\u02df\7>\2\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2")
        buf.write("\u02df\u02e0\3\2\2\2\u02e0\u02e1\7?\2\2\u02e1\u02e2\5")
        buf.write("~@\2\u02e2\u02e3\7@\2\2\u02e3\u02e4\5~@\2\u02e4\u02e6")
        buf.write("\3\2\2\2\u02e5\u02b7\3\2\2\2\u02e5\u02ba\3\2\2\2\u02e5")
        buf.write("\u02be\3\2\2\2\u02e5\u02c1\3\2\2\2\u02e5\u02c7\3\2\2\2")
        buf.write("\u02e5\u02ca\3\2\2\2\u02e5\u02cd\3\2\2\2\u02e5\u02d0\3")
        buf.write("\2\2\2\u02e5\u02d3\3\2\2\2\u02e5\u02d9\3\2\2\2\u02e5\u02dc")
        buf.write("\3\2\2\2\u02e6\u02e9\3\2\2\2\u02e7\u02e5\3\2\2\2\u02e7")
        buf.write("\u02e8\3\2\2\2\u02e8w\3\2\2\2\u02e9\u02e7\3\2\2\2\u02ea")
        buf.write("\u02eb\t\r\2\2\u02eby\3\2\2\2\u02ec\u02f1\5x=\2\u02ed")
        buf.write("\u02f1\7Y\2\2\u02ee\u02f1\7Z\2\2\u02ef\u02f1\7[\2\2\u02f0")
        buf.write("\u02ec\3\2\2\2\u02f0\u02ed\3\2\2\2\u02f0\u02ee\3\2\2\2")
        buf.write("\u02f0\u02ef\3\2\2\2\u02f1{\3\2\2\2\u02f2\u02f3\t\16\2")
        buf.write("\2\u02f3}\3\2\2\2\u02f4\u02f5\b@\1\2\u02f5\u0343\5\u0090")
        buf.write("I\2\u02f6\u02f7\7d\2\2\u02f7\u02f8\5v<\2\u02f8\u02fb\7")
        buf.write("e\2\2\u02f9\u02fc\5(\25\2\u02fa\u02fc\5\u00caf\2\u02fb")
        buf.write("\u02f9\3\2\2\2\u02fb\u02fa\3\2\2\2\u02fc\u0343\3\2\2\2")
        buf.write("\u02fd\u02fe\t\17\2\2\u02fe\u0343\5~@\24\u02ff\u0300\t")
        buf.write("\20\2\2\u0300\u0301\7j\2\2\u0301\u0343\5~@\23\u0302\u0303")
        buf.write("\5z>\2\u0303\u0304\7\25\2\2\u0304\u0305\5~@\22\u0305\u0343")
        buf.write("\3\2\2\2\u0306\u0307\7A\2\2\u0307\u0308\7)\2\2\u0308\u0309")
        buf.write("\5|?\2\u0309\u030a\7j\2\2\u030a\u030b\5~@\21\u030b\u0343")
        buf.write("\3\2\2\2\u030c\u030d\7B\2\2\u030d\u030e\7)\2\2\u030e\u030f")
        buf.write("\5|?\2\u030f\u0310\7j\2\2\u0310\u0311\5~@\20\u0311\u0343")
        buf.write("\3\2\2\2\u0312\u0313\7k\2\2\u0313\u0314\7j\2\2\u0314\u0343")
        buf.write("\5~@\17\u0315\u0316\7l\2\2\u0316\u0317\7j\2\2\u0317\u0343")
        buf.write("\5~@\16\u0318\u0319\7m\2\2\u0319\u031a\7j\2\2\u031a\u0343")
        buf.write("\5~@\r\u031b\u031c\7n\2\2\u031c\u031d\7\25\2\2\u031d\u0343")
        buf.write("\5~@\f\u031e\u031f\7o\2\2\u031f\u0320\7\25\2\2\u0320\u0343")
        buf.write("\5~@\13\u0321\u0322\t\21\2\2\u0322\u0343\5*\26\2\u0323")
        buf.write("\u0324\7x\2\2\u0324\u0325\5v<\2\u0325\u0326\7y\2\2\u0326")
        buf.write("\u0327\5v<\2\u0327\u0328\7z\2\2\u0328\u0329\5v<\2\u0329")
        buf.write("\u0343\3\2\2\2\u032a\u032c\7{\2\2\u032b\u032d\5v<\2\u032c")
        buf.write("\u032b\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2")
        buf.write("\u032e\u0330\5\u0080A\2\u032f\u032e\3\2\2\2\u0330\u0331")
        buf.write("\3\2\2\2\u0331\u032f\3\2\2\2\u0331\u0332\3\2\2\2\u0332")
        buf.write("\u0333\3\2\2\2\u0333\u0334\7z\2\2\u0334\u0335\5v<\2\u0335")
        buf.write("\u0336\7i\2\2\u0336\u0343\3\2\2\2\u0337\u0338\t\22\2\2")
        buf.write("\u0338\u0343\5v<\2\u0339\u033a\t\23\2\2\u033a\u0340\5")
        buf.write("v<\2\u033b\u033e\7\177\2\2\u033c\u033f\5x=\2\u033d\u033f")
        buf.write("\5v<\2\u033e\u033c\3\2\2\2\u033e\u033d\3\2\2\2\u033f\u0341")
        buf.write("\3\2\2\2\u0340\u033b\3\2\2\2\u0340\u0341\3\2\2\2\u0341")
        buf.write("\u0343\3\2\2\2\u0342\u02f4\3\2\2\2\u0342\u02f6\3\2\2\2")
        buf.write("\u0342\u02fd\3\2\2\2\u0342\u02ff\3\2\2\2\u0342\u0302\3")
        buf.write("\2\2\2\u0342\u0306\3\2\2\2\u0342\u030c\3\2\2\2\u0342\u0312")
        buf.write("\3\2\2\2\u0342\u0315\3\2\2\2\u0342\u0318\3\2\2\2\u0342")
        buf.write("\u031b\3\2\2\2\u0342\u031e\3\2\2\2\u0342\u0321\3\2\2\2")
        buf.write("\u0342\u0323\3\2\2\2\u0342\u032a\3\2\2\2\u0342\u0337\3")
        buf.write("\2\2\2\u0342\u0339\3\2\2\2\u0343\u0357\3\2\2\2\u0344\u0345")
        buf.write("\f\t\2\2\u0345\u0346\7r\2\2\u0346\u0356\5~@\n\u0347\u0348")
        buf.write("\f\b\2\2\u0348\u0349\t\24\2\2\u0349\u0356\5~@\t\u034a")
        buf.write("\u034b\f\7\2\2\u034b\u034c\t\25\2\2\u034c\u0356\5~@\b")
        buf.write("\u034d\u034e\f\27\2\2\u034e\u034f\7\23\2\2\u034f\u0356")
        buf.write("\5\u0092J\2\u0350\u0351\f\26\2\2\u0351\u0352\7\'\2\2\u0352")
        buf.write("\u0353\5v<\2\u0353\u0354\7*\2\2\u0354\u0356\3\2\2\2\u0355")
        buf.write("\u0344\3\2\2\2\u0355\u0347\3\2\2\2\u0355\u034a\3\2\2\2")
        buf.write("\u0355\u034d\3\2\2\2\u0355\u0350\3\2\2\2\u0356\u0359\3")
        buf.write("\2\2\2\u0357\u0355\3\2\2\2\u0357\u0358\3\2\2\2\u0358\177")
        buf.write("\3\2\2\2\u0359\u0357\3\2\2\2\u035a\u035b\7\u0080\2\2\u035b")
        buf.write("\u035c\5v<\2\u035c\u035d\7y\2\2\u035d\u035e\5v<\2\u035e")
        buf.write("\u0081\3\2\2\2\u035f\u0360\5x=\2\u0360\u0361\7j\2\2\u0361")
        buf.write("\u0083\3\2\2\2\u0362\u0363\t\26\2\2\u0363\u0085\3\2\2")
        buf.write("\2\u0364\u0365\t\27\2\2\u0365\u0087\3\2\2\2\u0366\u0367")
        buf.write("\t\30\2\2\u0367\u0089\3\2\2\2\u0368\u036a\5\u00c8e\2\u0369")
        buf.write("\u036b\5\u0086D\2\u036a\u0369\3\2\2\2\u036a\u036b\3\2")
        buf.write("\2\2\u036b\u0370\3\2\2\2\u036c\u036d\5\u0088E\2\u036d")
        buf.write("\u036e\5\u00c8e\2\u036e\u0370\3\2\2\2\u036f\u0368\3\2")
        buf.write("\2\2\u036f\u036c\3\2\2\2\u0370\u008b\3\2\2\2\u0371\u0373")
        buf.write("\7\u0087\2\2\u0372\u0371\3\2\2\2\u0372\u0373\3\2\2\2\u0373")
        buf.write("\u0374\3\2\2\2\u0374\u037a\t\31\2\2\u0375\u0377\t\31\2")
        buf.write("\2\u0376\u0378\7\u008a\2\2\u0377\u0376\3\2\2\2\u0377\u0378")
        buf.write("\3\2\2\2\u0378\u037a\3\2\2\2\u0379\u0372\3\2\2\2\u0379")
        buf.write("\u0375\3\2\2\2\u037a\u008d\3\2\2\2\u037b\u037d\t\32\2")
        buf.write("\2\u037c\u037b\3\2\2\2\u037c\u037d\3\2\2\2\u037d\u037e")
        buf.write("\3\2\2\2\u037e\u0380\7\u008e\2\2\u037f\u0381\5x=\2\u0380")
        buf.write("\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u0384\3\2\2\2")
        buf.write("\u0382\u0385\5\u0084C\2\u0383\u0385\7;\2\2\u0384\u0382")
        buf.write("\3\2\2\2\u0384\u0383\3\2\2\2\u0385\u0387\3\2\2\2\u0386")
        buf.write("\u0388\t\20\2\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2")
        buf.write("\2\u0388\u03cd\3\2\2\2\u0389\u038b\7>\2\2\u038a\u0389")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write("\u038e\7\u008f\2\2\u038d\u038f\5\u0082B\2\u038e\u038d")
        buf.write("\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0391\3\2\2\2\u0390")
        buf.write("\u0392\t\20\2\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2")
        buf.write("\2\u0392\u03cd\3\2\2\2\u0393\u0395\t\32\2\2\u0394\u0393")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\3\2\2\2\u0396")
        buf.write("\u0398\7>\2\2\u0397\u0396\3\2\2\2\u0397\u0398\3\2\2\2")
        buf.write("\u0398\u0399\3\2\2\2\u0399\u039b\t\33\2\2\u039a\u039c")
        buf.write("\5\u0082B\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write("\u03cd\3\2\2\2\u039d\u039f\t\32\2\2\u039e\u039d\3\2\2")
        buf.write("\2\u039e\u039f\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u03a2")
        buf.write("\5\u008aF\2\u03a1\u03a0\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u03a3\3\2\2\2\u03a3\u03a5\5\u008cG\2\u03a4\u03a6\5\u0082")
        buf.write("B\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a8")
        buf.write("\3\2\2\2\u03a7\u03a9\t\20\2\2\u03a8\u03a7\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u03cd\3\2\2\2\u03aa\u03ac\t\32\2")
        buf.write("\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ae")
        buf.write("\3\2\2\2\u03ad\u03af\7>\2\2\u03ae\u03ad\3\2\2\2\u03ae")
        buf.write("\u03af\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\7\u0092")
        buf.write("\2\2\u03b1\u03b2\5\u00c8e\2\u03b2\u03b4\7j\2\2\u03b3\u03b5")
        buf.write("\t\20\2\2\u03b4\u03b3\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5")
        buf.write("\u03cd\3\2\2\2\u03b6\u03b8\7\u0093\2\2\u03b7\u03b9\t\31")
        buf.write("\2\2\u03b8\u03b7\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9\u03bb")
        buf.write("\3\2\2\2\u03ba\u03bc\5\u0082B\2\u03bb\u03ba\3\2\2\2\u03bb")
        buf.write("\u03bc\3\2\2\2\u03bc\u03cd\3\2\2\2\u03bd\u03bf\7\u0094")
        buf.write("\2\2\u03be\u03c0\t\31\2\2\u03bf\u03be\3\2\2\2\u03bf\u03c0")
        buf.write("\3\2\2\2\u03c0\u03c2\3\2\2\2\u03c1\u03c3\5\u0082B\2\u03c2")
        buf.write("\u03c1\3\2\2\2\u03c2\u03c3\3\2\2\2\u03c3\u03cd\3\2\2\2")
        buf.write("\u03c4\u03c6\7\u008b\2\2\u03c5\u03c7\5\u0082B\2\u03c6")
        buf.write("\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03cd\3\2\2\2")
        buf.write("\u03c8\u03ca\7\u008c\2\2\u03c9\u03cb\5\u0082B\2\u03ca")
        buf.write("\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cd\3\2\2\2")
        buf.write("\u03cc\u037c\3\2\2\2\u03cc\u038a\3\2\2\2\u03cc\u0394\3")
        buf.write("\2\2\2\u03cc\u039e\3\2\2\2\u03cc\u03ab\3\2\2\2\u03cc\u03b6")
        buf.write("\3\2\2\2\u03cc\u03bd\3\2\2\2\u03cc\u03c4\3\2\2\2\u03cc")
        buf.write("\u03c8\3\2\2\2\u03cd\u008f\3\2\2\2\u03ce\u03dc\5\u0096")
        buf.write("L\2\u03cf\u03dc\5\u009cO\2\u03d0\u03dc\5\u00c4c\2\u03d1")
        buf.write("\u03dc\5\u009eP\2\u03d2\u03dc\5\u00a0Q\2\u03d3\u03dc\5")
        buf.write("\u00a4S\2\u03d4\u03dc\5\u00a8U\2\u03d5\u03dc\5\u00acW")
        buf.write("\2\u03d6\u03dc\5\u00aeX\2\u03d7\u03d8\7 \2\2\u03d8\u03d9")
        buf.write("\5v<\2\u03d9\u03da\7!\2\2\u03da\u03dc\3\2\2\2\u03db\u03ce")
        buf.write("\3\2\2\2\u03db\u03cf\3\2\2\2\u03db\u03d0\3\2\2\2\u03db")
        buf.write("\u03d1\3\2\2\2\u03db\u03d2\3\2\2\2\u03db\u03d3\3\2\2\2")
        buf.write("\u03db\u03d4\3\2\2\2\u03db\u03d5\3\2\2\2\u03db\u03d6\3")
        buf.write("\2\2\2\u03db\u03d7\3\2\2\2\u03dc\u0091\3\2\2\2\u03dd\u03e0")
        buf.write("\5\u00bc_\2\u03de\u03e0\5\u0094K\2\u03df\u03dd\3\2\2\2")
        buf.write("\u03df\u03de\3\2\2\2\u03e0\u0093\3\2\2\2\u03e1\u03e2\5")
        buf.write("\u00c0a\2\u03e2\u03e4\7 \2\2\u03e3\u03e5\5\u00c6d\2\u03e4")
        buf.write("\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6\3\2\2\2")
        buf.write("\u03e6\u03e7\7!\2\2\u03e7\u0095\3\2\2\2\u03e8\u03ee\5")
        buf.write("\u00bc_\2\u03e9\u03ee\5\u0098M\2\u03ea\u03ee\7\u0095\2")
        buf.write("\2\u03eb\u03ee\7\u0096\2\2\u03ec\u03ee\7\u0097\2\2\u03ed")
        buf.write("\u03e8\3\2\2\2\u03ed\u03e9\3\2\2\2\u03ed\u03ea\3\2\2\2")
        buf.write("\u03ed\u03eb\3\2\2\2\u03ed\u03ec\3\2\2\2\u03ee\u0097\3")
        buf.write("\2\2\2\u03ef\u03f0\5\u00bc_\2\u03f0\u03f2\7 \2\2\u03f1")
        buf.write("\u03f3\5\u00c6d\2\u03f2\u03f1\3\2\2\2\u03f2\u03f3\3\2")
        buf.write("\2\2\u03f3\u03f4\3\2\2\2\u03f4\u03f5\7!\2\2\u03f5\u0099")
        buf.write("\3\2\2\2\u03f6\u03f7\5\u00c8e\2\u03f7\u03f8\7\r\2\2\u03f8")
        buf.write("\u03f9\5\u00c8e\2\u03f9\u009b\3\2\2\2\u03fa\u0403\t\34")
        buf.write("\2\2\u03fb\u0403\78\2\2\u03fc\u0403\7\u00a1\2\2\u03fd")
        buf.write("\u0403\7\u00a2\2\2\u03fe\u0403\7\u009d\2\2\u03ff\u0403")
        buf.write("\7\u009e\2\2\u0400\u0403\5\u00c8e\2\u0401\u0403\5\u009a")
        buf.write("N\2\u0402\u03fa\3\2\2\2\u0402\u03fb\3\2\2\2\u0402\u03fc")
        buf.write("\3\2\2\2\u0402\u03fd\3\2\2\2\u0402\u03fe\3\2\2\2\u0402")
        buf.write("\u03ff\3\2\2\2\u0402\u0400\3\2\2\2\u0402\u0401\3\2\2\2")
        buf.write("\u0403\u009d\3\2\2\2\u0404\u0405\7\32\2\2\u0405\u0406")
        buf.write("\t\35\2\2\u0406\u0407\5v<\2\u0407\u0408\7\21\2\2\u0408")
        buf.write("\u0409\5v<\2\u0409\u040a\t\36\2\2\u040a\u009f\3\2\2\2")
        buf.write("\u040b\u040d\7\33\2\2\u040c\u040b\3\2\2\2\u040c\u040d")
        buf.write("\3\2\2\2\u040d\u040e\3\2\2\2\u040e\u0418\7\20\2\2\u040f")
        buf.write("\u0419\7\r\2\2\u0410\u0415\5\u00a2R\2\u0411\u0412\7\21")
        buf.write("\2\2\u0412\u0414\5\u00a2R\2\u0413\u0411\3\2\2\2\u0414")
        buf.write("\u0417\3\2\2\2\u0415\u0413\3\2\2\2\u0415\u0416\3\2\2\2")
        buf.write("\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0418\u040f\3")
        buf.write("\2\2\2\u0418\u0410\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b")
        buf.write("\7\22\2\2\u041b\u00a1\3\2\2\2\u041c\u041d\5\u00bc_\2\u041d")
        buf.write("\u041e\7\r\2\2\u041e\u041f\5v<\2\u041f\u00a3\3\2\2\2\u0420")
        buf.write("\u0421\5*\26\2\u0421\u042b\7\20\2\2\u0422\u042c\7\r\2")
        buf.write("\2\u0423\u0428\5\u00a6T\2\u0424\u0425\7\21\2\2\u0425\u0427")
        buf.write("\5\u00a6T\2\u0426\u0424\3\2\2\2\u0427\u042a\3\2\2\2\u0428")
        buf.write("\u0426\3\2\2\2\u0428\u0429\3\2\2\2\u0429\u042c\3\2\2\2")
        buf.write("\u042a\u0428\3\2\2\2\u042b\u0422\3\2\2\2\u042b\u0423\3")
        buf.write("\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e\7\22\2\2\u042e")
        buf.write("\u00a5\3\2\2\2\u042f\u0430\5\u00bc_\2\u0430\u0431\7\r")
        buf.write("\2\2\u0431\u0432\5v<\2\u0432\u00a7\3\2\2\2\u0433\u0438")
        buf.write("\7\27\2\2\u0434\u0435\7\30\2\2\u0435\u0436\5(\25\2\u0436")
        buf.write("\u0437\7\31\2\2\u0437\u0439\3\2\2\2\u0438\u0434\3\2\2")
        buf.write("\2\u0438\u0439\3\2\2\2\u0439\u043b\3\2\2\2\u043a\u0433")
        buf.write("\3\2\2\2\u043a\u043b\3\2\2\2\u043b\u043c\3\2\2\2\u043c")
        buf.write("\u0445\7\20\2\2\u043d\u0442\5v<\2\u043e\u043f\7\21\2\2")
        buf.write("\u043f\u0441\5v<\2\u0440\u043e\3\2\2\2\u0441\u0444\3\2")
        buf.write("\2\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0446")
        buf.write("\3\2\2\2\u0444\u0442\3\2\2\2\u0445\u043d\3\2\2\2\u0445")
        buf.write("\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u0448\7\22\2")
        buf.write("\2\u0448\u00a9\3\2\2\2\u0449\u044a\7\u0098\2\2\u044a\u044b")
        buf.write("\7\u00a1\2\2\u044b\u00ab\3\2\2\2\u044c\u044d\7\u0099\2")
        buf.write("\2\u044d\u044e\7\u00a1\2\2\u044e\u044f\7\25\2\2\u044f")
        buf.write("\u0451\5\26\f\2\u0450\u0452\5\u00aaV\2\u0451\u0450\3\2")
        buf.write("\2\2\u0451\u0452\3\2\2\2\u0452\u00ad\3\2\2\2\u0453\u0454")
        buf.write("\7\u009a\2\2\u0454\u0455\7\20\2\2\u0455\u045a\5\u00ac")
        buf.write("W\2\u0456\u0457\7\21\2\2\u0457\u0459\5\u00acW\2\u0458")
        buf.write("\u0456\3\2\2\2\u0459\u045c\3\2\2\2\u045a\u0458\3\2\2\2")
        buf.write("\u045a\u045b\3\2\2\2\u045b\u045d\3\2\2\2\u045c\u045a\3")
        buf.write("\2\2\2\u045d\u045f\7\22\2\2\u045e\u0460\5\u00aaV\2\u045f")
        buf.write("\u045e\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u00af\3\2\2\2")
        buf.write("\u0461\u0462\t\37\2\2\u0462\u00b1\3\2\2\2\u0463\u0464")
        buf.write("\t \2\2\u0464\u00b3\3\2\2\2\u0465\u0466\t!\2\2\u0466\u00b5")
        buf.write("\3\2\2\2\u0467\u0468\t\"\2\2\u0468\u00b7\3\2\2\2\u0469")
        buf.write("\u046a\t#\2\2\u046a\u00b9\3\2\2\2\u046b\u046c\t$\2\2\u046c")
        buf.write("\u00bb\3\2\2\2\u046d\u0470\5\u00c2b\2\u046e\u0470\5\u00b4")
        buf.write("[\2\u046f\u046d\3\2\2\2\u046f\u046e\3\2\2\2\u0470\u00bd")
        buf.write("\3\2\2\2\u0471\u0474\5\u00bc_\2\u0472\u0474\5\u00ba^\2")
        buf.write("\u0473\u0471\3\2\2\2\u0473\u0472\3\2\2\2\u0474\u00bf\3")
        buf.write("\2\2\2\u0475\u0478\5\u00c2b\2\u0476\u0478\5\u00b8]\2\u0477")
        buf.write("\u0475\3\2\2\2\u0477\u0476\3\2\2\2\u0478\u00c1\3\2\2\2")
        buf.write("\u0479\u047a\t%\2\2\u047a\u00c3\3\2\2\2\u047b\u047e\7")
        buf.write("\u009b\2\2\u047c\u047f\5\u00c2b\2\u047d\u047f\7\u00a1")
        buf.write("\2\2\u047e\u047c\3\2\2\2\u047e\u047d\3\2\2\2\u047f\u00c5")
        buf.write("\3\2\2\2\u0480\u0485\5v<\2\u0481\u0482\7\21\2\2\u0482")
        buf.write("\u0484\5v<\2\u0483\u0481\3\2\2\2\u0484\u0487\3\2\2\2\u0485")
        buf.write("\u0483\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u00c7\3\2\2\2")
        buf.write("\u0487\u0485\3\2\2\2\u0488\u048a\7\u00a2\2\2\u0489\u048b")
        buf.write("\5\u00caf\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2\u048b")
        buf.write("\u00c9\3\2\2\2\u048c\u0490\5x=\2\u048d\u0490\5|?\2\u048e")
        buf.write("\u0490\7\u00a1\2\2\u048f\u048c\3\2\2\2\u048f\u048d\3\2")
        buf.write("\2\2\u048f\u048e\3\2\2\2\u0490\u00cb\3\2\2\2\u0087\u00cd")
        buf.write("\u00d2\u00d8\u00de\u00e4\u00ea\u00f0\u00f6\u00fc\u0105")
        buf.write("\u010b\u0111\u0115\u011c\u0121\u0125\u0128\u0130\u0133")
        buf.write("\u013b\u013e\u0147\u014f\u0156\u015f\u0162\u016d\u0172")
        buf.write("\u0177\u0188\u018f\u01a7\u01b6\u01be\u01c2\u01cc\u01d2")
        buf.write("\u01dc\u01df\u01e4\u01e9\u01f6\u01ff\u020f\u0216\u0219")
        buf.write("\u0223\u0229\u022e\u0232\u0235\u0238\u023b\u0242\u024b")
        buf.write("\u0257\u0263\u0266\u026c\u0273\u027d\u028f\u0291\u02a5")
        buf.write("\u02b5\u02c4\u02d6\u02de\u02e5\u02e7\u02f0\u02fb\u032c")
        buf.write("\u0331\u033e\u0340\u0342\u0355\u0357\u036a\u036f\u0372")
        buf.write("\u0377\u0379\u037c\u0380\u0384\u0387\u038a\u038e\u0391")
        buf.write("\u0394\u0397\u039b\u039e\u03a1\u03a5\u03a8\u03ab\u03ae")
        buf.write("\u03b4\u03b8\u03bb\u03bf\u03c2\u03c6\u03ca\u03cc\u03db")
        buf.write("\u03df\u03e4\u03ed\u03f2\u0402\u040c\u0415\u0418\u0428")
        buf.write("\u042b\u0438\u043a\u0442\u0445\u0451\u045a\u045f\u046f")
        buf.write("\u0473\u0477\u047e\u0485\u048a\u048f")
        return buf.getvalue()


class cqlParser ( Parser ):

    grammarFileName = "cql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'library'", "'version'", "'using'", "'include'", 
                     "'called'", "'public'", "'private'", "'parameter'", 
                     "'default'", "'codesystem'", "':'", "'valueset'", "'codesystems'", 
                     "'{'", "','", "'}'", "'.'", "'code'", "'from'", "'concept'", 
                     "'List'", "'<'", "'>'", "'Interval'", "'Tuple'", "'Choice'", 
                     "'define'", "'context'", "'function'", "'('", "')'", 
                     "'returns'", "'external'", "'with'", "'such that'", 
                     "'without'", "'['", "'->'", "'in'", "']'", "'let'", 
                     "'where'", "'return'", "'all'", "'distinct'", "'sort'", 
                     "'by'", "'asc'", "'ascending'", "'desc'", "'descending'", 
                     "'is'", "'not'", "'null'", "'true'", "'false'", "'as'", 
                     "'cast'", "'exists'", "'properly'", "'between'", "'and'", 
                     "'duration'", "'difference'", "'<='", "'>='", "'='", 
                     "'!='", "'~'", "'!~'", "'contains'", "'or'", "'xor'", 
                     "'implies'", "'|'", "'union'", "'intersect'", "'except'", 
                     "'year'", "'month'", "'week'", "'day'", "'hour'", "'minute'", 
                     "'second'", "'millisecond'", "'date'", "'time'", "'timezoneoffset'", 
                     "'years'", "'months'", "'weeks'", "'days'", "'hours'", 
                     "'minutes'", "'seconds'", "'milliseconds'", "'convert'", 
                     "'to'", "'+'", "'-'", "'start'", "'end'", "'of'", "'width'", 
                     "'successor'", "'predecessor'", "'singleton'", "'point'", 
                     "'minimum'", "'maximum'", "'^'", "'*'", "'/'", "'div'", 
                     "'mod'", "'&'", "'if'", "'then'", "'else'", "'case'", 
                     "'flatten'", "'expand'", "'collapse'", "'per'", "'when'", 
                     "'or before'", "'or after'", "'or more'", "'or less'", 
                     "'less than'", "'more than'", "'on or'", "'before'", 
                     "'after'", "'or on'", "'starts'", "'ends'", "'occurs'", 
                     "'same'", "'includes'", "'during'", "'included in'", 
                     "'within'", "'meets'", "'overlaps'", "'$this'", "'$index'", 
                     "'$total'", "'display'", "'Code'", "'Concept'", "'%'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "QUOTEDIDENTIFIER", "DATETIME", 
                      "TIME", "IDENTIFIER", "DELIMITEDIDENTIFIER", "STRING", 
                      "NUMBER", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_library = 0
    RULE_libraryDefinition = 1
    RULE_usingDefinition = 2
    RULE_includeDefinition = 3
    RULE_localIdentifier = 4
    RULE_accessModifier = 5
    RULE_parameterDefinition = 6
    RULE_codesystemDefinition = 7
    RULE_valuesetDefinition = 8
    RULE_codesystems = 9
    RULE_codesystemIdentifier = 10
    RULE_libraryIdentifier = 11
    RULE_codeDefinition = 12
    RULE_conceptDefinition = 13
    RULE_codeIdentifier = 14
    RULE_codesystemId = 15
    RULE_valuesetId = 16
    RULE_versionSpecifier = 17
    RULE_codeId = 18
    RULE_typeSpecifier = 19
    RULE_namedTypeSpecifier = 20
    RULE_modelIdentifier = 21
    RULE_listTypeSpecifier = 22
    RULE_intervalTypeSpecifier = 23
    RULE_tupleTypeSpecifier = 24
    RULE_tupleElementDefinition = 25
    RULE_choiceTypeSpecifier = 26
    RULE_statement = 27
    RULE_expressionDefinition = 28
    RULE_contextDefinition = 29
    RULE_functionDefinition = 30
    RULE_operandDefinition = 31
    RULE_functionBody = 32
    RULE_querySource = 33
    RULE_aliasedQuerySource = 34
    RULE_alias = 35
    RULE_queryInclusionClause = 36
    RULE_withClause = 37
    RULE_withoutClause = 38
    RULE_retrieve = 39
    RULE_contextIdentifier = 40
    RULE_codePath = 41
    RULE_terminology = 42
    RULE_qualifier = 43
    RULE_query = 44
    RULE_sourceClause = 45
    RULE_letClause = 46
    RULE_letClauseItem = 47
    RULE_whereClause = 48
    RULE_returnClause = 49
    RULE_sortClause = 50
    RULE_sortDirection = 51
    RULE_sortByItem = 52
    RULE_qualifiedIdentifier = 53
    RULE_qualifiedIdentifierExpression = 54
    RULE_qualifierExpression = 55
    RULE_simplePath = 56
    RULE_simpleLiteral = 57
    RULE_expression = 58
    RULE_dateTimePrecision = 59
    RULE_dateTimeComponent = 60
    RULE_pluralDateTimePrecision = 61
    RULE_expressionTerm = 62
    RULE_caseExpressionItem = 63
    RULE_dateTimePrecisionSpecifier = 64
    RULE_relativeQualifier = 65
    RULE_offsetRelativeQualifier = 66
    RULE_exclusiveRelativeQualifier = 67
    RULE_quantityOffset = 68
    RULE_temporalRelationship = 69
    RULE_intervalOperatorPhrase = 70
    RULE_term = 71
    RULE_qualifiedInvocation = 72
    RULE_qualifiedFunction = 73
    RULE_invocation = 74
    RULE_function = 75
    RULE_ratio = 76
    RULE_literal = 77
    RULE_intervalSelector = 78
    RULE_tupleSelector = 79
    RULE_tupleElementSelector = 80
    RULE_instanceSelector = 81
    RULE_instanceElementSelector = 82
    RULE_listSelector = 83
    RULE_displayClause = 84
    RULE_codeSelector = 85
    RULE_conceptSelector = 86
    RULE_keyword = 87
    RULE_reservedWord = 88
    RULE_keywordIdentifier = 89
    RULE_obsoleteIdentifier = 90
    RULE_functionIdentifier = 91
    RULE_typeNameIdentifier = 92
    RULE_referentialIdentifier = 93
    RULE_referentialOrTypeNameIdentifier = 94
    RULE_identifierOrFunctionIdentifier = 95
    RULE_identifier = 96
    RULE_externalConstant = 97
    RULE_paramList = 98
    RULE_quantity = 99
    RULE_unit = 100

    ruleNames =  [ "library", "libraryDefinition", "usingDefinition", "includeDefinition", 
                   "localIdentifier", "accessModifier", "parameterDefinition", 
                   "codesystemDefinition", "valuesetDefinition", "codesystems", 
                   "codesystemIdentifier", "libraryIdentifier", "codeDefinition", 
                   "conceptDefinition", "codeIdentifier", "codesystemId", 
                   "valuesetId", "versionSpecifier", "codeId", "typeSpecifier", 
                   "namedTypeSpecifier", "modelIdentifier", "listTypeSpecifier", 
                   "intervalTypeSpecifier", "tupleTypeSpecifier", "tupleElementDefinition", 
                   "choiceTypeSpecifier", "statement", "expressionDefinition", 
                   "contextDefinition", "functionDefinition", "operandDefinition", 
                   "functionBody", "querySource", "aliasedQuerySource", 
                   "alias", "queryInclusionClause", "withClause", "withoutClause", 
                   "retrieve", "contextIdentifier", "codePath", "terminology", 
                   "qualifier", "query", "sourceClause", "letClause", "letClauseItem", 
                   "whereClause", "returnClause", "sortClause", "sortDirection", 
                   "sortByItem", "qualifiedIdentifier", "qualifiedIdentifierExpression", 
                   "qualifierExpression", "simplePath", "simpleLiteral", 
                   "expression", "dateTimePrecision", "dateTimeComponent", 
                   "pluralDateTimePrecision", "expressionTerm", "caseExpressionItem", 
                   "dateTimePrecisionSpecifier", "relativeQualifier", "offsetRelativeQualifier", 
                   "exclusiveRelativeQualifier", "quantityOffset", "temporalRelationship", 
                   "intervalOperatorPhrase", "term", "qualifiedInvocation", 
                   "qualifiedFunction", "invocation", "function", "ratio", 
                   "literal", "intervalSelector", "tupleSelector", "tupleElementSelector", 
                   "instanceSelector", "instanceElementSelector", "listSelector", 
                   "displayClause", "codeSelector", "conceptSelector", "keyword", 
                   "reservedWord", "keywordIdentifier", "obsoleteIdentifier", 
                   "functionIdentifier", "typeNameIdentifier", "referentialIdentifier", 
                   "referentialOrTypeNameIdentifier", "identifierOrFunctionIdentifier", 
                   "identifier", "externalConstant", "paramList", "quantity", 
                   "unit" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    T__131=132
    T__132=133
    T__133=134
    T__134=135
    T__135=136
    T__136=137
    T__137=138
    T__138=139
    T__139=140
    T__140=141
    T__141=142
    T__142=143
    T__143=144
    T__144=145
    T__145=146
    T__146=147
    T__147=148
    T__148=149
    T__149=150
    T__150=151
    T__151=152
    T__152=153
    QUOTEDIDENTIFIER=154
    DATETIME=155
    TIME=156
    IDENTIFIER=157
    DELIMITEDIDENTIFIER=158
    STRING=159
    NUMBER=160
    WS=161
    COMMENT=162
    LINE_COMMENT=163

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class LibraryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(cqlParser.EOF, 0)

        def libraryDefinition(self):
            return self.getTypedRuleContext(cqlParser.LibraryDefinitionContext,0)


        def usingDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.UsingDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.UsingDefinitionContext,i)


        def includeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.IncludeDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.IncludeDefinitionContext,i)


        def codesystemDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodesystemDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodesystemDefinitionContext,i)


        def valuesetDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ValuesetDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ValuesetDefinitionContext,i)


        def codeDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodeDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodeDefinitionContext,i)


        def conceptDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ConceptDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ConceptDefinitionContext,i)


        def parameterDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ParameterDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ParameterDefinitionContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.StatementContext)
            else:
                return self.getTypedRuleContext(cqlParser.StatementContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_library

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibrary" ):
                listener.enterLibrary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibrary" ):
                listener.exitLibrary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibrary" ):
                return visitor.visitLibrary(self)
            else:
                return visitor.visitChildren(self)




    def library(self):

        localctx = cqlParser.LibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_library)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__0:
                self.state = 202
                self.libraryDefinition()


            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__2:
                self.state = 205
                self.usingDefinition()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__3:
                self.state = 211
                self.includeDefinition()
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 217
                    self.codesystemDefinition() 
                self.state = 222
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 223
                    self.valuesetDefinition() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 229
                    self.codeDefinition() 
                self.state = 234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 238
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 235
                    self.conceptDefinition() 
                self.state = 240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7))) != 0):
                self.state = 241
                self.parameterDefinition()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__26 or _la==cqlParser.T__27:
                self.state = 247
                self.statement()
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 253
            self.match(cqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_libraryDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryDefinition" ):
                listener.enterLibraryDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryDefinition" ):
                listener.exitLibraryDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryDefinition" ):
                return visitor.visitLibraryDefinition(self)
            else:
                return visitor.visitChildren(self)




    def libraryDefinition(self):

        localctx = cqlParser.LibraryDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_libraryDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(cqlParser.T__0)
            self.state = 256
            self.qualifiedIdentifier()
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 257
                self.match(cqlParser.T__1)
                self.state = 258
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UsingDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modelIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ModelIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_usingDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingDefinition" ):
                listener.enterUsingDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingDefinition" ):
                listener.exitUsingDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingDefinition" ):
                return visitor.visitUsingDefinition(self)
            else:
                return visitor.visitChildren(self)




    def usingDefinition(self):

        localctx = cqlParser.UsingDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_usingDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(cqlParser.T__2)
            self.state = 262
            self.modelIdentifier()
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 263
                self.match(cqlParser.T__1)
                self.state = 264
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IncludeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def localIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LocalIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_includeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludeDefinition" ):
                listener.enterIncludeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludeDefinition" ):
                listener.exitIncludeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludeDefinition" ):
                return visitor.visitIncludeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def includeDefinition(self):

        localctx = cqlParser.IncludeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_includeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(cqlParser.T__3)
            self.state = 268
            self.qualifiedIdentifier()
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 269
                self.match(cqlParser.T__1)
                self.state = 270
                self.versionSpecifier()


            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__4:
                self.state = 273
                self.match(cqlParser.T__4)
                self.state = 274
                self.localIdentifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_localIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalIdentifier" ):
                listener.enterLocalIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalIdentifier" ):
                listener.exitLocalIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalIdentifier" ):
                return visitor.visitLocalIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def localIdentifier(self):

        localctx = cqlParser.LocalIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_localIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_accessModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessModifier" ):
                listener.enterAccessModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessModifier" ):
                listener.exitAccessModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessModifier" ):
                return visitor.visitAccessModifier(self)
            else:
                return visitor.visitChildren(self)




    def accessModifier(self):

        localctx = cqlParser.AccessModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_accessModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__5 or _la==cqlParser.T__6):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_parameterDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDefinition" ):
                listener.enterParameterDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDefinition" ):
                listener.exitParameterDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDefinition" ):
                return visitor.visitParameterDefinition(self)
            else:
                return visitor.visitChildren(self)




    def parameterDefinition(self):

        localctx = cqlParser.ParameterDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_parameterDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 281
                self.accessModifier()


            self.state = 284
            self.match(cqlParser.T__7)
            self.state = 285
            self.identifier()
            self.state = 287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 286
                self.typeSpecifier()


            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__8:
                self.state = 289
                self.match(cqlParser.T__8)
                self.state = 290
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodesystemDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codesystemId(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystemDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemDefinition" ):
                listener.enterCodesystemDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemDefinition" ):
                listener.exitCodesystemDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodesystemDefinition" ):
                return visitor.visitCodesystemDefinition(self)
            else:
                return visitor.visitChildren(self)




    def codesystemDefinition(self):

        localctx = cqlParser.CodesystemDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_codesystemDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 293
                self.accessModifier()


            self.state = 296
            self.match(cqlParser.T__9)
            self.state = 297
            self.identifier()
            self.state = 298
            self.match(cqlParser.T__10)
            self.state = 299
            self.codesystemId()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 300
                self.match(cqlParser.T__1)
                self.state = 301
                self.versionSpecifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValuesetDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def valuesetId(self):
            return self.getTypedRuleContext(cqlParser.ValuesetIdContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def versionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.VersionSpecifierContext,0)


        def codesystems(self):
            return self.getTypedRuleContext(cqlParser.CodesystemsContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_valuesetDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesetDefinition" ):
                listener.enterValuesetDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesetDefinition" ):
                listener.exitValuesetDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesetDefinition" ):
                return visitor.visitValuesetDefinition(self)
            else:
                return visitor.visitChildren(self)




    def valuesetDefinition(self):

        localctx = cqlParser.ValuesetDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_valuesetDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 304
                self.accessModifier()


            self.state = 307
            self.match(cqlParser.T__11)
            self.state = 308
            self.identifier()
            self.state = 309
            self.match(cqlParser.T__10)
            self.state = 310
            self.valuesetId()
            self.state = 313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__1:
                self.state = 311
                self.match(cqlParser.T__1)
                self.state = 312
                self.versionSpecifier()


            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__12:
                self.state = 315
                self.codesystems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodesystemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codesystemIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodesystemIdentifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystems" ):
                listener.enterCodesystems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystems" ):
                listener.exitCodesystems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodesystems" ):
                return visitor.visitCodesystems(self)
            else:
                return visitor.visitChildren(self)




    def codesystems(self):

        localctx = cqlParser.CodesystemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_codesystems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self.match(cqlParser.T__12)
            self.state = 319
            self.match(cqlParser.T__13)
            self.state = 320
            self.codesystemIdentifier()
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 321
                self.match(cqlParser.T__14)
                self.state = 322
                self.codesystemIdentifier()
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 328
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodesystemIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def libraryIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LibraryIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codesystemIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemIdentifier" ):
                listener.enterCodesystemIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemIdentifier" ):
                listener.exitCodesystemIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodesystemIdentifier" ):
                return visitor.visitCodesystemIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def codesystemIdentifier(self):

        localctx = cqlParser.CodesystemIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_codesystemIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 330
                self.libraryIdentifier()
                self.state = 331
                self.match(cqlParser.T__16)


            self.state = 335
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_libraryIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryIdentifier" ):
                listener.enterLibraryIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryIdentifier" ):
                listener.exitLibraryIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryIdentifier" ):
                return visitor.visitLibraryIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def libraryIdentifier(self):

        localctx = cqlParser.LibraryIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_libraryIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codeId(self):
            return self.getTypedRuleContext(cqlParser.CodeIdContext,0)


        def codesystemIdentifier(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeDefinition" ):
                listener.enterCodeDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeDefinition" ):
                listener.exitCodeDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeDefinition" ):
                return visitor.visitCodeDefinition(self)
            else:
                return visitor.visitChildren(self)




    def codeDefinition(self):

        localctx = cqlParser.CodeDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_codeDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 339
                self.accessModifier()


            self.state = 342
            self.match(cqlParser.T__17)
            self.state = 343
            self.identifier()
            self.state = 344
            self.match(cqlParser.T__10)
            self.state = 345
            self.codeId()
            self.state = 346
            self.match(cqlParser.T__18)
            self.state = 347
            self.codesystemIdentifier()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__149:
                self.state = 348
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConceptDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def codeIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodeIdentifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodeIdentifierContext,i)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_conceptDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptDefinition" ):
                listener.enterConceptDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptDefinition" ):
                listener.exitConceptDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConceptDefinition" ):
                return visitor.visitConceptDefinition(self)
            else:
                return visitor.visitChildren(self)




    def conceptDefinition(self):

        localctx = cqlParser.ConceptDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_conceptDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 351
                self.accessModifier()


            self.state = 354
            self.match(cqlParser.T__19)
            self.state = 355
            self.identifier()
            self.state = 356
            self.match(cqlParser.T__10)
            self.state = 357
            self.match(cqlParser.T__13)
            self.state = 358
            self.codeIdentifier()
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 359
                self.match(cqlParser.T__14)
                self.state = 360
                self.codeIdentifier()
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self.match(cqlParser.T__15)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__149:
                self.state = 367
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def libraryIdentifier(self):
            return self.getTypedRuleContext(cqlParser.LibraryIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeIdentifier" ):
                listener.enterCodeIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeIdentifier" ):
                listener.exitCodeIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeIdentifier" ):
                return visitor.visitCodeIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def codeIdentifier(self):

        localctx = cqlParser.CodeIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_codeIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 370
                self.libraryIdentifier()
                self.state = 371
                self.match(cqlParser.T__16)


            self.state = 375
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodesystemIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_codesystemId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodesystemId" ):
                listener.enterCodesystemId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodesystemId" ):
                listener.exitCodesystemId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodesystemId" ):
                return visitor.visitCodesystemId(self)
            else:
                return visitor.visitChildren(self)




    def codesystemId(self):

        localctx = cqlParser.CodesystemIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_codesystemId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValuesetIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_valuesetId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesetId" ):
                listener.enterValuesetId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesetId" ):
                listener.exitValuesetId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesetId" ):
                return visitor.visitValuesetId(self)
            else:
                return visitor.visitChildren(self)




    def valuesetId(self):

        localctx = cqlParser.ValuesetIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_valuesetId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VersionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_versionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersionSpecifier" ):
                listener.enterVersionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersionSpecifier" ):
                listener.exitVersionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVersionSpecifier" ):
                return visitor.visitVersionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def versionSpecifier(self):

        localctx = cqlParser.VersionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_versionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_codeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeId" ):
                listener.enterCodeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeId" ):
                listener.exitCodeId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeId" ):
                return visitor.visitCodeId(self)
            else:
                return visitor.visitChildren(self)




    def codeId(self):

        localctx = cqlParser.CodeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_codeId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def listTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.ListTypeSpecifierContext,0)


        def intervalTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.IntervalTypeSpecifierContext,0)


        def tupleTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TupleTypeSpecifierContext,0)


        def choiceTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.ChoiceTypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = cqlParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_typeSpecifier)
        try:
            self.state = 390
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.T__150, cqlParser.T__151, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 385
                self.namedTypeSpecifier()
                pass
            elif token in [cqlParser.T__20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 386
                self.listTypeSpecifier()
                pass
            elif token in [cqlParser.T__23]:
                self.enterOuterAlt(localctx, 3)
                self.state = 387
                self.intervalTypeSpecifier()
                pass
            elif token in [cqlParser.T__24]:
                self.enterOuterAlt(localctx, 4)
                self.state = 388
                self.tupleTypeSpecifier()
                pass
            elif token in [cqlParser.T__25]:
                self.enterOuterAlt(localctx, 5)
                self.state = 389
                self.choiceTypeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NamedTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialOrTypeNameIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialOrTypeNameIdentifierContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_namedTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedTypeSpecifier" ):
                listener.enterNamedTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedTypeSpecifier" ):
                listener.exitNamedTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedTypeSpecifier" ):
                return visitor.visitNamedTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def namedTypeSpecifier(self):

        localctx = cqlParser.NamedTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_namedTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 392
                    self.qualifier()
                    self.state = 393
                    self.match(cqlParser.T__16) 
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

            self.state = 400
            self.referentialOrTypeNameIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModelIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_modelIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModelIdentifier" ):
                listener.enterModelIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModelIdentifier" ):
                listener.exitModelIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModelIdentifier" ):
                return visitor.visitModelIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def modelIdentifier(self):

        localctx = cqlParser.ModelIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_modelIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_listTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListTypeSpecifier" ):
                listener.enterListTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListTypeSpecifier" ):
                listener.exitListTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListTypeSpecifier" ):
                return visitor.visitListTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def listTypeSpecifier(self):

        localctx = cqlParser.ListTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_listTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 404
            self.match(cqlParser.T__20)
            self.state = 405
            self.match(cqlParser.T__21)
            self.state = 406
            self.typeSpecifier()
            self.state = 407
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_intervalTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeSpecifier" ):
                listener.enterIntervalTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeSpecifier" ):
                listener.exitIntervalTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalTypeSpecifier" ):
                return visitor.visitIntervalTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def intervalTypeSpecifier(self):

        localctx = cqlParser.IntervalTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_intervalTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 409
            self.match(cqlParser.T__23)
            self.state = 410
            self.match(cqlParser.T__21)
            self.state = 411
            self.typeSpecifier()
            self.state = 412
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleElementDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TupleElementDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.TupleElementDefinitionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleTypeSpecifier" ):
                listener.enterTupleTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleTypeSpecifier" ):
                listener.exitTupleTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleTypeSpecifier" ):
                return visitor.visitTupleTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def tupleTypeSpecifier(self):

        localctx = cqlParser.TupleTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_tupleTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(cqlParser.T__24)
            self.state = 415
            self.match(cqlParser.T__13)
            self.state = 416
            self.tupleElementDefinition()
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 417
                self.match(cqlParser.T__14)
                self.state = 418
                self.tupleElementDefinition()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleElementDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleElementDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElementDefinition" ):
                listener.enterTupleElementDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElementDefinition" ):
                listener.exitTupleElementDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleElementDefinition" ):
                return visitor.visitTupleElementDefinition(self)
            else:
                return visitor.visitChildren(self)




    def tupleElementDefinition(self):

        localctx = cqlParser.TupleElementDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_tupleElementDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.referentialIdentifier()
            self.state = 427
            self.typeSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChoiceTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TypeSpecifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_choiceTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChoiceTypeSpecifier" ):
                listener.enterChoiceTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChoiceTypeSpecifier" ):
                listener.exitChoiceTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChoiceTypeSpecifier" ):
                return visitor.visitChoiceTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def choiceTypeSpecifier(self):

        localctx = cqlParser.ChoiceTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_choiceTypeSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(cqlParser.T__25)
            self.state = 430
            self.match(cqlParser.T__21)
            self.state = 431
            self.typeSpecifier()
            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 432
                self.match(cqlParser.T__14)
                self.state = 433
                self.typeSpecifier()
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self.match(cqlParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionDefinition(self):
            return self.getTypedRuleContext(cqlParser.ExpressionDefinitionContext,0)


        def contextDefinition(self):
            return self.getTypedRuleContext(cqlParser.ContextDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(cqlParser.FunctionDefinitionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = cqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_statement)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 441
                self.expressionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.contextDefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 443
                self.functionDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_expressionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionDefinition" ):
                listener.enterExpressionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionDefinition" ):
                listener.exitExpressionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionDefinition" ):
                return visitor.visitExpressionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def expressionDefinition(self):

        localctx = cqlParser.ExpressionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_expressionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(cqlParser.T__26)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 447
                self.accessModifier()


            self.state = 450
            self.identifier()
            self.state = 451
            self.match(cqlParser.T__10)
            self.state = 452
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContextDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def modelIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ModelIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_contextDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextDefinition" ):
                listener.enterContextDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextDefinition" ):
                listener.exitContextDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextDefinition" ):
                return visitor.visitContextDefinition(self)
            else:
                return visitor.visitChildren(self)




    def contextDefinition(self):

        localctx = cqlParser.ContextDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_contextDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(cqlParser.T__27)
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 455
                self.modelIdentifier()
                self.state = 456
                self.match(cqlParser.T__16)


            self.state = 460
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrFunctionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierOrFunctionIdentifierContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(cqlParser.FunctionBodyContext,0)


        def accessModifier(self):
            return self.getTypedRuleContext(cqlParser.AccessModifierContext,0)


        def operandDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.OperandDefinitionContext)
            else:
                return self.getTypedRuleContext(cqlParser.OperandDefinitionContext,i)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = cqlParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(cqlParser.T__26)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__5 or _la==cqlParser.T__6:
                self.state = 463
                self.accessModifier()


            self.state = 466
            self.match(cqlParser.T__28)
            self.state = 467
            self.identifierOrFunctionIdentifier()
            self.state = 468
            self.match(cqlParser.T__29)
            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__41) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (cqlParser.T__70 - 71)) | (1 << (cqlParser.T__72 - 71)) | (1 << (cqlParser.T__73 - 71)) | (1 << (cqlParser.T__75 - 71)) | (1 << (cqlParser.T__76 - 71)) | (1 << (cqlParser.T__77 - 71)) | (1 << (cqlParser.T__86 - 71)) | (1 << (cqlParser.T__87 - 71)) | (1 << (cqlParser.T__88 - 71)) | (1 << (cqlParser.T__101 - 71)) | (1 << (cqlParser.T__102 - 71)) | (1 << (cqlParser.T__104 - 71)) | (1 << (cqlParser.T__105 - 71)) | (1 << (cqlParser.T__106 - 71)) | (1 << (cqlParser.T__114 - 71)) | (1 << (cqlParser.T__115 - 71)) | (1 << (cqlParser.T__126 - 71)) | (1 << (cqlParser.T__127 - 71)) | (1 << (cqlParser.T__128 - 71)) | (1 << (cqlParser.T__129 - 71)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__140 - 137)) | (1 << (cqlParser.T__144 - 137)) | (1 << (cqlParser.T__145 - 137)) | (1 << (cqlParser.T__149 - 137)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 137)) | (1 << (cqlParser.IDENTIFIER - 137)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 137)))) != 0):
                self.state = 469
                self.operandDefinition()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 470
                    self.match(cqlParser.T__14)
                    self.state = 471
                    self.operandDefinition()
                    self.state = 476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 479
            self.match(cqlParser.T__30)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__31:
                self.state = 480
                self.match(cqlParser.T__31)
                self.state = 481
                self.typeSpecifier()


            self.state = 484
            self.match(cqlParser.T__10)
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__13, cqlParser.T__17, cqlParser.T__18, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__29, cqlParser.T__36, cqlParser.T__41, cqlParser.T__44, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__57, cqlParser.T__58, cqlParser.T__62, cqlParser.T__63, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__99, cqlParser.T__100, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__107, cqlParser.T__108, cqlParser.T__109, cqlParser.T__110, cqlParser.T__114, cqlParser.T__115, cqlParser.T__117, cqlParser.T__120, cqlParser.T__121, cqlParser.T__122, cqlParser.T__123, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__146, cqlParser.T__147, cqlParser.T__148, cqlParser.T__149, cqlParser.T__150, cqlParser.T__151, cqlParser.T__152, cqlParser.QUOTEDIDENTIFIER, cqlParser.DATETIME, cqlParser.TIME, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER, cqlParser.STRING, cqlParser.NUMBER]:
                self.state = 485
                self.functionBody()
                pass
            elif token in [cqlParser.T__32]:
                self.state = 486
                self.match(cqlParser.T__32)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OperandDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_operandDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperandDefinition" ):
                listener.enterOperandDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperandDefinition" ):
                listener.exitOperandDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperandDefinition" ):
                return visitor.visitOperandDefinition(self)
            else:
                return visitor.visitChildren(self)




    def operandDefinition(self):

        localctx = cqlParser.OperandDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_operandDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.referentialIdentifier()
            self.state = 490
            self.typeSpecifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = cqlParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def retrieve(self):
            return self.getTypedRuleContext(cqlParser.RetrieveContext,0)


        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_querySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySource" ):
                listener.enterQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySource" ):
                listener.exitQuerySource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySource" ):
                return visitor.visitQuerySource(self)
            else:
                return visitor.visitChildren(self)




    def querySource(self):

        localctx = cqlParser.QuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_querySource)
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__36]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.retrieve()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.qualifiedIdentifierExpression()
                pass
            elif token in [cqlParser.T__29]:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(cqlParser.T__29)
                self.state = 497
                self.expression(0)
                self.state = 498
                self.match(cqlParser.T__30)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasedQuerySourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySource(self):
            return self.getTypedRuleContext(cqlParser.QuerySourceContext,0)


        def alias(self):
            return self.getTypedRuleContext(cqlParser.AliasContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_aliasedQuerySource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasedQuerySource" ):
                listener.enterAliasedQuerySource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasedQuerySource" ):
                listener.exitAliasedQuerySource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuerySource" ):
                return visitor.visitAliasedQuerySource(self)
            else:
                return visitor.visitChildren(self)




    def aliasedQuerySource(self):

        localctx = cqlParser.AliasedQuerySourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_aliasedQuerySource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.querySource()
            self.state = 503
            self.alias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = cqlParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryInclusionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def withClause(self):
            return self.getTypedRuleContext(cqlParser.WithClauseContext,0)


        def withoutClause(self):
            return self.getTypedRuleContext(cqlParser.WithoutClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_queryInclusionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryInclusionClause" ):
                listener.enterQueryInclusionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryInclusionClause" ):
                listener.exitQueryInclusionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryInclusionClause" ):
                return visitor.visitQueryInclusionClause(self)
            else:
                return visitor.visitChildren(self)




    def queryInclusionClause(self):

        localctx = cqlParser.QueryInclusionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_queryInclusionClause)
        try:
            self.state = 509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 507
                self.withClause()
                pass
            elif token in [cqlParser.T__35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.withoutClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self):
            return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithClause" ):
                return visitor.visitWithClause(self)
            else:
                return visitor.visitChildren(self)




    def withClause(self):

        localctx = cqlParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self.match(cqlParser.T__33)
            self.state = 512
            self.aliasedQuerySource()
            self.state = 513
            self.match(cqlParser.T__34)
            self.state = 514
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WithoutClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self):
            return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_withoutClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithoutClause" ):
                listener.enterWithoutClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithoutClause" ):
                listener.exitWithoutClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithoutClause" ):
                return visitor.visitWithoutClause(self)
            else:
                return visitor.visitChildren(self)




    def withoutClause(self):

        localctx = cqlParser.WithoutClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_withoutClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(cqlParser.T__35)
            self.state = 517
            self.aliasedQuerySource()
            self.state = 518
            self.match(cqlParser.T__34)
            self.state = 519
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RetrieveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def contextIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ContextIdentifierContext,0)


        def terminology(self):
            return self.getTypedRuleContext(cqlParser.TerminologyContext,0)


        def codePath(self):
            return self.getTypedRuleContext(cqlParser.CodePathContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_retrieve

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetrieve" ):
                listener.enterRetrieve(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetrieve" ):
                listener.exitRetrieve(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetrieve" ):
                return visitor.visitRetrieve(self)
            else:
                return visitor.visitChildren(self)




    def retrieve(self):

        localctx = cqlParser.RetrieveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_retrieve)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.match(cqlParser.T__36)
            self.state = 525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 522
                self.contextIdentifier()
                self.state = 523
                self.match(cqlParser.T__37)


            self.state = 527
            self.namedTypeSpecifier()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__10:
                self.state = 528
                self.match(cqlParser.T__10)
                self.state = 532
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 529
                    self.codePath()
                    self.state = 530
                    self.match(cqlParser.T__38)


                self.state = 534
                self.terminology()


            self.state = 537
            self.match(cqlParser.T__39)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContextIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_contextIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextIdentifier" ):
                listener.enterContextIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextIdentifier" ):
                listener.exitContextIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContextIdentifier" ):
                return visitor.visitContextIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def contextIdentifier(self):

        localctx = cqlParser.ContextIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_contextIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.qualifiedIdentifierExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodePathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodePath" ):
                listener.enterCodePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodePath" ):
                listener.exitCodePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodePath" ):
                return visitor.visitCodePath(self)
            else:
                return visitor.visitChildren(self)




    def codePath(self):

        localctx = cqlParser.CodePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_codePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.simplePath(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminologyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifierExpression(self):
            return self.getTypedRuleContext(cqlParser.QualifiedIdentifierExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_terminology

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerminology" ):
                listener.enterTerminology(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerminology" ):
                listener.exitTerminology(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerminology" ):
                return visitor.visitTerminology(self)
            else:
                return visitor.visitChildren(self)




    def terminology(self):

        localctx = cqlParser.TerminologyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_terminology)
        try:
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.qualifiedIdentifierExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifier" ):
                listener.enterQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifier" ):
                listener.exitQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifier" ):
                return visitor.visitQualifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifier(self):

        localctx = cqlParser.QualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceClause(self):
            return self.getTypedRuleContext(cqlParser.SourceClauseContext,0)


        def letClause(self):
            return self.getTypedRuleContext(cqlParser.LetClauseContext,0)


        def queryInclusionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QueryInclusionClauseContext)
            else:
                return self.getTypedRuleContext(cqlParser.QueryInclusionClauseContext,i)


        def whereClause(self):
            return self.getTypedRuleContext(cqlParser.WhereClauseContext,0)


        def returnClause(self):
            return self.getTypedRuleContext(cqlParser.ReturnClauseContext,0)


        def sortClause(self):
            return self.getTypedRuleContext(cqlParser.SortClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuery" ):
                listener.enterQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuery" ):
                listener.exitQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = cqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_query)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.sourceClause()
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 550
                self.letClause()


            self.state = 556
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 553
                    self.queryInclusionClause() 
                self.state = 558
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 559
                self.whereClause()


            self.state = 563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 562
                self.returnClause()


            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.state = 565
                self.sortClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasedQuerySource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.AliasedQuerySourceContext)
            else:
                return self.getTypedRuleContext(cqlParser.AliasedQuerySourceContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_sourceClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceClause" ):
                listener.enterSourceClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceClause" ):
                listener.exitSourceClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSourceClause" ):
                return visitor.visitSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def sourceClause(self):

        localctx = cqlParser.SourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_sourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__18:
                self.state = 568
                self.match(cqlParser.T__18)


            self.state = 571
            self.aliasedQuerySource()
            self.state = 576
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 572
                    self.match(cqlParser.T__14)
                    self.state = 573
                    self.aliasedQuerySource() 
                self.state = 578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def letClauseItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.LetClauseItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.LetClauseItemContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_letClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetClause" ):
                listener.enterLetClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetClause" ):
                listener.exitLetClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetClause" ):
                return visitor.visitLetClause(self)
            else:
                return visitor.visitChildren(self)




    def letClause(self):

        localctx = cqlParser.LetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_letClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(cqlParser.T__40)
            self.state = 580
            self.letClauseItem()
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 581
                    self.match(cqlParser.T__14)
                    self.state = 582
                    self.letClauseItem() 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LetClauseItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_letClauseItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLetClauseItem" ):
                listener.enterLetClauseItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLetClauseItem" ):
                listener.exitLetClauseItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetClauseItem" ):
                return visitor.visitLetClauseItem(self)
            else:
                return visitor.visitChildren(self)




    def letClauseItem(self):

        localctx = cqlParser.LetClauseItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_letClauseItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.identifier()
            self.state = 589
            self.match(cqlParser.T__10)
            self.state = 590
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhereClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_whereClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhereClause" ):
                listener.enterWhereClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhereClause" ):
                listener.exitWhereClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = cqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(cqlParser.T__41)
            self.state = 593
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_returnClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnClause" ):
                listener.enterReturnClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnClause" ):
                listener.exitReturnClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnClause" ):
                return visitor.visitReturnClause(self)
            else:
                return visitor.visitChildren(self)




    def returnClause(self):

        localctx = cqlParser.ReturnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_returnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 595
            self.match(cqlParser.T__42)
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 596
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__43 or _la==cqlParser.T__44):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 599
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sortDirection(self):
            return self.getTypedRuleContext(cqlParser.SortDirectionContext,0)


        def sortByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.SortByItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.SortByItemContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_sortClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortClause" ):
                listener.enterSortClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortClause" ):
                listener.exitSortClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortClause" ):
                return visitor.visitSortClause(self)
            else:
                return visitor.visitChildren(self)




    def sortClause(self):

        localctx = cqlParser.SortClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_sortClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(cqlParser.T__45)
            self.state = 612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50]:
                self.state = 602
                self.sortDirection()
                pass
            elif token in [cqlParser.T__46]:
                self.state = 603
                self.match(cqlParser.T__46)
                self.state = 604
                self.sortByItem()
                self.state = 609
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 605
                        self.match(cqlParser.T__14)
                        self.state = 606
                        self.sortByItem() 
                    self.state = 611
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortDirectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_sortDirection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortDirection" ):
                listener.enterSortDirection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortDirection" ):
                listener.exitSortDirection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortDirection" ):
                return visitor.visitSortDirection(self)
            else:
                return visitor.visitChildren(self)




    def sortDirection(self):

        localctx = cqlParser.SortDirectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_sortDirection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def sortDirection(self):
            return self.getTypedRuleContext(cqlParser.SortDirectionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_sortByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSortByItem" ):
                listener.enterSortByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSortByItem" ):
                listener.exitSortByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortByItem" ):
                return visitor.visitSortByItem(self)
            else:
                return visitor.visitChildren(self)




    def sortByItem(self):

        localctx = cqlParser.SortByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_sortByItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.expressionTerm(0)
            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 617
                self.sortDirection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def qualifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdentifier" ):
                return visitor.visitQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdentifier(self):

        localctx = cqlParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_qualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 620
                    self.qualifier()
                    self.state = 621
                    self.match(cqlParser.T__16) 
                self.state = 627
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

            self.state = 628
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedIdentifierExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def qualifierExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QualifierExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.QualifierExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedIdentifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifierExpression" ):
                listener.enterQualifiedIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifierExpression" ):
                listener.exitQualifiedIdentifierExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdentifierExpression" ):
                return visitor.visitQualifiedIdentifierExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdentifierExpression(self):

        localctx = cqlParser.QualifiedIdentifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_qualifiedIdentifierExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 630
                    self.qualifierExpression()
                    self.state = 631
                    self.match(cqlParser.T__16) 
                self.state = 637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 638
            self.referentialIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifierExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifierExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifierExpression" ):
                listener.enterQualifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifierExpression" ):
                listener.exitQualifierExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifierExpression" ):
                return visitor.visitQualifierExpression(self)
            else:
                return visitor.visitChildren(self)




    def qualifierExpression(self):

        localctx = cqlParser.QualifierExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_qualifierExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.referentialIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimplePathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_simplePath

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SimplePathIndexerContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)

        def simpleLiteral(self):
            return self.getTypedRuleContext(cqlParser.SimpleLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathIndexer" ):
                listener.enterSimplePathIndexer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathIndexer" ):
                listener.exitSimplePathIndexer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplePathIndexer" ):
                return visitor.visitSimplePathIndexer(self)
            else:
                return visitor.visitChildren(self)


    class SimplePathQualifiedIdentifierContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simplePath(self):
            return self.getTypedRuleContext(cqlParser.SimplePathContext,0)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathQualifiedIdentifier" ):
                listener.enterSimplePathQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathQualifiedIdentifier" ):
                listener.exitSimplePathQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplePathQualifiedIdentifier" ):
                return visitor.visitSimplePathQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)


    class SimplePathReferentialIdentifierContext(SimplePathContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.SimplePathContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplePathReferentialIdentifier" ):
                listener.enterSimplePathReferentialIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplePathReferentialIdentifier" ):
                listener.exitSimplePathReferentialIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplePathReferentialIdentifier" ):
                return visitor.visitSimplePathReferentialIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def simplePath(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.SimplePathContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 112
        self.enterRecursionRule(localctx, 112, self.RULE_simplePath, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = cqlParser.SimplePathReferentialIdentifierContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 643
            self.referentialIdentifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 653
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.SimplePathQualifiedIdentifierContext(self, cqlParser.SimplePathContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simplePath)
                        self.state = 645
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 646
                        self.match(cqlParser.T__16)
                        self.state = 647
                        self.referentialIdentifier()
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.SimplePathIndexerContext(self, cqlParser.SimplePathContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_simplePath)
                        self.state = 648
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 649
                        self.match(cqlParser.T__36)
                        self.state = 650
                        self.simpleLiteral()
                        self.state = 651
                        self.match(cqlParser.T__39)
                        pass

             
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class SimpleLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_simpleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleLiteral" ):
                listener.enterSimpleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleLiteral" ):
                listener.exitSimpleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleLiteral" ):
                return visitor.visitSimpleLiteral(self)
            else:
                return visitor.visitChildren(self)




    def simpleLiteral(self):

        localctx = cqlParser.SimpleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_simpleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            _la = self._input.LA(1)
            if not(_la==cqlParser.STRING or _la==cqlParser.NUMBER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class DurationBetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationBetweenExpression" ):
                listener.enterDurationBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationBetweenExpression" ):
                listener.exitDurationBetweenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationBetweenExpression" ):
                return visitor.visitDurationBetweenExpression(self)
            else:
                return visitor.visitChildren(self)


    class InFixSetExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInFixSetExpression" ):
                listener.enterInFixSetExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInFixSetExpression" ):
                listener.exitInFixSetExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInFixSetExpression" ):
                return visitor.visitInFixSetExpression(self)
            else:
                return visitor.visitChildren(self)


    class RetrieveExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def retrieve(self):
            return self.getTypedRuleContext(cqlParser.RetrieveContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRetrieveExpression" ):
                listener.enterRetrieveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRetrieveExpression" ):
                listener.exitRetrieveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRetrieveExpression" ):
                return visitor.visitRetrieveExpression(self)
            else:
                return visitor.visitChildren(self)


    class TimingExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def intervalOperatorPhrase(self):
            return self.getTypedRuleContext(cqlParser.IntervalOperatorPhraseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimingExpression" ):
                listener.enterTimingExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimingExpression" ):
                listener.exitTimingExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimingExpression" ):
                return visitor.visitTimingExpression(self)
            else:
                return visitor.visitChildren(self)


    class QueryExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(cqlParser.QueryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class BooleanExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanExpression" ):
                listener.enterBooleanExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanExpression" ):
                listener.exitBooleanExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanExpression" ):
                return visitor.visitBooleanExpression(self)
            else:
                return visitor.visitChildren(self)


    class OrExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrExpression" ):
                listener.enterOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrExpression" ):
                listener.exitOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrExpression" ):
                return visitor.visitOrExpression(self)
            else:
                return visitor.visitChildren(self)


    class CastExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)


    class AndExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)


    class BetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenExpression" ):
                listener.enterBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenExpression" ):
                listener.exitBetweenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenExpression" ):
                return visitor.visitBetweenExpression(self)
            else:
                return visitor.visitChildren(self)


    class MembershipExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMembershipExpression" ):
                listener.enterMembershipExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMembershipExpression" ):
                listener.exitMembershipExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMembershipExpression" ):
                return visitor.visitMembershipExpression(self)
            else:
                return visitor.visitChildren(self)


    class DifferenceBetweenExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifferenceBetweenExpression" ):
                listener.enterDifferenceBetweenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifferenceBetweenExpression" ):
                listener.exitDifferenceBetweenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDifferenceBetweenExpression" ):
                return visitor.visitDifferenceBetweenExpression(self)
            else:
                return visitor.visitChildren(self)


    class InequalityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInequalityExpression" ):
                listener.enterInequalityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInequalityExpression" ):
                listener.exitInequalityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInequalityExpression" ):
                return visitor.visitInequalityExpression(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExistenceExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistenceExpression" ):
                listener.enterExistenceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistenceExpression" ):
                listener.exitExistenceExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistenceExpression" ):
                return visitor.visitExistenceExpression(self)
            else:
                return visitor.visitChildren(self)


    class ImpliesExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImpliesExpression" ):
                listener.enterImpliesExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImpliesExpression" ):
                listener.exitImpliesExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImpliesExpression" ):
                return visitor.visitImpliesExpression(self)
            else:
                return visitor.visitChildren(self)


    class TermExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpression" ):
                listener.enterTermExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpression" ):
                listener.exitTermExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermExpression" ):
                return visitor.visitTermExpression(self)
            else:
                return visitor.visitChildren(self)


    class TypeExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExpression" ):
                listener.enterTypeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExpression" ):
                listener.exitTypeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExpression" ):
                return visitor.visitTypeExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                localctx = cqlParser.TermExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 661
                self.expressionTerm(0)
                pass

            elif la_ == 2:
                localctx = cqlParser.RetrieveExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 662
                self.retrieve()
                pass

            elif la_ == 3:
                localctx = cqlParser.QueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 663
                self.query()
                pass

            elif la_ == 4:
                localctx = cqlParser.CastExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 664
                self.match(cqlParser.T__57)
                self.state = 665
                self.expression(0)
                self.state = 666
                self.match(cqlParser.T__56)
                self.state = 667
                self.typeSpecifier()
                pass

            elif la_ == 5:
                localctx = cqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 669
                self.match(cqlParser.T__52)
                self.state = 670
                self.expression(13)
                pass

            elif la_ == 6:
                localctx = cqlParser.ExistenceExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 671
                self.match(cqlParser.T__58)
                self.state = 672
                self.expression(12)
                pass

            elif la_ == 7:
                localctx = cqlParser.DurationBetweenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__62:
                    self.state = 673
                    self.match(cqlParser.T__62)
                    self.state = 674
                    self.match(cqlParser.T__38)


                self.state = 677
                self.pluralDateTimePrecision()
                self.state = 678
                self.match(cqlParser.T__60)
                self.state = 679
                self.expressionTerm(0)
                self.state = 680
                self.match(cqlParser.T__61)
                self.state = 681
                self.expressionTerm(0)
                pass

            elif la_ == 8:
                localctx = cqlParser.DifferenceBetweenExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 683
                self.match(cqlParser.T__63)
                self.state = 684
                self.match(cqlParser.T__38)
                self.state = 685
                self.pluralDateTimePrecision()
                self.state = 686
                self.match(cqlParser.T__60)
                self.state = 687
                self.expressionTerm(0)
                self.state = 688
                self.match(cqlParser.T__61)
                self.state = 689
                self.expressionTerm(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 741
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 739
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.InequalityExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 693
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 694
                        _la = self._input.LA(1)
                        if not(((((_la - 22)) & ~0x3f) == 0 and ((1 << (_la - 22)) & ((1 << (cqlParser.T__21 - 22)) | (1 << (cqlParser.T__22 - 22)) | (1 << (cqlParser.T__64 - 22)) | (1 << (cqlParser.T__65 - 22)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 695
                        self.expression(9)
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.TimingExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 696
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 697
                        self.intervalOperatorPhrase()
                        self.state = 698
                        self.expression(8)
                        pass

                    elif la_ == 3:
                        localctx = cqlParser.EqualityExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 700
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 701
                        _la = self._input.LA(1)
                        if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (cqlParser.T__66 - 67)) | (1 << (cqlParser.T__67 - 67)) | (1 << (cqlParser.T__68 - 67)) | (1 << (cqlParser.T__69 - 67)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 702
                        self.expression(7)
                        pass

                    elif la_ == 4:
                        localctx = cqlParser.MembershipExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 703
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 704
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__38 or _la==cqlParser.T__70):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 706
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                        if la_ == 1:
                            self.state = 705
                            self.dateTimePrecisionSpecifier()


                        self.state = 708
                        self.expression(6)
                        pass

                    elif la_ == 5:
                        localctx = cqlParser.AndExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 709
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 710
                        self.match(cqlParser.T__61)
                        self.state = 711
                        self.expression(5)
                        pass

                    elif la_ == 6:
                        localctx = cqlParser.OrExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 712
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 713
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__71 or _la==cqlParser.T__72):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 714
                        self.expression(4)
                        pass

                    elif la_ == 7:
                        localctx = cqlParser.ImpliesExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 715
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 716
                        self.match(cqlParser.T__73)
                        self.state = 717
                        self.expression(3)
                        pass

                    elif la_ == 8:
                        localctx = cqlParser.InFixSetExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 718
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 719
                        _la = self._input.LA(1)
                        if not(((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (cqlParser.T__74 - 75)) | (1 << (cqlParser.T__75 - 75)) | (1 << (cqlParser.T__76 - 75)) | (1 << (cqlParser.T__77 - 75)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 720
                        self.expression(2)
                        pass

                    elif la_ == 9:
                        localctx = cqlParser.BooleanExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 721
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 722
                        self.match(cqlParser.T__51)
                        self.state = 724
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cqlParser.T__52:
                            self.state = 723
                            self.match(cqlParser.T__52)


                        self.state = 726
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 10:
                        localctx = cqlParser.TypeExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 727
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 728
                        _la = self._input.LA(1)
                        if not(_la==cqlParser.T__51 or _la==cqlParser.T__56):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 729
                        self.typeSpecifier()
                        pass

                    elif la_ == 11:
                        localctx = cqlParser.BetweenExpressionContext(self, cqlParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 730
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 732
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==cqlParser.T__59:
                            self.state = 731
                            self.match(cqlParser.T__59)


                        self.state = 734
                        self.match(cqlParser.T__60)
                        self.state = 735
                        self.expressionTerm(0)
                        self.state = 736
                        self.match(cqlParser.T__61)
                        self.state = 737
                        self.expressionTerm(0)
                        pass

             
                self.state = 743
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DateTimePrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimePrecision" ):
                listener.enterDateTimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimePrecision" ):
                listener.exitDateTimePrecision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimePrecision" ):
                return visitor.visitDateTimePrecision(self)
            else:
                return visitor.visitChildren(self)




    def dateTimePrecision(self):

        localctx = cqlParser.DateTimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_dateTimePrecision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            _la = self._input.LA(1)
            if not(((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (cqlParser.T__78 - 79)) | (1 << (cqlParser.T__79 - 79)) | (1 << (cqlParser.T__80 - 79)) | (1 << (cqlParser.T__81 - 79)) | (1 << (cqlParser.T__82 - 79)) | (1 << (cqlParser.T__83 - 79)) | (1 << (cqlParser.T__84 - 79)) | (1 << (cqlParser.T__85 - 79)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateTimeComponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimeComponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeComponent" ):
                listener.enterDateTimeComponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeComponent" ):
                listener.exitDateTimeComponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeComponent" ):
                return visitor.visitDateTimeComponent(self)
            else:
                return visitor.visitChildren(self)




    def dateTimeComponent(self):

        localctx = cqlParser.DateTimeComponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_dateTimeComponent)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 746
                self.dateTimePrecision()
                pass
            elif token in [cqlParser.T__86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self.match(cqlParser.T__86)
                pass
            elif token in [cqlParser.T__87]:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.match(cqlParser.T__87)
                pass
            elif token in [cqlParser.T__88]:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.match(cqlParser.T__88)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PluralDateTimePrecisionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_pluralDateTimePrecision

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluralDateTimePrecision" ):
                listener.enterPluralDateTimePrecision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluralDateTimePrecision" ):
                listener.exitPluralDateTimePrecision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPluralDateTimePrecision" ):
                return visitor.visitPluralDateTimePrecision(self)
            else:
                return visitor.visitChildren(self)




    def pluralDateTimePrecision(self):

        localctx = cqlParser.PluralDateTimePrecisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_pluralDateTimePrecision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            _la = self._input.LA(1)
            if not(((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (cqlParser.T__89 - 90)) | (1 << (cqlParser.T__90 - 90)) | (1 << (cqlParser.T__91 - 90)) | (1 << (cqlParser.T__92 - 90)) | (1 << (cqlParser.T__93 - 90)) | (1 << (cqlParser.T__94 - 90)) | (1 << (cqlParser.T__95 - 90)) | (1 << (cqlParser.T__96 - 90)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionTermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_expressionTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class AdditionExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditionExpressionTerm" ):
                listener.enterAdditionExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditionExpressionTerm" ):
                listener.exitAdditionExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditionExpressionTerm" ):
                return visitor.visitAdditionExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class IndexedExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedExpressionTerm" ):
                listener.enterIndexedExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedExpressionTerm" ):
                listener.exitIndexedExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedExpressionTerm" ):
                return visitor.visitIndexedExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class WidthExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWidthExpressionTerm" ):
                listener.enterWidthExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWidthExpressionTerm" ):
                listener.exitWidthExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWidthExpressionTerm" ):
                return visitor.visitWidthExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class SetAggregateExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAggregateExpressionTerm" ):
                listener.enterSetAggregateExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAggregateExpressionTerm" ):
                listener.exitSetAggregateExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAggregateExpressionTerm" ):
                return visitor.visitSetAggregateExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class TimeUnitExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimeComponent(self):
            return self.getTypedRuleContext(cqlParser.DateTimeComponentContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeUnitExpressionTerm" ):
                listener.enterTimeUnitExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeUnitExpressionTerm" ):
                listener.exitTimeUnitExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeUnitExpressionTerm" ):
                return visitor.visitTimeUnitExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class IfThenElseExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfThenElseExpressionTerm" ):
                listener.enterIfThenElseExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfThenElseExpressionTerm" ):
                listener.exitIfThenElseExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfThenElseExpressionTerm" ):
                return visitor.visitIfThenElseExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class TimeBoundaryExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeBoundaryExpressionTerm" ):
                listener.enterTimeBoundaryExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeBoundaryExpressionTerm" ):
                listener.exitTimeBoundaryExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeBoundaryExpressionTerm" ):
                return visitor.visitTimeBoundaryExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class ElementExtractorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementExtractorExpressionTerm" ):
                listener.enterElementExtractorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementExtractorExpressionTerm" ):
                listener.exitElementExtractorExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElementExtractorExpressionTerm" ):
                return visitor.visitElementExtractorExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class ConversionExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)

        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)

        def unit(self):
            return self.getTypedRuleContext(cqlParser.UnitContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionExpressionTerm" ):
                listener.enterConversionExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionExpressionTerm" ):
                listener.exitConversionExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionExpressionTerm" ):
                return visitor.visitConversionExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class TypeExtentExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeExtentExpressionTerm" ):
                listener.enterTypeExtentExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeExtentExpressionTerm" ):
                listener.exitTypeExtentExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeExtentExpressionTerm" ):
                return visitor.visitTypeExtentExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class PredecessorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredecessorExpressionTerm" ):
                listener.enterPredecessorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredecessorExpressionTerm" ):
                listener.exitPredecessorExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredecessorExpressionTerm" ):
                return visitor.visitPredecessorExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class PointExtractorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointExtractorExpressionTerm" ):
                listener.enterPointExtractorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointExtractorExpressionTerm" ):
                listener.exitPointExtractorExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointExtractorExpressionTerm" ):
                return visitor.visitPointExtractorExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class MultiplicationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicationExpressionTerm" ):
                listener.enterMultiplicationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicationExpressionTerm" ):
                listener.exitMultiplicationExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicationExpressionTerm" ):
                return visitor.visitMultiplicationExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class AggregateExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateExpressionTerm" ):
                listener.enterAggregateExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateExpressionTerm" ):
                listener.exitAggregateExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateExpressionTerm" ):
                return visitor.visitAggregateExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class DurationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDurationExpressionTerm" ):
                listener.enterDurationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDurationExpressionTerm" ):
                listener.exitDurationExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDurationExpressionTerm" ):
                return visitor.visitDurationExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class DifferenceExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDifferenceExpressionTerm" ):
                listener.enterDifferenceExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDifferenceExpressionTerm" ):
                listener.exitDifferenceExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDifferenceExpressionTerm" ):
                return visitor.visitDifferenceExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class CaseExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)

        def caseExpressionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CaseExpressionItemContext)
            else:
                return self.getTypedRuleContext(cqlParser.CaseExpressionItemContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionTerm" ):
                listener.enterCaseExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionTerm" ):
                listener.exitCaseExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpressionTerm" ):
                return visitor.visitCaseExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class PowerExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionTermContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionTermContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpressionTerm" ):
                listener.enterPowerExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpressionTerm" ):
                listener.exitPowerExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPowerExpressionTerm" ):
                return visitor.visitPowerExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class SuccessorExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuccessorExpressionTerm" ):
                listener.enterSuccessorExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuccessorExpressionTerm" ):
                listener.exitSuccessorExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuccessorExpressionTerm" ):
                return visitor.visitSuccessorExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class PolarityExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolarityExpressionTerm" ):
                listener.enterPolarityExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolarityExpressionTerm" ):
                listener.exitPolarityExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPolarityExpressionTerm" ):
                return visitor.visitPolarityExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class TermExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def term(self):
            return self.getTypedRuleContext(cqlParser.TermContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTermExpressionTerm" ):
                listener.enterTermExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTermExpressionTerm" ):
                listener.exitTermExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTermExpressionTerm" ):
                return visitor.visitTermExpressionTerm(self)
            else:
                return visitor.visitChildren(self)


    class InvocationExpressionTermContext(ExpressionTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.ExpressionTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionTerm(self):
            return self.getTypedRuleContext(cqlParser.ExpressionTermContext,0)

        def qualifiedInvocation(self):
            return self.getTypedRuleContext(cqlParser.QualifiedInvocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationExpressionTerm" ):
                listener.enterInvocationExpressionTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationExpressionTerm" ):
                listener.exitInvocationExpressionTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvocationExpressionTerm" ):
                return visitor.visitInvocationExpressionTerm(self)
            else:
                return visitor.visitChildren(self)



    def expressionTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = cqlParser.ExpressionTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_expressionTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = cqlParser.TermExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 755
                self.term()
                pass

            elif la_ == 2:
                localctx = cqlParser.ConversionExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 756
                self.match(cqlParser.T__97)
                self.state = 757
                self.expression(0)
                self.state = 758
                self.match(cqlParser.T__98)
                self.state = 761
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__25, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.T__150, cqlParser.T__151, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                    self.state = 759
                    self.typeSpecifier()
                    pass
                elif token in [cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.STRING]:
                    self.state = 760
                    self.unit()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = cqlParser.PolarityExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 763
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__99 or _la==cqlParser.T__100):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 764
                self.expressionTerm(18)
                pass

            elif la_ == 4:
                localctx = cqlParser.TimeBoundaryExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 765
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__101 or _la==cqlParser.T__102):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 766
                self.match(cqlParser.T__103)
                self.state = 767
                self.expressionTerm(17)
                pass

            elif la_ == 5:
                localctx = cqlParser.TimeUnitExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 768
                self.dateTimeComponent()
                self.state = 769
                self.match(cqlParser.T__18)
                self.state = 770
                self.expressionTerm(16)
                pass

            elif la_ == 6:
                localctx = cqlParser.DurationExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 772
                self.match(cqlParser.T__62)
                self.state = 773
                self.match(cqlParser.T__38)
                self.state = 774
                self.pluralDateTimePrecision()
                self.state = 775
                self.match(cqlParser.T__103)
                self.state = 776
                self.expressionTerm(15)
                pass

            elif la_ == 7:
                localctx = cqlParser.DifferenceExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 778
                self.match(cqlParser.T__63)
                self.state = 779
                self.match(cqlParser.T__38)
                self.state = 780
                self.pluralDateTimePrecision()
                self.state = 781
                self.match(cqlParser.T__103)
                self.state = 782
                self.expressionTerm(14)
                pass

            elif la_ == 8:
                localctx = cqlParser.WidthExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 784
                self.match(cqlParser.T__104)
                self.state = 785
                self.match(cqlParser.T__103)
                self.state = 786
                self.expressionTerm(13)
                pass

            elif la_ == 9:
                localctx = cqlParser.SuccessorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 787
                self.match(cqlParser.T__105)
                self.state = 788
                self.match(cqlParser.T__103)
                self.state = 789
                self.expressionTerm(12)
                pass

            elif la_ == 10:
                localctx = cqlParser.PredecessorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 790
                self.match(cqlParser.T__106)
                self.state = 791
                self.match(cqlParser.T__103)
                self.state = 792
                self.expressionTerm(11)
                pass

            elif la_ == 11:
                localctx = cqlParser.ElementExtractorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 793
                self.match(cqlParser.T__107)
                self.state = 794
                self.match(cqlParser.T__18)
                self.state = 795
                self.expressionTerm(10)
                pass

            elif la_ == 12:
                localctx = cqlParser.PointExtractorExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                self.match(cqlParser.T__108)
                self.state = 797
                self.match(cqlParser.T__18)
                self.state = 798
                self.expressionTerm(9)
                pass

            elif la_ == 13:
                localctx = cqlParser.TypeExtentExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 799
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__109 or _la==cqlParser.T__110):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 800
                self.namedTypeSpecifier()
                pass

            elif la_ == 14:
                localctx = cqlParser.IfThenElseExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 801
                self.match(cqlParser.T__117)
                self.state = 802
                self.expression(0)
                self.state = 803
                self.match(cqlParser.T__118)
                self.state = 804
                self.expression(0)
                self.state = 805
                self.match(cqlParser.T__119)
                self.state = 806
                self.expression(0)
                pass

            elif la_ == 15:
                localctx = cqlParser.CaseExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 808
                self.match(cqlParser.T__120)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__36) | (1 << cqlParser.T__41) | (1 << cqlParser.T__44) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 128)) | (1 << (cqlParser.DATETIME - 128)) | (1 << (cqlParser.TIME - 128)) | (1 << (cqlParser.IDENTIFIER - 128)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 128)) | (1 << (cqlParser.STRING - 128)) | (1 << (cqlParser.NUMBER - 128)))) != 0):
                    self.state = 809
                    self.expression(0)


                self.state = 813 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 812
                    self.caseExpressionItem()
                    self.state = 815 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==cqlParser.T__125):
                        break

                self.state = 817
                self.match(cqlParser.T__119)
                self.state = 818
                self.expression(0)
                self.state = 819
                self.match(cqlParser.T__102)
                pass

            elif la_ == 16:
                localctx = cqlParser.AggregateExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 821
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__44 or _la==cqlParser.T__121):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 822
                self.expression(0)
                pass

            elif la_ == 17:
                localctx = cqlParser.SetAggregateExpressionTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 823
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__122 or _la==cqlParser.T__123):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 824
                self.expression(0)
                self.state = 830
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.match(cqlParser.T__124)
                    self.state = 828
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 826
                        self.dateTimePrecision()
                        pass

                    elif la_ == 2:
                        self.state = 827
                        self.expression(0)
                        pass




                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 853
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,78,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 851
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                    if la_ == 1:
                        localctx = cqlParser.PowerExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 834
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 835
                        self.match(cqlParser.T__111)
                        self.state = 836
                        self.expressionTerm(8)
                        pass

                    elif la_ == 2:
                        localctx = cqlParser.MultiplicationExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 837
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 838
                        _la = self._input.LA(1)
                        if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (cqlParser.T__112 - 113)) | (1 << (cqlParser.T__113 - 113)) | (1 << (cqlParser.T__114 - 113)) | (1 << (cqlParser.T__115 - 113)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 839
                        self.expressionTerm(7)
                        pass

                    elif la_ == 3:
                        localctx = cqlParser.AdditionExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 840
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 841
                        _la = self._input.LA(1)
                        if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (cqlParser.T__99 - 100)) | (1 << (cqlParser.T__100 - 100)) | (1 << (cqlParser.T__116 - 100)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 842
                        self.expressionTerm(6)
                        pass

                    elif la_ == 4:
                        localctx = cqlParser.InvocationExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 843
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 844
                        self.match(cqlParser.T__16)
                        self.state = 845
                        self.qualifiedInvocation()
                        pass

                    elif la_ == 5:
                        localctx = cqlParser.IndexedExpressionTermContext(self, cqlParser.ExpressionTermContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionTerm)
                        self.state = 846
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 847
                        self.match(cqlParser.T__36)
                        self.state = 848
                        self.expression(0)
                        self.state = 849
                        self.match(cqlParser.T__39)
                        pass

             
                self.state = 855
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class CaseExpressionItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_caseExpressionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionItem" ):
                listener.enterCaseExpressionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionItem" ):
                listener.exitCaseExpressionItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpressionItem" ):
                return visitor.visitCaseExpressionItem(self)
            else:
                return visitor.visitChildren(self)




    def caseExpressionItem(self):

        localctx = cqlParser.CaseExpressionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_caseExpressionItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(cqlParser.T__125)
            self.state = 857
            self.expression(0)
            self.state = 858
            self.match(cqlParser.T__118)
            self.state = 859
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateTimePrecisionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_dateTimePrecisionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimePrecisionSpecifier" ):
                listener.enterDateTimePrecisionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimePrecisionSpecifier" ):
                listener.exitDateTimePrecisionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimePrecisionSpecifier" ):
                return visitor.visitDateTimePrecisionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def dateTimePrecisionSpecifier(self):

        localctx = cqlParser.DateTimePrecisionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dateTimePrecisionSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.dateTimePrecision()
            self.state = 862
            self.match(cqlParser.T__103)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelativeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_relativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelativeQualifier" ):
                listener.enterRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelativeQualifier" ):
                listener.exitRelativeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelativeQualifier" ):
                return visitor.visitRelativeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def relativeQualifier(self):

        localctx = cqlParser.RelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_relativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__126 or _la==cqlParser.T__127):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OffsetRelativeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_offsetRelativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffsetRelativeQualifier" ):
                listener.enterOffsetRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffsetRelativeQualifier" ):
                listener.exitOffsetRelativeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffsetRelativeQualifier" ):
                return visitor.visitOffsetRelativeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def offsetRelativeQualifier(self):

        localctx = cqlParser.OffsetRelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_offsetRelativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__128 or _la==cqlParser.T__129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExclusiveRelativeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_exclusiveRelativeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveRelativeQualifier" ):
                listener.enterExclusiveRelativeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveRelativeQualifier" ):
                listener.exitExclusiveRelativeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveRelativeQualifier" ):
                return visitor.visitExclusiveRelativeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def exclusiveRelativeQualifier(self):

        localctx = cqlParser.ExclusiveRelativeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_exclusiveRelativeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__130 or _la==cqlParser.T__131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantityOffsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def offsetRelativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.OffsetRelativeQualifierContext,0)


        def exclusiveRelativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.ExclusiveRelativeQualifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_quantityOffset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantityOffset" ):
                listener.enterQuantityOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantityOffset" ):
                listener.exitQuantityOffset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantityOffset" ):
                return visitor.visitQuantityOffset(self)
            else:
                return visitor.visitChildren(self)




    def quantityOffset(self):

        localctx = cqlParser.QuantityOffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_quantityOffset)
        self._la = 0 # Token type
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.NUMBER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 870
                self.quantity()
                self.state = 872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__128 or _la==cqlParser.T__129:
                    self.state = 871
                    self.offsetRelativeQualifier()


                pass
            elif token in [cqlParser.T__130, cqlParser.T__131]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.exclusiveRelativeQualifier()
                self.state = 875
                self.quantity()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TemporalRelationshipContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_temporalRelationship

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemporalRelationship" ):
                listener.enterTemporalRelationship(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemporalRelationship" ):
                listener.exitTemporalRelationship(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemporalRelationship" ):
                return visitor.visitTemporalRelationship(self)
            else:
                return visitor.visitChildren(self)




    def temporalRelationship(self):

        localctx = cqlParser.TemporalRelationshipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_temporalRelationship)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__132:
                    self.state = 879
                    self.match(cqlParser.T__132)


                self.state = 882
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__133 or _la==cqlParser.T__134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__133 or _la==cqlParser.T__134):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__135:
                    self.state = 884
                    self.match(cqlParser.T__135)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalOperatorPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_intervalOperatorPhrase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WithinIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithinIntervalOperatorPhrase" ):
                listener.enterWithinIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithinIntervalOperatorPhrase" ):
                listener.exitWithinIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWithinIntervalOperatorPhrase" ):
                return visitor.visitWithinIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class IncludedInIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludedInIntervalOperatorPhrase" ):
                listener.enterIncludedInIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludedInIntervalOperatorPhrase" ):
                listener.exitIncludedInIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludedInIntervalOperatorPhrase" ):
                return visitor.visitIncludedInIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class EndsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEndsIntervalOperatorPhrase" ):
                listener.enterEndsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEndsIntervalOperatorPhrase" ):
                listener.exitEndsIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndsIntervalOperatorPhrase" ):
                return visitor.visitEndsIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class ConcurrentWithIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relativeQualifier(self):
            return self.getTypedRuleContext(cqlParser.RelativeQualifierContext,0)

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcurrentWithIntervalOperatorPhrase" ):
                listener.enterConcurrentWithIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcurrentWithIntervalOperatorPhrase" ):
                listener.exitConcurrentWithIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcurrentWithIntervalOperatorPhrase" ):
                return visitor.visitConcurrentWithIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class OverlapsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverlapsIntervalOperatorPhrase" ):
                listener.enterOverlapsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverlapsIntervalOperatorPhrase" ):
                listener.exitOverlapsIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlapsIntervalOperatorPhrase" ):
                return visitor.visitOverlapsIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class IncludesIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIncludesIntervalOperatorPhrase" ):
                listener.enterIncludesIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIncludesIntervalOperatorPhrase" ):
                listener.exitIncludesIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIncludesIntervalOperatorPhrase" ):
                return visitor.visitIncludesIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class BeforeOrAfterIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def temporalRelationship(self):
            return self.getTypedRuleContext(cqlParser.TemporalRelationshipContext,0)

        def quantityOffset(self):
            return self.getTypedRuleContext(cqlParser.QuantityOffsetContext,0)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeforeOrAfterIntervalOperatorPhrase" ):
                listener.enterBeforeOrAfterIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeforeOrAfterIntervalOperatorPhrase" ):
                listener.exitBeforeOrAfterIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeforeOrAfterIntervalOperatorPhrase" ):
                return visitor.visitBeforeOrAfterIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class MeetsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeetsIntervalOperatorPhrase" ):
                listener.enterMeetsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeetsIntervalOperatorPhrase" ):
                listener.exitMeetsIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeetsIntervalOperatorPhrase" ):
                return visitor.visitMeetsIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)


    class StartsIntervalOperatorPhraseContext(IntervalOperatorPhraseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.IntervalOperatorPhraseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dateTimePrecisionSpecifier(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionSpecifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartsIntervalOperatorPhrase" ):
                listener.enterStartsIntervalOperatorPhrase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartsIntervalOperatorPhrase" ):
                listener.exitStartsIntervalOperatorPhrase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartsIntervalOperatorPhrase" ):
                return visitor.visitStartsIntervalOperatorPhrase(self)
            else:
                return visitor.visitChildren(self)



    def intervalOperatorPhrase(self):

        localctx = cqlParser.IntervalOperatorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_intervalOperatorPhrase)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                localctx = cqlParser.ConcurrentWithIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0):
                    self.state = 889
                    _la = self._input.LA(1)
                    if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 892
                self.match(cqlParser.T__139)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (cqlParser.T__78 - 79)) | (1 << (cqlParser.T__79 - 79)) | (1 << (cqlParser.T__80 - 79)) | (1 << (cqlParser.T__81 - 79)) | (1 << (cqlParser.T__82 - 79)) | (1 << (cqlParser.T__83 - 79)) | (1 << (cqlParser.T__84 - 79)) | (1 << (cqlParser.T__85 - 79)))) != 0):
                    self.state = 893
                    self.dateTimePrecision()


                self.state = 898
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [cqlParser.T__126, cqlParser.T__127]:
                    self.state = 896
                    self.relativeQualifier()
                    pass
                elif token in [cqlParser.T__56]:
                    self.state = 897
                    self.match(cqlParser.T__56)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 901
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 900
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__101 or _la==cqlParser.T__102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 2:
                localctx = cqlParser.IncludesIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__59:
                    self.state = 903
                    self.match(cqlParser.T__59)


                self.state = 906
                self.match(cqlParser.T__140)
                self.state = 908
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.dateTimePrecisionSpecifier()


                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 910
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__101 or _la==cqlParser.T__102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 3:
                localctx = cqlParser.IncludedInIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0):
                    self.state = 913
                    _la = self._input.LA(1)
                    if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__59:
                    self.state = 916
                    self.match(cqlParser.T__59)


                self.state = 919
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__141 or _la==cqlParser.T__142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 4:
                localctx = cqlParser.BeforeOrAfterIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0):
                    self.state = 923
                    _la = self._input.LA(1)
                    if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (cqlParser.T__130 - 131)) | (1 << (cqlParser.T__131 - 131)) | (1 << (cqlParser.NUMBER - 131)))) != 0):
                    self.state = 926
                    self.quantityOffset()


                self.state = 929
                self.temporalRelationship()
                self.state = 931
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                if la_ == 1:
                    self.state = 930
                    self.dateTimePrecisionSpecifier()


                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 933
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__101 or _la==cqlParser.T__102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                localctx = cqlParser.WithinIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0):
                    self.state = 936
                    _la = self._input.LA(1)
                    if not(((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__138 - 137)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__59:
                    self.state = 939
                    self.match(cqlParser.T__59)


                self.state = 942
                self.match(cqlParser.T__143)
                self.state = 943
                self.quantity()
                self.state = 944
                self.match(cqlParser.T__103)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 945
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__101 or _la==cqlParser.T__102):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 6:
                localctx = cqlParser.MeetsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 948
                self.match(cqlParser.T__144)
                self.state = 950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__133 or _la==cqlParser.T__134:
                    self.state = 949
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__133 or _la==cqlParser.T__134):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 953
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 952
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 7:
                localctx = cqlParser.OverlapsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 955
                self.match(cqlParser.T__145)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__133 or _la==cqlParser.T__134:
                    self.state = 956
                    _la = self._input.LA(1)
                    if not(_la==cqlParser.T__133 or _la==cqlParser.T__134):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 960
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 959
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 8:
                localctx = cqlParser.StartsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 962
                self.match(cqlParser.T__136)
                self.state = 964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 963
                    self.dateTimePrecisionSpecifier()


                pass

            elif la_ == 9:
                localctx = cqlParser.EndsIntervalOperatorPhraseContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 966
                self.match(cqlParser.T__137)
                self.state = 968
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 967
                    self.dateTimePrecisionSpecifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_term

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExternalConstantTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def externalConstant(self):
            return self.getTypedRuleContext(cqlParser.ExternalConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalConstantTerm" ):
                listener.enterExternalConstantTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalConstantTerm" ):
                listener.exitExternalConstantTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalConstantTerm" ):
                return visitor.visitExternalConstantTerm(self)
            else:
                return visitor.visitChildren(self)


    class TupleSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tupleSelector(self):
            return self.getTypedRuleContext(cqlParser.TupleSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleSelectorTerm" ):
                listener.enterTupleSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleSelectorTerm" ):
                listener.exitTupleSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleSelectorTerm" ):
                return visitor.visitTupleSelectorTerm(self)
            else:
                return visitor.visitChildren(self)


    class LiteralTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(cqlParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralTerm" ):
                listener.enterLiteralTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralTerm" ):
                listener.exitLiteralTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralTerm" ):
                return visitor.visitLiteralTerm(self)
            else:
                return visitor.visitChildren(self)


    class ConceptSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def conceptSelector(self):
            return self.getTypedRuleContext(cqlParser.ConceptSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptSelectorTerm" ):
                listener.enterConceptSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptSelectorTerm" ):
                listener.exitConceptSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConceptSelectorTerm" ):
                return visitor.visitConceptSelectorTerm(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedTerm" ):
                listener.enterParenthesizedTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedTerm" ):
                listener.exitParenthesizedTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedTerm" ):
                return visitor.visitParenthesizedTerm(self)
            else:
                return visitor.visitChildren(self)


    class CodeSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def codeSelector(self):
            return self.getTypedRuleContext(cqlParser.CodeSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSelectorTerm" ):
                listener.enterCodeSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSelectorTerm" ):
                listener.exitCodeSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSelectorTerm" ):
                return visitor.visitCodeSelectorTerm(self)
            else:
                return visitor.visitChildren(self)


    class InvocationTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def invocation(self):
            return self.getTypedRuleContext(cqlParser.InvocationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvocationTerm" ):
                listener.enterInvocationTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvocationTerm" ):
                listener.exitInvocationTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInvocationTerm" ):
                return visitor.visitInvocationTerm(self)
            else:
                return visitor.visitChildren(self)


    class InstanceSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def instanceSelector(self):
            return self.getTypedRuleContext(cqlParser.InstanceSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceSelectorTerm" ):
                listener.enterInstanceSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceSelectorTerm" ):
                listener.exitInstanceSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceSelectorTerm" ):
                return visitor.visitInstanceSelectorTerm(self)
            else:
                return visitor.visitChildren(self)


    class IntervalSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def intervalSelector(self):
            return self.getTypedRuleContext(cqlParser.IntervalSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSelectorTerm" ):
                listener.enterIntervalSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSelectorTerm" ):
                listener.exitIntervalSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalSelectorTerm" ):
                return visitor.visitIntervalSelectorTerm(self)
            else:
                return visitor.visitChildren(self)


    class ListSelectorTermContext(TermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.TermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def listSelector(self):
            return self.getTypedRuleContext(cqlParser.ListSelectorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListSelectorTerm" ):
                listener.enterListSelectorTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListSelectorTerm" ):
                listener.exitListSelectorTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListSelectorTerm" ):
                return visitor.visitListSelectorTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self):

        localctx = cqlParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_term)
        try:
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = cqlParser.InvocationTermContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.invocation()
                pass

            elif la_ == 2:
                localctx = cqlParser.LiteralTermContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.literal()
                pass

            elif la_ == 3:
                localctx = cqlParser.ExternalConstantTermContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.externalConstant()
                pass

            elif la_ == 4:
                localctx = cqlParser.IntervalSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 975
                self.intervalSelector()
                pass

            elif la_ == 5:
                localctx = cqlParser.TupleSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.tupleSelector()
                pass

            elif la_ == 6:
                localctx = cqlParser.InstanceSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 977
                self.instanceSelector()
                pass

            elif la_ == 7:
                localctx = cqlParser.ListSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 978
                self.listSelector()
                pass

            elif la_ == 8:
                localctx = cqlParser.CodeSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.codeSelector()
                pass

            elif la_ == 9:
                localctx = cqlParser.ConceptSelectorTermContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 980
                self.conceptSelector()
                pass

            elif la_ == 10:
                localctx = cqlParser.ParenthesizedTermContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 981
                self.match(cqlParser.T__29)
                self.state = 982
                self.expression(0)
                self.state = 983
                self.match(cqlParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedInvocation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QualifiedFunctionInvocationContext(QualifiedInvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.QualifiedInvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedFunction(self):
            return self.getTypedRuleContext(cqlParser.QualifiedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunctionInvocation" ):
                listener.enterQualifiedFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunctionInvocation" ):
                listener.exitQualifiedFunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunctionInvocation" ):
                return visitor.visitQualifiedFunctionInvocation(self)
            else:
                return visitor.visitChildren(self)


    class QualifiedMemberInvocationContext(QualifiedInvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.QualifiedInvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedMemberInvocation" ):
                listener.enterQualifiedMemberInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedMemberInvocation" ):
                listener.exitQualifiedMemberInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedMemberInvocation" ):
                return visitor.visitQualifiedMemberInvocation(self)
            else:
                return visitor.visitChildren(self)



    def qualifiedInvocation(self):

        localctx = cqlParser.QualifiedInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_qualifiedInvocation)
        try:
            self.state = 989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
            if la_ == 1:
                localctx = cqlParser.QualifiedMemberInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                localctx = cqlParser.QualifiedFunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.qualifiedFunction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierOrFunctionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierOrFunctionIdentifierContext,0)


        def paramList(self):
            return self.getTypedRuleContext(cqlParser.ParamListContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_qualifiedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedFunction" ):
                listener.enterQualifiedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedFunction" ):
                listener.exitQualifiedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedFunction" ):
                return visitor.visitQualifiedFunction(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedFunction(self):

        localctx = cqlParser.QualifiedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_qualifiedFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.identifierOrFunctionIdentifier()
            self.state = 992
            self.match(cqlParser.T__29)
            self.state = 994
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__36) | (1 << cqlParser.T__41) | (1 << cqlParser.T__44) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 128)) | (1 << (cqlParser.DATETIME - 128)) | (1 << (cqlParser.TIME - 128)) | (1 << (cqlParser.IDENTIFIER - 128)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 128)) | (1 << (cqlParser.STRING - 128)) | (1 << (cqlParser.NUMBER - 128)))) != 0):
                self.state = 993
                self.paramList()


            self.state = 996
            self.match(cqlParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_invocation

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TotalInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTotalInvocation" ):
                listener.enterTotalInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTotalInvocation" ):
                listener.exitTotalInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTotalInvocation" ):
                return visitor.visitTotalInvocation(self)
            else:
                return visitor.visitChildren(self)


    class ThisInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisInvocation" ):
                listener.enterThisInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisInvocation" ):
                listener.exitThisInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisInvocation" ):
                return visitor.visitThisInvocation(self)
            else:
                return visitor.visitChildren(self)


    class IndexInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexInvocation" ):
                listener.enterIndexInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexInvocation" ):
                listener.exitIndexInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexInvocation" ):
                return visitor.visitIndexInvocation(self)
            else:
                return visitor.visitChildren(self)


    class FunctionInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def function(self):
            return self.getTypedRuleContext(cqlParser.FunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionInvocation" ):
                listener.enterFunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionInvocation" ):
                listener.exitFunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionInvocation" ):
                return visitor.visitFunctionInvocation(self)
            else:
                return visitor.visitChildren(self)


    class MemberInvocationContext(InvocationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.InvocationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberInvocation" ):
                listener.enterMemberInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberInvocation" ):
                listener.exitMemberInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberInvocation" ):
                return visitor.visitMemberInvocation(self)
            else:
                return visitor.visitChildren(self)



    def invocation(self):

        localctx = cqlParser.InvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_invocation)
        try:
            self.state = 1003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                localctx = cqlParser.MemberInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 998
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                localctx = cqlParser.FunctionInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 999
                self.function()
                pass

            elif la_ == 3:
                localctx = cqlParser.ThisInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.match(cqlParser.T__146)
                pass

            elif la_ == 4:
                localctx = cqlParser.IndexInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1001
                self.match(cqlParser.T__147)
                pass

            elif la_ == 5:
                localctx = cqlParser.TotalInvocationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1002
                self.match(cqlParser.T__148)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def paramList(self):
            return self.getTypedRuleContext(cqlParser.ParamListContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction" ):
                return visitor.visitFunction(self)
            else:
                return visitor.visitChildren(self)




    def function(self):

        localctx = cqlParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.referentialIdentifier()
            self.state = 1006
            self.match(cqlParser.T__29)
            self.state = 1008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__36) | (1 << cqlParser.T__41) | (1 << cqlParser.T__44) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 128)) | (1 << (cqlParser.DATETIME - 128)) | (1 << (cqlParser.TIME - 128)) | (1 << (cqlParser.IDENTIFIER - 128)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 128)) | (1 << (cqlParser.STRING - 128)) | (1 << (cqlParser.NUMBER - 128)))) != 0):
                self.state = 1007
                self.paramList()


            self.state = 1010
            self.match(cqlParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RatioContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def quantity(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.QuantityContext)
            else:
                return self.getTypedRuleContext(cqlParser.QuantityContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_ratio

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatio" ):
                listener.enterRatio(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatio" ):
                listener.exitRatio(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatio" ):
                return visitor.visitRatio(self)
            else:
                return visitor.visitChildren(self)




    def ratio(self):

        localctx = cqlParser.RatioContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_ratio)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.quantity()
            self.state = 1013
            self.match(cqlParser.T__10)
            self.state = 1014
            self.quantity()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_literal

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TimeLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TIME(self):
            return self.getToken(cqlParser.TIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimeLiteral" ):
                listener.enterTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimeLiteral" ):
                listener.exitTimeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimeLiteral" ):
                return visitor.visitTimeLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NullLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullLiteral" ):
                listener.enterNullLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullLiteral" ):
                listener.exitNullLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class RatioLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ratio(self):
            return self.getTypedRuleContext(cqlParser.RatioContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRatioLiteral" ):
                listener.enterRatioLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRatioLiteral" ):
                listener.exitRatioLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRatioLiteral" ):
                return visitor.visitRatioLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DateTimeLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATETIME(self):
            return self.getToken(cqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDateTimeLiteral" ):
                listener.enterDateTimeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDateTimeLiteral" ):
                listener.exitDateTimeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDateTimeLiteral" ):
                return visitor.visitDateTimeLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumberLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberLiteral" ):
                listener.enterNumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberLiteral" ):
                listener.exitNumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumberLiteral" ):
                return visitor.visitNumberLiteral(self)
            else:
                return visitor.visitChildren(self)


    class QuantityLiteralContext(LiteralContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a cqlParser.LiteralContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quantity(self):
            return self.getTypedRuleContext(cqlParser.QuantityContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantityLiteral" ):
                listener.enterQuantityLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantityLiteral" ):
                listener.exitQuantityLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantityLiteral" ):
                return visitor.visitQuantityLiteral(self)
            else:
                return visitor.visitChildren(self)



    def literal(self):

        localctx = cqlParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.state = 1024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                localctx = cqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                _la = self._input.LA(1)
                if not(_la==cqlParser.T__54 or _la==cqlParser.T__55):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = cqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.match(cqlParser.T__53)
                pass

            elif la_ == 3:
                localctx = cqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1018
                self.match(cqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = cqlParser.NumberLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1019
                self.match(cqlParser.NUMBER)
                pass

            elif la_ == 5:
                localctx = cqlParser.DateTimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1020
                self.match(cqlParser.DATETIME)
                pass

            elif la_ == 6:
                localctx = cqlParser.TimeLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1021
                self.match(cqlParser.TIME)
                pass

            elif la_ == 7:
                localctx = cqlParser.QuantityLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1022
                self.quantity()
                pass

            elif la_ == 8:
                localctx = cqlParser.RatioLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1023
                self.ratio()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_intervalSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSelector" ):
                listener.enterIntervalSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSelector" ):
                listener.exitIntervalSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalSelector" ):
                return visitor.visitIntervalSelector(self)
            else:
                return visitor.visitChildren(self)




    def intervalSelector(self):

        localctx = cqlParser.IntervalSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_intervalSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1026
            self.match(cqlParser.T__23)
            self.state = 1027
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__29 or _la==cqlParser.T__36):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1028
            self.expression(0)
            self.state = 1029
            self.match(cqlParser.T__14)
            self.state = 1030
            self.expression(0)
            self.state = 1031
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__30 or _la==cqlParser.T__39):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tupleElementSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.TupleElementSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.TupleElementSelectorContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleSelector" ):
                listener.enterTupleSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleSelector" ):
                listener.exitTupleSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleSelector" ):
                return visitor.visitTupleSelector(self)
            else:
                return visitor.visitChildren(self)




    def tupleSelector(self):

        localctx = cqlParser.TupleSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tupleSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__24:
                self.state = 1033
                self.match(cqlParser.T__24)


            self.state = 1036
            self.match(cqlParser.T__13)
            self.state = 1046
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__10]:
                self.state = 1037
                self.match(cqlParser.T__10)
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1038
                self.tupleElementSelector()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1039
                    self.match(cqlParser.T__14)
                    self.state = 1040
                    self.tupleElementSelector()
                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1048
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TupleElementSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_tupleElementSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupleElementSelector" ):
                listener.enterTupleElementSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupleElementSelector" ):
                listener.exitTupleElementSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupleElementSelector" ):
                return visitor.visitTupleElementSelector(self)
            else:
                return visitor.visitChildren(self)




    def tupleElementSelector(self):

        localctx = cqlParser.TupleElementSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tupleElementSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.referentialIdentifier()
            self.state = 1051
            self.match(cqlParser.T__10)
            self.state = 1052
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstanceSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedTypeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.NamedTypeSpecifierContext,0)


        def instanceElementSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.InstanceElementSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.InstanceElementSelectorContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_instanceSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceSelector" ):
                listener.enterInstanceSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceSelector" ):
                listener.exitInstanceSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceSelector" ):
                return visitor.visitInstanceSelector(self)
            else:
                return visitor.visitChildren(self)




    def instanceSelector(self):

        localctx = cqlParser.InstanceSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_instanceSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.namedTypeSpecifier()
            self.state = 1055
            self.match(cqlParser.T__13)
            self.state = 1065
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__10]:
                self.state = 1056
                self.match(cqlParser.T__10)
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1057
                self.instanceElementSelector()
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1058
                    self.match(cqlParser.T__14)
                    self.state = 1059
                    self.instanceElementSelector()
                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 1067
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstanceElementSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(cqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_instanceElementSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceElementSelector" ):
                listener.enterInstanceElementSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceElementSelector" ):
                listener.exitInstanceElementSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceElementSelector" ):
                return visitor.visitInstanceElementSelector(self)
            else:
                return visitor.visitChildren(self)




    def instanceElementSelector(self):

        localctx = cqlParser.InstanceElementSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_instanceElementSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.referentialIdentifier()
            self.state = 1070
            self.match(cqlParser.T__10)
            self.state = 1071
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ListSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def typeSpecifier(self):
            return self.getTypedRuleContext(cqlParser.TypeSpecifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_listSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListSelector" ):
                listener.enterListSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListSelector" ):
                listener.exitListSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListSelector" ):
                return visitor.visitListSelector(self)
            else:
                return visitor.visitChildren(self)




    def listSelector(self):

        localctx = cqlParser.ListSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_listSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==cqlParser.T__20:
                self.state = 1073
                self.match(cqlParser.T__20)
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==cqlParser.T__21:
                    self.state = 1074
                    self.match(cqlParser.T__21)
                    self.state = 1075
                    self.typeSpecifier()
                    self.state = 1076
                    self.match(cqlParser.T__22)




            self.state = 1082
            self.match(cqlParser.T__13)
            self.state = 1091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__13) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__29) | (1 << cqlParser.T__36) | (1 << cqlParser.T__41) | (1 << cqlParser.T__44) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__99 - 64)) | (1 << (cqlParser.T__100 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__108 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__146 - 128)) | (1 << (cqlParser.T__147 - 128)) | (1 << (cqlParser.T__148 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)) | (1 << (cqlParser.T__152 - 128)) | (1 << (cqlParser.QUOTEDIDENTIFIER - 128)) | (1 << (cqlParser.DATETIME - 128)) | (1 << (cqlParser.TIME - 128)) | (1 << (cqlParser.IDENTIFIER - 128)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 128)) | (1 << (cqlParser.STRING - 128)) | (1 << (cqlParser.NUMBER - 128)))) != 0):
                self.state = 1083
                self.expression(0)
                self.state = 1088
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==cqlParser.T__14:
                    self.state = 1084
                    self.match(cqlParser.T__14)
                    self.state = 1085
                    self.expression(0)
                    self.state = 1090
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1093
            self.match(cqlParser.T__15)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_displayClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisplayClause" ):
                listener.enterDisplayClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisplayClause" ):
                listener.exitDisplayClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisplayClause" ):
                return visitor.visitDisplayClause(self)
            else:
                return visitor.visitChildren(self)




    def displayClause(self):

        localctx = cqlParser.DisplayClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_displayClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(cqlParser.T__149)
            self.state = 1096
            self.match(cqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def codesystemIdentifier(self):
            return self.getTypedRuleContext(cqlParser.CodesystemIdentifierContext,0)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_codeSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCodeSelector" ):
                listener.enterCodeSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCodeSelector" ):
                listener.exitCodeSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCodeSelector" ):
                return visitor.visitCodeSelector(self)
            else:
                return visitor.visitChildren(self)




    def codeSelector(self):

        localctx = cqlParser.CodeSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_codeSelector)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1098
            self.match(cqlParser.T__150)
            self.state = 1099
            self.match(cqlParser.STRING)
            self.state = 1100
            self.match(cqlParser.T__18)
            self.state = 1101
            self.codesystemIdentifier()
            self.state = 1103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1102
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConceptSelectorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def codeSelector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.CodeSelectorContext)
            else:
                return self.getTypedRuleContext(cqlParser.CodeSelectorContext,i)


        def displayClause(self):
            return self.getTypedRuleContext(cqlParser.DisplayClauseContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_conceptSelector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConceptSelector" ):
                listener.enterConceptSelector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConceptSelector" ):
                listener.exitConceptSelector(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConceptSelector" ):
                return visitor.visitConceptSelector(self)
            else:
                return visitor.visitChildren(self)




    def conceptSelector(self):

        localctx = cqlParser.ConceptSelectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_conceptSelector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(cqlParser.T__151)
            self.state = 1106
            self.match(cqlParser.T__13)
            self.state = 1107
            self.codeSelector()
            self.state = 1112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 1108
                self.match(cqlParser.T__14)
                self.state = 1109
                self.codeSelector()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1115
            self.match(cqlParser.T__15)
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 1116
                self.displayClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = cqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__33) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__38) | (1 << cqlParser.T__40) | (1 << cqlParser.T__41) | (1 << cqlParser.T__42) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__45) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__71 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__119 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__132 - 128)) | (1 << (cqlParser.T__133 - 128)) | (1 << (cqlParser.T__134 - 128)) | (1 << (cqlParser.T__135 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__138 - 128)) | (1 << (cqlParser.T__139 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__141 - 128)) | (1 << (cqlParser.T__142 - 128)) | (1 << (cqlParser.T__143 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReservedWord" ):
                return visitor.visitReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def reservedWord(self):

        localctx = cqlParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_reservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__18) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__33) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__38) | (1 << cqlParser.T__40) | (1 << cqlParser.T__42) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__45) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__71 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__119 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (cqlParser.T__132 - 133)) | (1 << (cqlParser.T__133 - 133)) | (1 << (cqlParser.T__134 - 133)) | (1 << (cqlParser.T__135 - 133)) | (1 << (cqlParser.T__138 - 133)) | (1 << (cqlParser.T__139 - 133)) | (1 << (cqlParser.T__141 - 133)) | (1 << (cqlParser.T__142 - 133)) | (1 << (cqlParser.T__143 - 133)) | (1 << (cqlParser.T__150 - 133)) | (1 << (cqlParser.T__151 - 133)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_keywordIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordIdentifier" ):
                listener.enterKeywordIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordIdentifier" ):
                listener.exitKeywordIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordIdentifier" ):
                return visitor.visitKeywordIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def keywordIdentifier(self):

        localctx = cqlParser.KeywordIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_keywordIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__41) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (cqlParser.T__70 - 71)) | (1 << (cqlParser.T__72 - 71)) | (1 << (cqlParser.T__73 - 71)) | (1 << (cqlParser.T__75 - 71)) | (1 << (cqlParser.T__76 - 71)) | (1 << (cqlParser.T__77 - 71)) | (1 << (cqlParser.T__86 - 71)) | (1 << (cqlParser.T__87 - 71)) | (1 << (cqlParser.T__88 - 71)) | (1 << (cqlParser.T__101 - 71)) | (1 << (cqlParser.T__102 - 71)) | (1 << (cqlParser.T__104 - 71)) | (1 << (cqlParser.T__105 - 71)) | (1 << (cqlParser.T__106 - 71)) | (1 << (cqlParser.T__114 - 71)) | (1 << (cqlParser.T__115 - 71)) | (1 << (cqlParser.T__126 - 71)) | (1 << (cqlParser.T__127 - 71)) | (1 << (cqlParser.T__128 - 71)) | (1 << (cqlParser.T__129 - 71)))) != 0) or ((((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & ((1 << (cqlParser.T__136 - 137)) | (1 << (cqlParser.T__137 - 137)) | (1 << (cqlParser.T__140 - 137)) | (1 << (cqlParser.T__144 - 137)) | (1 << (cqlParser.T__145 - 137)) | (1 << (cqlParser.T__149 - 137)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObsoleteIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_obsoleteIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObsoleteIdentifier" ):
                listener.enterObsoleteIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObsoleteIdentifier" ):
                listener.exitObsoleteIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObsoleteIdentifier" ):
                return visitor.visitObsoleteIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def obsoleteIdentifier(self):

        localctx = cqlParser.ObsoleteIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_obsoleteIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__1) | (1 << cqlParser.T__17) | (1 << cqlParser.T__19) | (1 << cqlParser.T__41) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__52) | (1 << cqlParser.T__58))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (cqlParser.T__70 - 71)) | (1 << (cqlParser.T__86 - 71)) | (1 << (cqlParser.T__87 - 71)) | (1 << (cqlParser.T__88 - 71)) | (1 << (cqlParser.T__101 - 71)) | (1 << (cqlParser.T__102 - 71)))) != 0) or ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (cqlParser.T__149 - 150)) | (1 << (cqlParser.T__150 - 150)) | (1 << (cqlParser.T__151 - 150)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_functionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionIdentifier" ):
                listener.enterFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionIdentifier" ):
                listener.exitFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = cqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_functionIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << cqlParser.T__0) | (1 << cqlParser.T__1) | (1 << cqlParser.T__2) | (1 << cqlParser.T__3) | (1 << cqlParser.T__4) | (1 << cqlParser.T__5) | (1 << cqlParser.T__6) | (1 << cqlParser.T__7) | (1 << cqlParser.T__8) | (1 << cqlParser.T__9) | (1 << cqlParser.T__11) | (1 << cqlParser.T__12) | (1 << cqlParser.T__17) | (1 << cqlParser.T__18) | (1 << cqlParser.T__19) | (1 << cqlParser.T__20) | (1 << cqlParser.T__23) | (1 << cqlParser.T__24) | (1 << cqlParser.T__26) | (1 << cqlParser.T__27) | (1 << cqlParser.T__28) | (1 << cqlParser.T__33) | (1 << cqlParser.T__34) | (1 << cqlParser.T__35) | (1 << cqlParser.T__38) | (1 << cqlParser.T__40) | (1 << cqlParser.T__41) | (1 << cqlParser.T__42) | (1 << cqlParser.T__43) | (1 << cqlParser.T__44) | (1 << cqlParser.T__45) | (1 << cqlParser.T__46) | (1 << cqlParser.T__47) | (1 << cqlParser.T__48) | (1 << cqlParser.T__49) | (1 << cqlParser.T__50) | (1 << cqlParser.T__51) | (1 << cqlParser.T__52) | (1 << cqlParser.T__53) | (1 << cqlParser.T__54) | (1 << cqlParser.T__55) | (1 << cqlParser.T__56) | (1 << cqlParser.T__57) | (1 << cqlParser.T__58) | (1 << cqlParser.T__59) | (1 << cqlParser.T__60) | (1 << cqlParser.T__61) | (1 << cqlParser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (cqlParser.T__63 - 64)) | (1 << (cqlParser.T__70 - 64)) | (1 << (cqlParser.T__71 - 64)) | (1 << (cqlParser.T__72 - 64)) | (1 << (cqlParser.T__73 - 64)) | (1 << (cqlParser.T__75 - 64)) | (1 << (cqlParser.T__76 - 64)) | (1 << (cqlParser.T__77 - 64)) | (1 << (cqlParser.T__78 - 64)) | (1 << (cqlParser.T__79 - 64)) | (1 << (cqlParser.T__80 - 64)) | (1 << (cqlParser.T__81 - 64)) | (1 << (cqlParser.T__82 - 64)) | (1 << (cqlParser.T__83 - 64)) | (1 << (cqlParser.T__84 - 64)) | (1 << (cqlParser.T__85 - 64)) | (1 << (cqlParser.T__86 - 64)) | (1 << (cqlParser.T__87 - 64)) | (1 << (cqlParser.T__88 - 64)) | (1 << (cqlParser.T__89 - 64)) | (1 << (cqlParser.T__90 - 64)) | (1 << (cqlParser.T__91 - 64)) | (1 << (cqlParser.T__92 - 64)) | (1 << (cqlParser.T__93 - 64)) | (1 << (cqlParser.T__94 - 64)) | (1 << (cqlParser.T__95 - 64)) | (1 << (cqlParser.T__96 - 64)) | (1 << (cqlParser.T__97 - 64)) | (1 << (cqlParser.T__98 - 64)) | (1 << (cqlParser.T__101 - 64)) | (1 << (cqlParser.T__102 - 64)) | (1 << (cqlParser.T__103 - 64)) | (1 << (cqlParser.T__104 - 64)) | (1 << (cqlParser.T__105 - 64)) | (1 << (cqlParser.T__106 - 64)) | (1 << (cqlParser.T__107 - 64)) | (1 << (cqlParser.T__109 - 64)) | (1 << (cqlParser.T__110 - 64)) | (1 << (cqlParser.T__114 - 64)) | (1 << (cqlParser.T__115 - 64)) | (1 << (cqlParser.T__117 - 64)) | (1 << (cqlParser.T__118 - 64)) | (1 << (cqlParser.T__119 - 64)) | (1 << (cqlParser.T__120 - 64)) | (1 << (cqlParser.T__121 - 64)) | (1 << (cqlParser.T__122 - 64)) | (1 << (cqlParser.T__123 - 64)) | (1 << (cqlParser.T__124 - 64)) | (1 << (cqlParser.T__125 - 64)) | (1 << (cqlParser.T__126 - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (cqlParser.T__127 - 128)) | (1 << (cqlParser.T__128 - 128)) | (1 << (cqlParser.T__129 - 128)) | (1 << (cqlParser.T__133 - 128)) | (1 << (cqlParser.T__134 - 128)) | (1 << (cqlParser.T__136 - 128)) | (1 << (cqlParser.T__137 - 128)) | (1 << (cqlParser.T__138 - 128)) | (1 << (cqlParser.T__139 - 128)) | (1 << (cqlParser.T__140 - 128)) | (1 << (cqlParser.T__141 - 128)) | (1 << (cqlParser.T__142 - 128)) | (1 << (cqlParser.T__143 - 128)) | (1 << (cqlParser.T__144 - 128)) | (1 << (cqlParser.T__145 - 128)) | (1 << (cqlParser.T__149 - 128)) | (1 << (cqlParser.T__150 - 128)) | (1 << (cqlParser.T__151 - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return cqlParser.RULE_typeNameIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeNameIdentifier" ):
                listener.enterTypeNameIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeNameIdentifier" ):
                listener.exitTypeNameIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeNameIdentifier" ):
                return visitor.visitTypeNameIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def typeNameIdentifier(self):

        localctx = cqlParser.TypeNameIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_typeNameIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            _la = self._input.LA(1)
            if not(_la==cqlParser.T__86 or _la==cqlParser.T__87 or _la==cqlParser.T__150 or _la==cqlParser.T__151):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferentialIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def keywordIdentifier(self):
            return self.getTypedRuleContext(cqlParser.KeywordIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_referentialIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferentialIdentifier" ):
                listener.enterReferentialIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferentialIdentifier" ):
                listener.exitReferentialIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferentialIdentifier" ):
                return visitor.visitReferentialIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def referentialIdentifier(self):

        localctx = cqlParser.ReferentialIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_referentialIdentifier)
        try:
            self.state = 1133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1131
                self.identifier()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__19, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__41, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__70, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__101, cqlParser.T__102, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__114, cqlParser.T__115, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__136, cqlParser.T__137, cqlParser.T__140, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self.keywordIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferentialOrTypeNameIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def referentialIdentifier(self):
            return self.getTypedRuleContext(cqlParser.ReferentialIdentifierContext,0)


        def typeNameIdentifier(self):
            return self.getTypedRuleContext(cqlParser.TypeNameIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_referentialOrTypeNameIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferentialOrTypeNameIdentifier" ):
                listener.enterReferentialOrTypeNameIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferentialOrTypeNameIdentifier" ):
                listener.exitReferentialOrTypeNameIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferentialOrTypeNameIdentifier" ):
                return visitor.visitReferentialOrTypeNameIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def referentialOrTypeNameIdentifier(self):

        localctx = cqlParser.ReferentialOrTypeNameIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_referentialOrTypeNameIdentifier)
        try:
            self.state = 1137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1135
                self.referentialIdentifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1136
                self.typeNameIdentifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierOrFunctionIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def functionIdentifier(self):
            return self.getTypedRuleContext(cqlParser.FunctionIdentifierContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_identifierOrFunctionIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierOrFunctionIdentifier" ):
                listener.enterIdentifierOrFunctionIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierOrFunctionIdentifier" ):
                listener.exitIdentifierOrFunctionIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierOrFunctionIdentifier" ):
                return visitor.visitIdentifierOrFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifierOrFunctionIdentifier(self):

        localctx = cqlParser.IdentifierOrFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_identifierOrFunctionIdentifier)
        try:
            self.state = 1141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1139
                self.identifier()
                pass
            elif token in [cqlParser.T__0, cqlParser.T__1, cqlParser.T__2, cqlParser.T__3, cqlParser.T__4, cqlParser.T__5, cqlParser.T__6, cqlParser.T__7, cqlParser.T__8, cqlParser.T__9, cqlParser.T__11, cqlParser.T__12, cqlParser.T__17, cqlParser.T__18, cqlParser.T__19, cqlParser.T__20, cqlParser.T__23, cqlParser.T__24, cqlParser.T__26, cqlParser.T__27, cqlParser.T__28, cqlParser.T__33, cqlParser.T__34, cqlParser.T__35, cqlParser.T__38, cqlParser.T__40, cqlParser.T__41, cqlParser.T__42, cqlParser.T__43, cqlParser.T__44, cqlParser.T__45, cqlParser.T__46, cqlParser.T__47, cqlParser.T__48, cqlParser.T__49, cqlParser.T__50, cqlParser.T__51, cqlParser.T__52, cqlParser.T__53, cqlParser.T__54, cqlParser.T__55, cqlParser.T__56, cqlParser.T__57, cqlParser.T__58, cqlParser.T__59, cqlParser.T__60, cqlParser.T__61, cqlParser.T__62, cqlParser.T__63, cqlParser.T__70, cqlParser.T__71, cqlParser.T__72, cqlParser.T__73, cqlParser.T__75, cqlParser.T__76, cqlParser.T__77, cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85, cqlParser.T__86, cqlParser.T__87, cqlParser.T__88, cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96, cqlParser.T__97, cqlParser.T__98, cqlParser.T__101, cqlParser.T__102, cqlParser.T__103, cqlParser.T__104, cqlParser.T__105, cqlParser.T__106, cqlParser.T__107, cqlParser.T__109, cqlParser.T__110, cqlParser.T__114, cqlParser.T__115, cqlParser.T__117, cqlParser.T__118, cqlParser.T__119, cqlParser.T__120, cqlParser.T__121, cqlParser.T__122, cqlParser.T__123, cqlParser.T__124, cqlParser.T__125, cqlParser.T__126, cqlParser.T__127, cqlParser.T__128, cqlParser.T__129, cqlParser.T__133, cqlParser.T__134, cqlParser.T__136, cqlParser.T__137, cqlParser.T__138, cqlParser.T__139, cqlParser.T__140, cqlParser.T__141, cqlParser.T__142, cqlParser.T__143, cqlParser.T__144, cqlParser.T__145, cqlParser.T__149, cqlParser.T__150, cqlParser.T__151]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.functionIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(cqlParser.IDENTIFIER, 0)

        def DELIMITEDIDENTIFIER(self):
            return self.getToken(cqlParser.DELIMITEDIDENTIFIER, 0)

        def QUOTEDIDENTIFIER(self):
            return self.getToken(cqlParser.QUOTEDIDENTIFIER, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = cqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            _la = self._input.LA(1)
            if not(((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (cqlParser.QUOTEDIDENTIFIER - 154)) | (1 << (cqlParser.IDENTIFIER - 154)) | (1 << (cqlParser.DELIMITEDIDENTIFIER - 154)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternalConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(cqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_externalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalConstant" ):
                listener.enterExternalConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalConstant" ):
                listener.exitExternalConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalConstant" ):
                return visitor.visitExternalConstant(self)
            else:
                return visitor.visitChildren(self)




    def externalConstant(self):

        localctx = cqlParser.ExternalConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_externalConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(cqlParser.T__152)
            self.state = 1148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.QUOTEDIDENTIFIER, cqlParser.IDENTIFIER, cqlParser.DELIMITEDIDENTIFIER]:
                self.state = 1146
                self.identifier()
                pass
            elif token in [cqlParser.STRING]:
                self.state = 1147
                self.match(cqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParamListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(cqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(cqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return cqlParser.RULE_paramList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParamList" ):
                listener.enterParamList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParamList" ):
                listener.exitParamList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParamList" ):
                return visitor.visitParamList(self)
            else:
                return visitor.visitChildren(self)




    def paramList(self):

        localctx = cqlParser.ParamListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_paramList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.expression(0)
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==cqlParser.T__14:
                self.state = 1151
                self.match(cqlParser.T__14)
                self.state = 1152
                self.expression(0)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuantityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(cqlParser.NUMBER, 0)

        def unit(self):
            return self.getTypedRuleContext(cqlParser.UnitContext,0)


        def getRuleIndex(self):
            return cqlParser.RULE_quantity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantity" ):
                listener.enterQuantity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantity" ):
                listener.exitQuantity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantity" ):
                return visitor.visitQuantity(self)
            else:
                return visitor.visitChildren(self)




    def quantity(self):

        localctx = cqlParser.QuantityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_quantity)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.match(cqlParser.NUMBER)
            self.state = 1160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1159
                self.unit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.DateTimePrecisionContext,0)


        def pluralDateTimePrecision(self):
            return self.getTypedRuleContext(cqlParser.PluralDateTimePrecisionContext,0)


        def STRING(self):
            return self.getToken(cqlParser.STRING, 0)

        def getRuleIndex(self):
            return cqlParser.RULE_unit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit" ):
                listener.enterUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit" ):
                listener.exitUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit" ):
                return visitor.visitUnit(self)
            else:
                return visitor.visitChildren(self)




    def unit(self):

        localctx = cqlParser.UnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_unit)
        try:
            self.state = 1165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [cqlParser.T__78, cqlParser.T__79, cqlParser.T__80, cqlParser.T__81, cqlParser.T__82, cqlParser.T__83, cqlParser.T__84, cqlParser.T__85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1162
                self.dateTimePrecision()
                pass
            elif token in [cqlParser.T__89, cqlParser.T__90, cqlParser.T__91, cqlParser.T__92, cqlParser.T__93, cqlParser.T__94, cqlParser.T__95, cqlParser.T__96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.pluralDateTimePrecision()
                pass
            elif token in [cqlParser.STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1164
                self.match(cqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[56] = self.simplePath_sempred
        self._predicates[58] = self.expression_sempred
        self._predicates[62] = self.expressionTerm_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def simplePath_sempred(self, localctx:SimplePathContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 11)
         

    def expressionTerm_sempred(self, localctx:ExpressionTermContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 20)
         




