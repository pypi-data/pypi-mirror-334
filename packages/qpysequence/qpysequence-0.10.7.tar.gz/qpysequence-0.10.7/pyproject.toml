[project]
name = "qpysequence"
version = "0.10.7"
description = "QPySequence, which stands for *Qblox Python Sequence*, is a python library to programmatically create the `sequence.json` file that is uploaded to a Qblox sequencer."
authors = [{name = "Qilimanjaro Quantum Tech", email = "info@qilimanjaro.tech"}]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["qblox", "q1asm"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13"
]
dependencies = [
    "loguru>=0.7.3",
    "numpy",
]

[dependency-groups]
dev = [
    "mdformat>=0.7.19",
    "mdformat-ruff>=0.1.3",
    "mypy>=1.13.0",
    "nbqa>=1.9.1",
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-sugar>=1.0.0",
    "ruff>=0.8.3",
]
docs = []

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
line-length = 120
output-format = "concise"
target-version = "py310"
extend-exclude = ["test_*.py", "data.py"]

[tool.ruff.lint]
preview = true
select = [
    "F",
    "E",
    "W",
    "I",
    "YTT",
    # "ANN",
    "ASYNC",
    "S",
    "BLE",
    "CPY",
    "C4",
    "DTZ",
    "T10",
    "FA",
    "ICN",
    "LOG",
    "G",
    "INP",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TC",
    "PTH",
    "TD",
    "PL",
    "NPY",
    "FURB",
    # "DOC",
    "RUF"
]
ignore = [
    "E111",
    "E114",
    "E117",
    "E501",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "E741",
    "W191",
    "RET504",
    "SIM117",
    "PLC0414",
    "PLC2701",
    "PLR0904",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0914",
    "PLR0915",
    "PLR0917",
    "PLR1702"]
dummy-variable-rgx = "^_$"
logger-objects = ["qpysequence.logger.logger"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "S", "CPY", "SLF001", "PLR", "DOC", "RUF012"]
"docs/*" = ["CPY"]
"examples/*" = ["CPY", "T20"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pep8-naming]
ignore-names = ["test_*"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"qpysequence" = "qpy"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.mypy]
python_version = "3.10"
warn_return_any = false
ignore_missing_imports = true
exclude = [
    "\\.ipynb$",
    "^tests/.*"
]

[tool.commitizen]
version = "0.16.1"
version_files = [
    "src/qpysequence/__init__.py",
    "pyproject.toml:version"
]
tag_format = "$version"

[tool.coverage]
    [tool.coverage.report]
    show_missing = true
    exclude_lines = [
        # Have to re-enable the standard pragma
        "pragma: no cover",

        # Don"t complain about missing debug-only code:
        "def __repr__",
        "if self.debug",

        # Don"t complain if tests don"t hit defensive assertion code:
        "raise AssertionError",
        "raise NotImplementedError",

        # Don"t complain if non-runnable code isn"t run:
        "if 0:",
        "if __name__ == .__main__.:",

        # Don"t complain if TYPE_CHECKING is used:
        "if TYPE_CHECKING:"
    ]
    omit = [
        "env/*",
        "venv/*",
        "*/virtualenv/*",
        "*/virtualenvs/*",
        "*/tests/*",
        "examples/*",
    ]

[tool.nbqa.md]
mdformat = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.tox]
requires = ["tox>=4"]
env_list = ["3.10", "3.11", "3.12", "3.13"]

[tool.tox.run_env_base]
description = "run unit tests"
deps = [
    "pytest>=8",
    "pytest-sugar"
]
commands = [["pytest", { replace = "posargs", default = ["tests"], extend = true }]]
