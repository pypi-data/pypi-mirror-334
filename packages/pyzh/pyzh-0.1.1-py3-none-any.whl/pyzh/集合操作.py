# -*- coding: utf-8 -*-
"""
集合操作 - Python集合操作函数的中文封装

set()                  & 创建集合()
frozenset()            & 创建冻结集合()
add()                  & 添加元素()
update()               & 更新集合()
remove()               & 删除元素()
discard()              & 尝试删除元素()
pop()                  & 弹出元素()
clear()                & 清空集合()
union()                & 并集()
intersection()         & 交集()
difference()           & 差集()
symmetric_difference() & 对称差集()
issubset()             & 是子集()
issuperset()           & 是超集()
isdisjoint()           & 是不相交()

作者: [Tech#6]
版本: 0.0.1
许可证: MIT
"""

def 创建集合(可迭代对象=None):
    """创建一个新的集合
    
    参数:
        可迭代对象: 用于初始化集合的可迭代对象，默认为None
        
    返回:
        一个新的集合对象
    """
    return set(可迭代对象) if 可迭代对象 is not None else set()

def 创建冻结集合(可迭代对象=None):
    """创建一个新的冻结集合（不可变集合）
    
    参数:
        可迭代对象: 用于初始化冻结集合的可迭代对象，默认为None
        
    返回:
        一个新的冻结集合对象
    """
    return frozenset(可迭代对象) if 可迭代对象 is not None else frozenset()

def 添加元素(集合, 元素):
    """向集合中添加一个元素
    
    参数:
        集合: 要操作的集合
        元素: 要添加的元素
    """
    集合.add(元素)

def 更新集合(集合, *其他集合):
    """使用其他集合中的元素更新当前集合
    
    参数:
        集合: 要更新的集合
        其他集合: 一个或多个集合，用于更新当前集合
    """
    集合.update(*其他集合)

def 删除元素(集合, 元素):
    """从集合中删除指定元素
    
    参数:
        集合: 要操作的集合
        元素: 要删除的元素
        
    如果元素不存在，将引发KeyError异常
    """
    集合.remove(元素)

def 尝试删除元素(集合, 元素):
    """尝试从集合中删除指定元素
    
    参数:
        集合: 要操作的集合
        元素: 要删除的元素
        
    如果元素不存在，不会引发异常
    """
    集合.discard(元素)

def 弹出元素(集合):
    """随机移除并返回集合中的一个元素
    
    参数:
        集合: 要操作的集合
        
    返回:
        被移除的元素
        
    如果集合为空，将引发KeyError异常
    """
    return 集合.pop()

def 清空集合(集合):
    """清空集合中的所有元素
    
    参数:
        集合: 要清空的集合
    """
    集合.clear()

def 并集(*集合):
    """返回多个集合的并集
    
    参数:
        集合: 一个或多个集合
        
    返回:
        包含所有集合元素的新集合
    """
    return set.union(*集合)

def 交集(*集合):
    """返回多个集合的交集
    
    参数:
        集合: 一个或多个集合
        
    返回:
        包含所有集合共有元素的新集合
    """
    return set.intersection(*集合)

def 差集(集合1, *其他集合):
    """返回第一个集合与其他集合的差集
    
    参数:
        集合1: 主集合
        其他集合: 要从主集合中排除的一个或多个集合
        
    返回:
        包含仅在第一个集合中出现的元素的新集合
    """
    return set.difference(集合1, *其他集合)

def 对称差集(集合1, 集合2):
    """返回两个集合的对称差集
    
    参数:
        集合1: 第一个集合
        集合2: 第二个集合
        
    返回:
        包含仅在其中一个集合中出现的元素的新集合
    """
    return 集合1.symmetric_difference(集合2)

def 是子集(集合1, 集合2):
    """判断集合1是否为集合2的子集
    
    参数:
        集合1: 要判断的子集
        集合2: 要判断的超集
        
    返回:
        如果集合1是集合2的子集返回True，否则返回False
    """
    return 集合1.issubset(集合2)

def 是超集(集合1, 集合2):
    """判断集合1是否为集合2的超集
    
    参数:
        集合1: 要判断的超集
        集合2: 要判断的子集
        
    返回:
        如果集合1是集合2的超集返回True，否则返回False
    """
    return 集合1.issuperset(集合2)

def 是不相交(集合1, 集合2):
    """判断两个集合是否不相交（没有共同元素）
    
    参数:
        集合1: 第一个集合
        集合2: 第二个集合
        
    返回:
        如果两个集合没有共同元素返回True，否则返回False
    """
    return 集合1.isdisjoint(集合2)