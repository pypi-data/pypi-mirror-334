# coding: utf-8

"""
    Compass API

      <h3>With this API you can:</h3> <ul> <li><strong>Execute complex DeFi transactions:&nbsp; </strong>Swap, lend, borrow, stake, LP, and more, with high-level on-chain actions.</li> <li><strong>Stay secure &amp; non-custodial</strong> &ndash; Transactions are signed locally, and you retain full control.</li> <li><strong>Build AI &amp; automation workflows</strong> &ndash; Power AI agents, trading bots, yield products and DeFi applications with programmatic transaction execution. Integrate seamlessly into existing workflows.</li> <li><strong>Interact across multiple protocols &amp; chains</strong>&nbsp;&ndash; Spot, lending, staking on Ethereum, Arbitrum, Base. Many more to come!</li> </ul>  <h3 id=\"quick-links\" class=\"docs-chapter-header\"><a class=\"not-prose group hover:text-compass-pink transition-colors flex w-fit\" href=\"https://www.compasslabs.ai/api-docs#quick-links\">Quick links</a></h3> <ul> <li><a href=\"https://api.compasslabs.ai/\" target=\"_blank\" rel=\"noopener\">API reference</a></li> <li><a href=\"https://github.com/CompassLabs/compass_api_examples\" target=\"_blank\" rel=\"noopener\">5 min quickstart</a></li> <li><a href=\"https://discord.gg/qjP8dCYZ58\" target=\"_blank\" rel=\"noopener\">Discord</a></li> <li><a href=\"https://www.compasslabs.ai/\" target=\"_blank\" rel=\"noopener\">Compass Labs</a></li> </ul>

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class Token(str, Enum):
    """
    A class representing the token.  This class is used to represent the token in the system. Notice individual endpoints' documentation where per chain tokens are presented.
    """

    """
    allowed enum values
    """
    ENUM_1INCH = '1INCH'
    AAVE = 'AAVE'
    BAL = 'BAL'
    CBBTC = 'cbBTC'
    CBETH = 'cbETH'
    CRV = 'CRV'
    CRVUSD = 'crvUSD'
    DAI = 'DAI'
    ENS = 'ENS'
    ETHX = 'ETHx'
    FRAX = 'FRAX'
    FXS = 'FXS'
    GHO = 'GHO'
    KNC = 'KNC'
    LDO = 'LDO'
    LINK = 'LINK'
    LUSD = 'LUSD'
    MKR = 'MKR'
    OSETH = 'osETH'
    PYUSD = 'PYUSD'
    RETH = 'rETH'
    RPL = 'RPL'
    RSETH = 'rsETH'
    SDAI = 'sDAI'
    SNX = 'SNX'
    STG = 'STG'
    SUSDE = 'sUSDe'
    TBTC = 'tBTC'
    UNI = 'UNI'
    USDC = 'USDC'
    USDE = 'USDe'
    USDS = 'USDS'
    USDT = 'USDT'
    WBTC = 'WBTC'
    WEETH = 'weETH'
    WETH = 'WETH'
    WSTETH = 'wstETH'
    ARB = 'ARB'
    EURS = 'EURS'
    MAI = 'MAI'
    USDCE = 'USDCe'
    AERO = 'AERO'
    EUR = 'EUR'
    VIRTUAL = 'VIRTUAL'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Token from a JSON string"""
        return cls(json.loads(json_str))


