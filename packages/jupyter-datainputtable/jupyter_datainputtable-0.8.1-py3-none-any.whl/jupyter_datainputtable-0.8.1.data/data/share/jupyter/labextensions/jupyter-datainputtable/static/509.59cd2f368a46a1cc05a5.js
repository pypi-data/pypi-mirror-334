"use strict";(self.webpackChunkjupyter_datainputtable=self.webpackChunkjupyter_datainputtable||[]).push([[509],{509:(e,t,a)=>{a.r(t),a.d(t,{data_cell_to_input_cell:()=>d,default:()=>b});var l,n=a(120),o=a(158),i=a(256);class c extends i.Widget{constructor(){super({node:l.dialogBodyHTML()})}getValue(){let e=[];const t=this.node.querySelector("textarea");t&&e.push(t.innerHTML);for(const t of this.node.querySelectorAll("input"))e.push(t.value);return e}}class r extends i.Widget{constructor(){super({node:l.getNameForPandasHTML()})}getValue(){const e=this.node.querySelector("input");return e?e.value:""}}function s(e){var t=document.createElement("span");t.className=e.className;const a=e.value;console.log("The new text for the input area:",a),t.innerHTML=a||e.innerHTML,e.replaceWith(t)}function d(e){const t=document.createElement("textarea");t.setAttribute("size","4"),t.setAttribute("onblur","this.innerHTML=this.value;");let a=e.id;null==a&&(a=""),t.id=a,t.className=e.className,t.innerHTML=e.innerHTML,e.replaceWith(t)}function u(e){var t=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!0});!e.dispatchEvent(t)&&alert("Something is wrong. Try running the cell that creates this table.")}function p(e,t){const a=e.editor;if(a){const e={column:0,line:0},l=a.lineCount-1;let n={column:0,line:l};const o=a.getLine(l);o&&(n.column=o.length),a.setSelection({start:e,end:n}),a.replaceSelection&&a.replaceSelection(t)}}!function(e){e.newTableID=function(){const e=new Date;return"it_"+Math.round(e.getTime())},e.getNameForPandasHTML=function(){let e="Provide a name for the new dataframe. It should have no spaces and cannot";e+=" start with a number.";const t=document.createElement("div");t.setAttribute("id","get_name_for_pandas_dlg");const a=document.createElement("H4");a.innerHTML="Provide a name for the new dataframe. It should have no spaces and cannot start with a number.",t.append(a);const l=document.createElement("input");return l.setAttribute("type","text"),l.setAttribute("size","40"),t.append(l),t},e.dialogBodyHTML=function(){const e=["Table Title (caption)","Number of Rows","Number of Columns"],t=[40,15,15],a=["textarea","input","input"],l=["Table _ : ...","2","2"],n=document.createElement("div");n.setAttribute("id","input_table_dim_dlg");const o=document.createElement("H4");o.innerHTML="Set table size remembering to include enough rows and columns for labels.",n.append(o);for(let o=0;o<t.length;o++){const i=document.createElement("div");let c=e[o]+": ";c+="<"+a[o]+' type="text" size="'+t[o]+'" value="'+l[o]+'" ',"textarea"==a[o]&&(c+=' onblur="this.innerHTML=this.value;"',c+=' placeholder = "'+l[o]+'"'),c+="></"+a[o]+">",i.innerHTML=c,n.append(i)}return n},e.input_table_prestr=function(){let e="# If no data table appears in the output of this cell, run the cell to display the table.\n\n";return e+="from IPython.display import HTML\n","# If no data table appears in the output of this cell, run the cell to display the table.\n\nfrom IPython.display import HTML\n"},e.table_actions=function(e){let t="<div";t+=' class = "jp-input_table_actions">',t+='<p class = "jp-input_table_actions">Actions only work if jupyter-datainputtable extension installed.</p>',t+='<div class = "jp-input_table_actions_label" style = "display:inline-flex;">Table Actions</div>';const a=[{label:"Edit Data",title:"Start editing the data.",jp_cmd:"EditDataTable:jupyter-inputtable"},{label:"Data to Pandas...",title:"Create a Panda DataFrame from table.",jp_cmd:"DataToPandas:jupyter-inputtable"},{label:"Save Table",title:"Save the updated data table.",jp_cmd:"SaveDataTable:jupyter-inputtable"}];for(const l of a)t+='<button class ="jp-Button jp-input_table_actions_btn"',t+=' style = "margin:4px;text-decoration:red line-through;"',t+=' data-commandlinker-command="'+l.jp_cmd+'" ',t+='data-commandlinker-args=\\\'{"tableID":"'+e+"\"}\\'",t+='title="'+l.title+'">',t+=l.label+"</button>";return t+="</div>",t},e.TableHTMLstr=function(e,t,a,l){const n="jp-input_table_table_label";let o='<table class="jp-input_table" id="'+l+'"';o+=' style = "min-width:80%;">',o+='<caption class="jp-input_table" style = "font-weight:bold;',o+='font-size:1.5em;color:darkkhaki;text-align:left;">'+e+"</caption><tbody>";for(let e=0;e<t;e++){o+=' <tr class="jp-input_table r'+e+'">';for(let t=0;t<a;t++)0==t&&0==e&&(o+='  <th class="jp-input_table r'+e+" c"+t+'"',o+=' style="text-align:left;padding:0px;border-width:1px;border-style:solid;">',o+='<button class="jp-Button jp-input_table_lock_btn" ',o+='data-commandlinker-command="LockLabels:jupyter-inputtable" ',o+='data-commandlinker-args=\\\'{"tableID":"'+l+"\"}\\'",o+=">",o+="Lock Column and Row Labels</button></th>"),0==t&&e>0&&(o+='<th class="jp-input_table r'+e+" c"+t+'"',o+=' style="text-align:left;padding:0px;border-width:1px;border-style:solid;">',o+='<textarea class="'+n+'"',o+=' onblur="this.innerHTML=this.value;">',o+=e-1+"</textarea></th>"),0==e&&t>0&&(o+='<th class="jp-input_table r'+e+" c"+t+'"',o+=' style="text-align:left;padding:0px;border-width:1px;border-style:solid;">',o+='<textarea class="'+n+'"',o+=' onblur="this.innerHTML=this.value;">',o+="Col_"+(t-1)+"</textarea></th>"),t>0&&e>0&&(o+='  <td class="jp-input_table r'+e+" c"+t+'"',o+=' style="text-align:left;padding:0px;border-width:1px;border-style:solid;">',o+='<textarea class="jp-input_table_data_cell"',o+=' onblur="this.innerHTML=this.value;">',o+="</textarea></td>");o+=" </tr>"}return o+="</tbody></table>",o}}(l||(l={}));const b={id:"jupyter-datainputtable:plugin",description:"Predefined data input tables for Jupyter notebooks",autoStart:!0,requires:[n.ICommandPalette,o.INotebookTools,o.INotebookTracker],activate:(e,t,a,i)=>{const{commands:b}=e,m="NewDataTable:jupyter-inputtable";b.addCommand(m,{label:"Insert Data Entry Table...",caption:"Insert a new Data Entry Table",execute:async()=>{const e=l.newTableID();console.log("Insert data entry table called.");const t=await async function(){const e=new c,t=[n.Dialog.cancelButton(),n.Dialog.okButton()];return await(0,n.showDialog)({body:e,buttons:t,hasClose:!1})}();if(console.log("Input Table Params:",t),t.button.accept&&t.value){let n=l.input_table_prestr();if(n+='display(HTML(\'<div class="jp-input_table">',n+=l.table_actions(e),n+=l.TableHTMLstr(t.value[0],Number(t.value[1]),Number(t.value[2]),e),n+="</div>'))",a.selectedCells){const e=a.selectedCells[0];e&&(p(e,n),e.model.setMetadata("editable",!1),e.model.setMetadata("deletable",!1),b.execute("notebook:run-cell"))}else window.alert("Please select a cell in a notebook.")}}}),t.addItem({command:m,category:"Jupyter Data Input Table",args:{origin:"from the palette"}});b.addCommand("LockLabels:jupyter-inputtable",{label:"Lock Data Entry Table Labels",caption:"Lock Data Entry Table Labels",execute:e=>{let t=e.tableID;if(console.log("Passed TableID:",t),!t){const e=a.selectedCells[0];if(e){const a=e.node.querySelector("table.jp-input_table");a&&(t=a.id)}}const l=document.getElementById(t);if(l){const e=l.querySelectorAll(".jp-input_table_table_label");if(e){for(var n=0;n<e.length;n++)s(e[n]);const t=l.querySelector(".jp-input_table_lock_btn");t&&t.replaceWith("")}else console.log("No label cells found in the input table.")}else console.log("No table found in LockLabels.");console.log("LockLabels command called."),b.execute("SaveDataTable:jupyter-inputtable",{tableID:t})}});b.addCommand("SaveDataTable:jupyter-inputtable",{label:"Save Data Table",caption:"Saves data table so that it can be recreated by running cell.",execute:e=>{let t=e.tableID;if(console.log("Passed TableID:",t),!t){const e=a.selectedCells[0];if(e){const a=e.node.querySelector("div.jp-input_table");if(a){const e=a.querySelector("table.jp-input_table");e&&(t=e.id)}}}const n=document.getElementById(t);if(n){const e=n.querySelectorAll(".jp-input_table_data_cell");if(e){for(var o=0;o<e.length;o++)s(e[o]);let i=n.innerHTML,c=l.input_table_prestr();c+='display(HTML(\'<div class="jp-input_table">',c+=l.table_actions(t),c+='<table class="jp-input_table" id="'+t+'"',c+=' style = "min-width:80%;">';const r=/\n/g,d=/'/g;c+=i.replace(r," ").replace(d,"\\'")+"</table>",c+="</div>",c+="'))",u(n),a.selectedCells?(p(a.selectedCells[0],c),b.execute("notebook:run-cell")):window.alert("Please select a cell in a notebook.")}else console.log("No datacells found in table. Nothing saved.")}else console.log("No datatable found to save.",t);console.log("SaveDataTable command called.")}});b.addCommand("EditDataTable:jupyter-inputtable",{label:"Start editing the data table.",caption:"Makes the data cells in the table editable.",execute:e=>{let t=e.tableID;if(console.log("Passed TableID:",t),!t){const e=a.selectedCells[0];if(e){const a=e.node.querySelector("div.jp-input_table");if(a){const e=a.querySelector("table.jp-input_table");e&&(t=e.id)}}}const l=document.getElementById(t);if(l){const e=l.querySelectorAll(".jp-input_table_data_cell");if(e)for(var n=0;n<e.length;n++)d(e[n])}console.log("Edit data table command called.")}});b.addCommand("DataToPandas:jupyter-inputtable",{label:"Create a Panda DataFrame from table.",caption:"Create a Panda DataFrame from table.",execute:async e=>{let t=e.tableID;if(console.log("Passed TableID:",t),!t){const e=a.selectedCells[0];if(e){const a=e.node.querySelector("div.jp-input_table");if(a){const e=a.querySelector("table.jp-input_table");e&&(t=e.id)}}}const l=document.getElementById(t);if(l){let e=l.querySelectorAll("tr"),t=e.length,c=e[0].querySelectorAll("th").length,s=[],d=[],m=[];for(let a=1;a<c;a++){let l=".c"+a;const n=e[0].querySelector(l);let o="";if(n){const e=n.querySelector(".jp-input_table_table_label");e&&(o=e.innerHTML)}s[a-1]=o,d[a-1]=s[a-1].replaceAll(" ","_").replaceAll("(","_").replaceAll(")","_").replaceAll("/","_").replaceAll("*","_").replaceAll("+","_").replaceAll("-","_").replaceAll("^","_").replaceAll("$","").replaceAll("{","_").replaceAll("}","_").replaceAll("[","_").replaceAll("]","_").replaceAll("=","_").replaceAll("@","_").replaceAll("!","_");let i=[];for(let n=1;n<t;n++){l=".r"+n+".c"+a;let t="";const o=e[n].querySelector(l);if(o){const e=o.querySelector(".jp-input_table_data_cell");e&&(t=e.innerHTML)}i[n-1]=t,/[a-zA-Z]/.test(i[n-1])&&(i[n-1]="'"+i[n-1]+"'"),""==i[n-1]&&(i[n-1]="np.nan"),/np\.nan/i.test(i[n-1])&&(i[n-1]="np.nan")}m[a-1]=i}let f=!1,_=[];for(let e=1;e<t;e++){let t=".r"+e+" .c0",a="";const n=l.querySelector(t);if(n){const e=n.querySelector(".jp-input_table_table_label");e&&(a=e.innerHTML)}_[e-1]=a,_[e-1]!=(e-1).toString()&&(f=!0)}let h="# Package Imports. These do nothing if packages already imported.\n";h+="import numpy as np\n",h+="import pandas as pd\n",h+="# Define the columns\n";let y='{"'+s[0]+'":'+d[0]+",\n";for(let e=0;e<c-1;e++)h+=d[e]+"=["+m[e]+"]\n",e>0&&(y+='    "'+s[e]+'":'+d[e]+",\n");if(y+="    }",f){y+=", index = [";for(let e=0;e<_.length;e++)y+='"'+_[e]+'", ';y+="]"}u(l);let g=a.activeCell,v=null;const T=i.currentWidget;if(T){const e=T.content;e&&(v=e.activeCellIndex,await o.NotebookActions.insertBelow(e))}const j=await async function(){const e=new r,t=[n.Dialog.cancelButton(),n.Dialog.okButton()];return await(0,n.showDialog)({body:e,buttons:t,hasClose:!1})}();if(console.log("pandas name result:",j),j.button.accept&&j.value)if(j.value&&""!=j.value){h+="# Create the DataFrame.\n",h+=j.value+"= pd.DataFrame("+y+")\n",h+="# Print a label and output a summary of the DataFrame.\n",h+="print('DataFrame "+j.value+":')\n",h+=j.value;let e=null;if(T){const t=T.content;t&&(await o.NotebookActions.selectBelow(t),e=t.activeCellIndex)}console.log("Index of cell with table:",v,". Index of new cell",e),v!=e&&(g=a.activeCell,g&&p(g,h)),b.execute("notebook:run-cell"),console.log("Current Notebook? ",T)}else window.alert("You must provide a valid name for the dataframe. It may not start with a number nor contain special characters.")}console.log("Data to Pandas command called.")}}),console.log("JupyterLab extension jupyter-datainputtable is activated!")}}}}]);