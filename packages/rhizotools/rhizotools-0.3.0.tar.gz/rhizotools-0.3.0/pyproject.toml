[project]
name = "rhizotools"
description = "Python package for root processing images at MARS@ORNL"
authors = [
    {name = "Jean Bilheux", email = "bilheuxjm@ornl.gov"},
    {name = "Chen Zhang", email = "zhangc@ornl.gov"},
    {name = "Keita DeCarlo", email = "decarlokd@ornl.gov"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Topic :: Scientific/Engineering :: Physics",
    "Intended Audience :: Science/Research"
]
dynamic = ["version"]
requires-python = ">=3.11"
license = { text = "MIT" }
keywords = ["root processing", "neutron", "biology", "ORNL", "MARS"]
readme = "README.md"
dependencies = [
    "numpy", 
    "astropy",
    "scipy",
    "pillow",
    "scikit-image"
]

[project.urls]
homepage = "https://github.com/ornlneutronimaging/RootPlantProcessing"
repository = "https://github.com/ornlneutronimaging/RootPlantProcessing"
issues = "https://github.com/ornlneutronimaging/RootPlantProcessing/issues"
# documentation = "link_to_readthedocs"

# -------------------------------- #
# -- Build system configuration -- #
# -------------------------------- #
[build-system]
requires = [
    "setuptools>= 42",
    "wheel",
    "toml",
    "versioningit"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*", "scripts*", "docs*", "notebooks*"]

[tool.setuptools.package-data]
"*" = ["*.yml","*.yaml","*.ini"]

# -------------------------------- #
# -- VersioningIt configuration -- #
# -------------------------------- #
[tool.versioningit.vcs]
method = "git"
default-tag = "0.1.0"

[tool.versioningit.next-version]
method = "minor"

[tool.versioningit.format]
distance = "{next_version}.dev{distance}"
dirty = "{version}+d{build_date:%Y%m%d}"
distance-dirty = "{next_version}.dev{distance}+d{build_date:%Y%m%d%H%M}"

[tool.versioningit.write]
file = "src/rhizotools/_version.py"

# -------------------------------- #
# ----- PyTest configuration ----- #
# -------------------------------- #
[tool.pytest.ini_options]
addopts = "-v --cov=packagenamepy --cov-report=term-missing"
pythonpath = [
    ".", "src", "scripts"
]
testpaths = ["tests"]
python_files = ["test*.py"]
norecursedirs = [".git", "tmp*", "_tmp*", "__pycache__", "*dataset*", "*data_set*"]
markers = [
    "mymarker: example markers goes here"
]

# -------------------------------- #
# ------ Ruff configuration ------ #
# -------------------------------- #
[tool.ruff]
target-version = "py311"
line-length = 120
select = ["A", "ARG","ASYNC","BLE","C90", "E", "F", "I", "N", "UP032", "W"]
exclude = ["notebooks/**", "**/*.ipynb"]

[tool.ruff.lint]
select = ["E", "F", "I"]
ignore = []

[tool.ruff.lint.isort]
known-first-party = ["packagenamepy"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# -------------------------------- #
# ------ Pixi configuration ------ #
# -------------------------------- #
[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-arm64"]

[tool.pixi.pypi-dependencies]
rhizotools = { path = ".", editable = true }

# The dependencies listed below will be prioritized over the ones
# listed in the [project] section.
[tool.pixi.dependencies]
numpy = ">=2.2.3,<3"
astropy = ">=7.0.1,<8"
scipy = ">=1.15.2,<2"
pillow = ">=11.1.0,<12"
scikit-image = ">=0.25.2,<0.26"

[tool.pixi.tasks]
# PyPi packaging tasks
build-pypi = { cmd = "python -m build", description = "Build the package for PyPI" }
publish-pypi = { cmd = "twine upload dist/*", description = "Publish the package to PyPI", depends-on = ["build-pypi"] }
clean-pypi = { cmd = "rm -rf dist", description = "Clean the PyPI build artifacts" }
# Conda packaging tasks
# NOTE: for build-conda to work locally, you need to set pixi to use detached-environments, i.e. pixi config set detached-environments true
#       this is because the conda build will complain about build environment in source and refuse to build.
build-conda = { cmd = "cd conda.recipe && VERSION=$(versioningit ../) conda mambabuild --channel conda-forge --output-folder . .", description = "Build the package for conda" }
verify-conda = { cmd = "conda verify conda.recipe/noarch/*.tar.bz2", description = "Verify the conda package", depends-on = ["build-conda"] }
publish-conda = { cmd = "anaconda upload conda.recipe/noarch/*/*.tar.bz2", description = "Publish the package to conda", depends-on = ["verify-conda"] }
clean-conda = { cmd = "sh -c \"find conda.recipe/* ! -name 'meta.yaml' -exec rm -rf {} +\"", description = "Clean the conda build artifacts" }
# Documentation tasks
build-docs = { cmd = "sphinx-build -b html docs docs/_build", description = "Build the documentation" }
clean-docs = { cmd = "rm -rf docs/_build", description = "Clean the documentation build artifacts" }
# Testing tasks
test = { cmd = "pytest", description = "Run the tests" }  # pytest config above takes care of the arguments
# Clean all
clean-all = { description = "Clean all build artifacts", depends-on = ["clean-pypi", "clean-conda", "clean-docs"] }

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
pytest-repeat = "*"

[tool.pixi.feature.package.dependencies]
boa = "*"
anaconda-client = ">=1.12.3,<2"  # For manual upload to anaconda
conda-build = "*"
conda-verify = "*"
python-build = "*"
twine = ">=6.1.0,<7"

[tool.pixi.feature.developer.dependencies]
pip = "*"
versioningit = "*"
pre-commit = "*"
conda-tree = "*"
ruff = "*"

[tool.pixi.feature.docs.dependencies]
sphinx = ">=8.2.1,<9"
sphinx_rtd_theme = ">=3.0.1,<4"

[tool.pixi.feature.jupyter.dependencies]
jupyterlab = "*"
ipympl = "*"
ipywidgets = "*"

[tool.pixi.environments]
default = {features = ["test", "package", "docs", "developer"], solve-group = "default"}
jupyter = {features = ["developer", "jupyter"], solve-group = "jupyter"}
