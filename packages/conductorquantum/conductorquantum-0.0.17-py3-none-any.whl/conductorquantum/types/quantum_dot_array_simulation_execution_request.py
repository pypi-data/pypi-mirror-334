# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .quantum_dot_array_simulation_type import QuantumDotArraySimulationType
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class QuantumDotArraySimulationExecutionRequest(UniversalBaseModel):
    """
    Options for executing charge stability diagram simulations.
    """

    c_dot_dot: typing.List[typing.List[float]] = pydantic.Field()
    """
    Matrix of capacitive couplings between dots
    """

    c_gate_dot: typing.List[typing.List[float]] = pydantic.Field()
    """
    Matrix of capacitive couplings between gates and dots
    """

    x_axis_gate: str = pydantic.Field()
    """
    Gate to sweep on x-axis
    """

    y_axis_gate: str = pydantic.Field()
    """
    Gate to sweep on y-axis
    """

    num_points_x_axis_gate: int = pydantic.Field()
    """
    Number of voltage points on x-axis
    """

    num_points_y_axis_gate: int = pydantic.Field()
    """
    Number of voltage points on y-axis
    """

    x_axis_start: float = pydantic.Field()
    """
    Starting x-axis voltage
    """

    x_axis_end: float = pydantic.Field()
    """
    Ending x-axis voltage
    """

    y_axis_start: float = pydantic.Field()
    """
    Starting y-axis voltage
    """

    y_axis_end: float = pydantic.Field()
    """
    Ending y-axis voltage
    """

    diagram_type: typing.Optional[QuantumDotArraySimulationType] = pydantic.Field(default=None)
    """
    Type of diagram to generate
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
