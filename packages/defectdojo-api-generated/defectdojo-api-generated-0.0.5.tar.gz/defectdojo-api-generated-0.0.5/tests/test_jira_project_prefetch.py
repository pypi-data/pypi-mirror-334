# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

The version of the OpenAPI document: 2.44.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from defectdojo_api_generated.models.jira_project_prefetch import JIRAProjectPrefetch


class TestJIRAProjectPrefetch(unittest.TestCase):
    """JIRAProjectPrefetch unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JIRAProjectPrefetch:
        """Test JIRAProjectPrefetch
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `JIRAProjectPrefetch`
        """
        model = JIRAProjectPrefetch()
        if include_optional:
            return JIRAProjectPrefetch(
                engagement = {
                    'key' : defectdojo_api_generated.models.finding_engagement.FindingEngagement(
                        id = 56, 
                        name = '', 
                        description = '', 
                        product = defectdojo_api_generated.models.finding_product.FindingProduct(
                            id = 56, 
                            name = '', 
                            prod_type = defectdojo_api_generated.models.finding_prod_type.FindingProdType(
                                id = 56, 
                                name = '', ), ), 
                        target_start = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        target_end = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        branch_tag = '', 
                        engagement_type = 'Interactive', 
                        build_id = '', 
                        commit_hash = '', 
                        version = '', 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    },
                jira_instance = {
                    'key' : defectdojo_api_generated.models.jira_instance.JIRAInstance(
                        id = 56, 
                        configuration_name = '', 
                        url = '', 
                        username = '', 
                        default_issue_type = 'Task', 
                        issue_template_dir = '', 
                        epic_name_id = -2147483648, 
                        open_status_key = -2147483648, 
                        close_status_key = -2147483648, 
                        info_mapping_severity = '', 
                        low_mapping_severity = '', 
                        medium_mapping_severity = '', 
                        high_mapping_severity = '', 
                        critical_mapping_severity = '', 
                        finding_text = '', 
                        accepted_mapping_resolution = '', 
                        false_positive_mapping_resolution = '', 
                        global_jira_sla_notification = True, 
                        finding_jira_sync = True, )
                    },
                product = {
                    'key' : defectdojo_api_generated.models.product.Product(
                        id = 56, 
                        findings_count = 56, 
                        findings_list = [
                            56
                            ], 
                        tags = [
                            ''
                            ], 
                        product_meta = [
                            defectdojo_api_generated.models.product_meta.ProductMeta(
                                name = '', 
                                value = '', )
                            ], 
                        name = '', 
                        description = '', 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        prod_numeric_grade = -2147483648, 
                        business_criticality = 'very high', 
                        platform = 'web service', 
                        lifecycle = 'construction', 
                        origin = 'third party library', 
                        user_records = 0, 
                        revenue = '-8072888001.', 
                        external_audience = True, 
                        internet_accessible = True, 
                        enable_product_tag_inheritance = True, 
                        enable_simple_risk_acceptance = True, 
                        enable_full_risk_acceptance = True, 
                        disable_sla_breach_notifications = True, 
                        product_manager = 56, 
                        technical_contact = 56, 
                        team_manager = 56, 
                        prod_type = 56, 
                        sla_configuration = 56, 
                        members = [
                            56
                            ], 
                        authorization_groups = [
                            56
                            ], 
                        regulations = [
                            56
                            ], 
                        prefetch = defectdojo_api_generated.models.paginated_product_list_prefetch.PaginatedProductList_prefetch(
                            prod_type = {
                                'key' : defectdojo_api_generated.models.product_type.ProductType(
                                    id = 56, 
                                    name = '', 
                                    description = '', 
                                    critical_product = True, 
                                    key_product = True, 
                                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    members = [
                                        56
                                        ], 
                                    authorization_groups = [
                                        56
                                        ], )
                                }, 
                            product_manager = {
                                'key' : defectdojo_api_generated.models.user_stub.UserStub(
                                    id = 56, 
                                    username = 'A', 
                                    first_name = '', 
                                    last_name = '', )
                                }, 
                            sla_configuration = {
                                'key' : defectdojo_api_generated.models.sla_configuration.SLAConfiguration(
                                    id = 56, 
                                    name = '', 
                                    description = '', 
                                    critical = -2147483648, 
                                    enforce_critical = True, 
                                    high = -2147483648, 
                                    enforce_high = True, 
                                    medium = -2147483648, 
                                    enforce_medium = True, 
                                    low = -2147483648, 
                                    enforce_low = True, )
                                }, 
                            team_manager = {
                                'key' : defectdojo_api_generated.models.user_stub.UserStub(
                                    id = 56, 
                                    username = 'A', 
                                    first_name = '', 
                                    last_name = '', )
                                }, 
                            technical_contact = {
                                'key' : 
                                }, ), )
                    }
            )
        else:
            return JIRAProjectPrefetch(
        )
        """

    def testJIRAProjectPrefetch(self):
        """Test JIRAProjectPrefetch"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
