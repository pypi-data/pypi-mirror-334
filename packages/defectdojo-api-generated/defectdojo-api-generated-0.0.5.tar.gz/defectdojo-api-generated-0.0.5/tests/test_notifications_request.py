# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

The version of the OpenAPI document: 2.44.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from defectdojo_api_generated.models.notifications_request import NotificationsRequest


class TestNotificationsRequest(unittest.TestCase):
    """NotificationsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotificationsRequest:
        """Test NotificationsRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `NotificationsRequest`
        """
        model = NotificationsRequest()
        if include_optional:
            return NotificationsRequest(
                product = 56,
                user = 56,
                product_type_added = [
                    'slack'
                    ],
                product_added = [
                    'slack'
                    ],
                engagement_added = [
                    'slack'
                    ],
                test_added = [
                    'slack'
                    ],
                scan_added = [
                    'slack'
                    ],
                jira_update = [
                    'slack'
                    ],
                upcoming_engagement = [
                    'slack'
                    ],
                stale_engagement = [
                    'slack'
                    ],
                auto_close_engagement = [
                    'slack'
                    ],
                close_engagement = [
                    'slack'
                    ],
                user_mentioned = [
                    'slack'
                    ],
                code_review = [
                    'slack'
                    ],
                review_requested = [
                    'slack'
                    ],
                other = [
                    'slack'
                    ],
                sla_breach = [
                    'slack'
                    ],
                sla_breach_combined = [
                    'slack'
                    ],
                risk_acceptance_expiration = [
                    'slack'
                    ],
                template = True,
                scan_added_empty = 'slack'
            )
        else:
            return NotificationsRequest(
        )
        """

    def testNotificationsRequest(self):
        """Test NotificationsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
