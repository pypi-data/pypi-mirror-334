# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

The version of the OpenAPI document: 2.44.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from defectdojo_api_generated.models.finding import Finding


class TestFinding(unittest.TestCase):
    """Finding unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Finding:
        """Test Finding
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `Finding`
        """
        model = Finding()
        if include_optional:
            return Finding(
                id = 56,
                tags = [
                    ''
                    ],
                request_response = defectdojo_api_generated.models.burp_raw_request_response.BurpRawRequestResponse(
                    req_resp = [
                        {
                            'key' : ''
                            }
                        ], ),
                accepted_risks = [
                    defectdojo_api_generated.models.risk_acceptance.RiskAcceptance(
                        id = 56, 
                        recommendation = '', 
                        decision = '', 
                        path = '', 
                        name = '', 
                        recommendation_details = '', 
                        decision_details = '', 
                        accepted_by = '', 
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date_warned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date_handled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        reactivate_expired = True, 
                        restart_sla_expired = True, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        owner = 56, 
                        accepted_findings = [
                            56
                            ], 
                        notes = [
                            56
                            ], )
                    ],
                push_to_jira = True,
                age = 56,
                sla_days_remaining = 56,
                finding_meta = [
                    defectdojo_api_generated.models.finding_meta.FindingMeta(
                        name = '', 
                        value = '', )
                    ],
                related_fields = defectdojo_api_generated.models.finding_related_fields.FindingRelatedFields(
                    test = null, 
                    jira = null, ),
                jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                display_status = '',
                finding_groups = [
                    defectdojo_api_generated.models.finding_group.FindingGroup(
                        id = 56, 
                        name = '', 
                        test = 56, 
                        jira_issue = null, )
                    ],
                vulnerability_ids = [
                    defectdojo_api_generated.models.vulnerability_id.VulnerabilityId(
                        vulnerability_id = '', )
                    ],
                reporter = 56,
                title = '',
                var_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                sla_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                sla_expiration_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                cwe = -2147483648,
                epss_score = 0.0,
                epss_percentile = 0.0,
                cvssv3 = 'PR:U',
                cvssv3_score = 0.0,
                url = '',
                severity = '',
                description = '',
                mitigation = '',
                impact = '',
                steps_to_reproduce = '',
                severity_justification = '',
                references = '',
                active = True,
                verified = True,
                false_p = True,
                duplicate = True,
                out_of_scope = True,
                risk_accepted = True,
                under_review = True,
                last_status_update = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                under_defect_review = True,
                is_mitigated = True,
                thread_id = 56,
                mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                numerical_severity = '',
                last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                param = '',
                payload = '',
                hash_code = '',
                line = -2147483648,
                file_path = '',
                component_name = '',
                component_version = '',
                static_finding = True,
                dynamic_finding = True,
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                scanner_confidence = 56,
                unique_id_from_tool = '',
                vuln_id_from_tool = '',
                sast_source_object = '',
                sast_sink_object = '',
                sast_source_line = -2147483648,
                sast_source_file_path = '',
                nb_occurences = -2147483648,
                publish_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                service = '',
                planned_remediation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                planned_remediation_version = '',
                effort_for_fixing = '',
                test = 56,
                duplicate_finding = 56,
                review_requested_by = 56,
                defect_review_requested_by = 56,
                mitigated_by = 56,
                last_reviewed_by = 56,
                sonarqube_issue = 56,
                endpoints = [
                    56
                    ],
                reviewers = [
                    56
                    ],
                notes = [
                    defectdojo_api_generated.models.note.Note(
                        id = 56, 
                        author = null, 
                        editor = null, 
                        history = [
                            defectdojo_api_generated.models.note_history.NoteHistory(
                                id = 56, 
                                current_editor = null, 
                                note_type = null, 
                                data = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        note_type = null, 
                        entry = '', 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        private = True, 
                        edited = True, 
                        edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                files = [
                    56
                    ],
                found_by = [
                    56
                    ],
                prefetch = defectdojo_api_generated.models.finding_prefetch.Finding_prefetch(
                    auth_issues = {
                        'key' : defectdojo_api_generated.models.engagement_check_list.EngagementCheckList(
                            id = 56, 
                            session_management = '', 
                            encryption_crypto = '', 
                            configuration_management = '', 
                            authentication = '', 
                            authorization_and_access_control = '', 
                            data_input_sanitization_validation = '', 
                            sensitive_data = '', 
                            other = '', 
                            engagement = 56, 
                            session_issues = [
                                56
                                ], 
                            crypto_issues = [
                                56
                                ], 
                            config_issues = [
                                56
                                ], 
                            author_issues = [
                                56
                                ], 
                            data_issues = [
                                56
                                ], 
                            sensitive_issues = [
                                56
                                ], 
                            other_issues = [
                                56
                                ], )
                        }, 
                    author_issues = {
                        'key' : defectdojo_api_generated.models.engagement_check_list.EngagementCheckList(
                            id = 56, 
                            session_management = '', 
                            encryption_crypto = '', 
                            configuration_management = '', 
                            authentication = '', 
                            authorization_and_access_control = '', 
                            data_input_sanitization_validation = '', 
                            sensitive_data = '', 
                            other = '', 
                            engagement = 56, )
                        }, 
                    config_issues = {
                        'key' : 
                        }, 
                    crypto_issues = {
                        'key' : 
                        }, 
                    data_issues = {
                        'key' : 
                        }, 
                    defect_review_requested_by = {
                        'key' : defectdojo_api_generated.models.user_stub.UserStub(
                            id = 56, 
                            username = 'A', 
                            first_name = '', 
                            last_name = '', )
                        }, 
                    duplicate_finding = {
                        'key' : defectdojo_api_generated.models.finding.Finding(
                            id = 56, 
                            tags = [
                                ''
                                ], 
                            request_response = null, 
                            accepted_risks = [
                                defectdojo_api_generated.models.risk_acceptance.RiskAcceptance(
                                    id = 56, 
                                    recommendation = '', 
                                    decision = '', 
                                    path = '', 
                                    name = '', 
                                    recommendation_details = '', 
                                    decision_details = '', 
                                    accepted_by = '', 
                                    expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    expiration_date_warned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    expiration_date_handled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    reactivate_expired = True, 
                                    restart_sla_expired = True, 
                                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    owner = 56, 
                                    accepted_findings = [
                                        56
                                        ], 
                                    notes = [
                                        56
                                        ], )
                                ], 
                            push_to_jira = True, 
                            age = 56, 
                            sla_days_remaining = 56, 
                            finding_meta = [
                                defectdojo_api_generated.models.finding_meta.FindingMeta(
                                    name = '', 
                                    value = '', )
                                ], 
                            related_fields = null, 
                            jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            display_status = '', 
                            finding_groups = [
                                defectdojo_api_generated.models.finding_group.FindingGroup(
                                    id = 56, 
                                    name = '', 
                                    test = 56, 
                                    jira_issue = null, )
                                ], 
                            vulnerability_ids = [
                                defectdojo_api_generated.models.vulnerability_id.VulnerabilityId(
                                    vulnerability_id = '', )
                                ], 
                            reporter = 56, 
                            title = '', 
                            date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            sla_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            sla_expiration_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            cwe = -2147483648, 
                            epss_score = 0.0, 
                            epss_percentile = 0.0, 
                            cvssv3 = 'PR:U', 
                            cvssv3_score = 0.0, 
                            url = '', 
                            severity = '', 
                            description = '', 
                            mitigation = '', 
                            impact = '', 
                            steps_to_reproduce = '', 
                            severity_justification = '', 
                            references = '', 
                            active = True, 
                            verified = True, 
                            false_p = True, 
                            duplicate = True, 
                            out_of_scope = True, 
                            risk_accepted = True, 
                            under_review = True, 
                            last_status_update = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            under_defect_review = True, 
                            is_mitigated = True, 
                            thread_id = 56, 
                            mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            numerical_severity = '', 
                            last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            param = '', 
                            payload = '', 
                            hash_code = '', 
                            line = -2147483648, 
                            file_path = '', 
                            component_name = '', 
                            component_version = '', 
                            static_finding = True, 
                            dynamic_finding = True, 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            scanner_confidence = 56, 
                            unique_id_from_tool = '', 
                            vuln_id_from_tool = '', 
                            sast_source_object = '', 
                            sast_sink_object = '', 
                            sast_source_line = -2147483648, 
                            sast_source_file_path = '', 
                            nb_occurences = -2147483648, 
                            publish_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            service = '', 
                            planned_remediation_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            planned_remediation_version = '', 
                            effort_for_fixing = '', 
                            test = 56, 
                            duplicate_finding = 56, 
                            review_requested_by = 56, 
                            mitigated_by = 56, 
                            last_reviewed_by = 56, 
                            sonarqube_issue = 56, 
                            endpoints = [
                                56
                                ], 
                            reviewers = [
                                56
                                ], 
                            notes = [
                                defectdojo_api_generated.models.note.Note(
                                    id = 56, 
                                    author = null, 
                                    editor = null, 
                                    history = [
                                        defectdojo_api_generated.models.note_history.NoteHistory(
                                            id = 56, 
                                            current_editor = null, 
                                            note_type = null, 
                                            data = '', 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], 
                                    note_type = null, 
                                    entry = '', 
                                    date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    private = True, 
                                    edited = True, 
                                    edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            files = [
                                56
                                ], 
                            found_by = [
                                56
                                ], 
                            prefetch = defectdojo_api_generated.models.finding_prefetch.Finding_prefetch(
                                endpoint_set = {
                                    'key' : defectdojo_api_generated.models.endpoint.Endpoint(
                                        id = 56, 
                                        protocol = '', 
                                        userinfo = '', 
                                        host = '', 
                                        port = -2147483648, 
                                        path = '', 
                                        query = '', 
                                        fragment = '', 
                                        product = 56, 
                                        endpoint_params = [
                                            56
                                            ], 
                                        findings = [
                                            56
                                            ], )
                                    }, 
                                finding_group_set = {
                                    'key' : defectdojo_api_generated.models.finding_group.FindingGroup(
                                        id = 56, 
                                        name = '', 
                                        test = 56, 
                                        jira_issue = null, )
                                    }, 
                                last_reviewed_by = {
                                    'key' : defectdojo_api_generated.models.user_stub.UserStub(
                                        id = 56, 
                                        username = 'A', 
                                        first_name = '', 
                                        last_name = '', )
                                    }, 
                                mitigated_by = {
                                    'key' : 
                                    }, 
                                reporter = {
                                    'key' : 
                                    }, 
                                review_requested_by = {
                                    'key' : 
                                    }, 
                                risk_acceptance_set = {
                                    'key' : defectdojo_api_generated.models.risk_acceptance.RiskAcceptance(
                                        id = 56, 
                                        recommendation = '', 
                                        decision = '', 
                                        path = '', 
                                        name = '', 
                                        recommendation_details = '', 
                                        decision_details = '', 
                                        accepted_by = '', 
                                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        expiration_date_warned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        expiration_date_handled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        reactivate_expired = True, 
                                        restart_sla_expired = True, 
                                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        owner = 56, 
                                        accepted_findings = [
                                            56
                                            ], 
                                        notes = [
                                            56
                                            ], )
                                    }, 
                                sonarqube_issue = {
                                    'key' : defectdojo_api_generated.models.sonarqube_issue.SonarqubeIssue(
                                        id = 56, 
                                        key = '', 
                                        status = '', 
                                        type = '', )
                                    }, 
                                test = {
                                    'key' : defectdojo_api_generated.models.test.Test(
                                        id = 56, 
                                        test_type_name = '', 
                                        finding_groups = [
                                            
                                            ], 
                                        scan_type = '', 
                                        title = '', 
                                        description = '', 
                                        target_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        target_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        estimated_time = '', 
                                        actual_time = '', 
                                        percent_complete = -2147483648, 
                                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        version = '', 
                                        build_id = '', 
                                        commit_hash = '', 
                                        branch_tag = '', 
                                        engagement = 56, 
                                        lead = 56, 
                                        test_type = 56, 
                                        environment = 56, 
                                        api_scan_configuration = 56, 
                                        notes = [
                                            defectdojo_api_generated.models.note.Note(
                                                id = 56, 
                                                author = null, 
                                                editor = null, 
                                                history = [
                                                    defectdojo_api_generated.models.note_history.NoteHistory(
                                                        id = 56, 
                                                        current_editor = null, 
                                                        note_type = null, 
                                                        data = '', 
                                                        time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                    ], 
                                                note_type = null, 
                                                entry = '', 
                                                date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                private = True, 
                                                edited = True, 
                                                edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                            ], 
                                        files = [
                                            defectdojo_api_generated.models.file.File(
                                                id = 56, 
                                                file = '', 
                                                title = '', )
                                            ], )
                                    }, 
                                test_import_set = {
                                    'key' : defectdojo_api_generated.models.test_import.TestImport(
                                        id = 56, 
                                        test_import_finding_action_set = [
                                            defectdojo_api_generated.models.test_import_finding_action.TestImportFindingAction(
                                                id = 56, 
                                                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                action = 'N', 
                                                test_import = 56, 
                                                finding = 56, )
                                            ], 
                                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        import_settings = null, 
                                        type = '', 
                                        version = '', 
                                        build_id = '', 
                                        commit_hash = '', 
                                        branch_tag = '', 
                                        test = 56, 
                                        findings_affected = [
                                            56
                                            ], )
                                    }, ), )
                        }, 
                    endpoint_set = {
                        'key' : defectdojo_api_generated.models.endpoint.Endpoint(
                            id = 56, 
                            protocol = '', 
                            userinfo = '', 
                            host = '', 
                            port = -2147483648, 
                            path = '', 
                            query = '', 
                            fragment = '', 
                            product = 56, 
                            endpoint_params = [
                                56
                                ], 
                            findings = [
                                56
                                ], )
                        }, 
                    endpoints = {
                        'key' : 
                        }, 
                    files = {
                        'key' : defectdojo_api_generated.models.file.File(
                            id = 56, 
                            file = '', 
                            title = '', )
                        }, 
                    finding_group_set = {
                        'key' : 
                        }, 
                    found_by = {
                        'key' : defectdojo_api_generated.models.test_type.TestType(
                            id = 56, 
                            name = '', 
                            static_tool = True, 
                            dynamic_tool = True, 
                            active = True, )
                        }, 
                    last_reviewed_by = {
                        'key' : 
                        }, 
                    mitigated_by = {
                        'key' : 
                        }, 
                    notes = {
                        'key' : 
                        }, 
                    other_issues = {
                        'key' : 
                        }, 
                    reporter = {
                        'key' : 
                        }, 
                    review_requested_by = {
                        'key' : 
                        }, 
                    reviewers = {
                        'key' : 
                        }, 
                    risk_acceptance_set = {
                        'key' : 
                        }, 
                    sensitive_issues = {
                        'key' : 
                        }, 
                    session_issues = {
                        'key' : 
                        }, 
                    sonarqube_issue = {
                        'key' : defectdojo_api_generated.models.sonarqube_issue.SonarqubeIssue(
                            id = 56, 
                            key = '', 
                            status = '', 
                            type = '', )
                        }, 
                    test = {
                        'key' : defectdojo_api_generated.models.test.Test(
                            id = 56, 
                            test_type_name = '', 
                            finding_groups = , 
                            scan_type = '', 
                            title = '', 
                            description = '', 
                            target_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            target_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            estimated_time = '', 
                            actual_time = '', 
                            percent_complete = -2147483648, 
                            updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            version = '', 
                            build_id = '', 
                            commit_hash = '', 
                            branch_tag = '', 
                            engagement = 56, 
                            lead = 56, 
                            test_type = 56, 
                            environment = 56, 
                            api_scan_configuration = 56, 
                            notes = , 
                            files = [
                                
                                ], )
                        }, 
                    test_import_set = {
                        'key' : defectdojo_api_generated.models.test_import.TestImport(
                            id = 56, 
                            test_import_finding_action_set = [
                                defectdojo_api_generated.models.test_import_finding_action.TestImportFindingAction(
                                    id = 56, 
                                    created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    action = 'N', 
                                    test_import = 56, 
                                    finding = 56, )
                                ], 
                            created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            modified = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            import_settings = null, 
                            type = '', 
                            version = '', 
                            build_id = '', 
                            commit_hash = '', 
                            branch_tag = '', 
                            test = 56, 
                            findings_affected = [
                                56
                                ], )
                        }, )
            )
        else:
            return Finding(
                id = 56,
                request_response = defectdojo_api_generated.models.burp_raw_request_response.BurpRawRequestResponse(
                    req_resp = [
                        {
                            'key' : ''
                            }
                        ], ),
                accepted_risks = [
                    defectdojo_api_generated.models.risk_acceptance.RiskAcceptance(
                        id = 56, 
                        recommendation = '', 
                        decision = '', 
                        path = '', 
                        name = '', 
                        recommendation_details = '', 
                        decision_details = '', 
                        accepted_by = '', 
                        expiration_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date_warned = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        expiration_date_handled = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        reactivate_expired = True, 
                        restart_sla_expired = True, 
                        created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        owner = 56, 
                        accepted_findings = [
                            56
                            ], 
                        notes = [
                            56
                            ], )
                    ],
                age = 56,
                sla_days_remaining = 56,
                finding_meta = [
                    defectdojo_api_generated.models.finding_meta.FindingMeta(
                        name = '', 
                        value = '', )
                    ],
                related_fields = defectdojo_api_generated.models.finding_related_fields.FindingRelatedFields(
                    test = null, 
                    jira = null, ),
                jira_creation = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                jira_change = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                display_status = '',
                finding_groups = [
                    defectdojo_api_generated.models.finding_group.FindingGroup(
                        id = 56, 
                        name = '', 
                        test = 56, 
                        jira_issue = null, )
                    ],
                title = '',
                url = '',
                severity = '',
                description = '',
                last_status_update = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                thread_id = 56,
                mitigated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                numerical_severity = '',
                last_reviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                param = '',
                payload = '',
                hash_code = '',
                created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                scanner_confidence = 56,
                test = 56,
                duplicate_finding = 56,
                mitigated_by = 56,
                last_reviewed_by = 56,
                endpoints = [
                    56
                    ],
                notes = [
                    defectdojo_api_generated.models.note.Note(
                        id = 56, 
                        author = null, 
                        editor = null, 
                        history = [
                            defectdojo_api_generated.models.note_history.NoteHistory(
                                id = 56, 
                                current_editor = null, 
                                note_type = null, 
                                data = '', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        note_type = null, 
                        entry = '', 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        private = True, 
                        edited = True, 
                        edit_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                files = [
                    56
                    ],
                found_by = [
                    56
                    ],
        )
        """

    def testFinding(self):
        """Test Finding"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
