# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

The version of the OpenAPI document: 2.44.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from defectdojo_api_generated.api.findings_api import FindingsApi


class TestFindingsApi(unittest.TestCase):
    """FindingsApi unit test stubs"""

    def setUp(self) -> None:
        self.api = FindingsApi()

    def tearDown(self) -> None:
        pass

    def test_findings_accept_risks_create(self) -> None:
        """Test case for findings_accept_risks_create"""
        pass

    def test_findings_close_create(self) -> None:
        """Test case for findings_close_create"""
        pass

    def test_findings_create(self) -> None:
        """Test case for findings_create"""
        pass

    def test_findings_delete_preview_list(self) -> None:
        """Test case for findings_delete_preview_list"""
        pass

    def test_findings_destroy(self) -> None:
        """Test case for findings_destroy"""
        pass

    def test_findings_duplicate_list(self) -> None:
        """Test case for findings_duplicate_list"""
        pass

    def test_findings_duplicate_reset_create(self) -> None:
        """Test case for findings_duplicate_reset_create"""
        pass

    def test_findings_files_create(self) -> None:
        """Test case for findings_files_create"""
        pass

    def test_findings_files_download_retrieve(self) -> None:
        """Test case for findings_files_download_retrieve"""
        pass

    def test_findings_files_retrieve(self) -> None:
        """Test case for findings_files_retrieve"""
        pass

    def test_findings_generate_report_create(self) -> None:
        """Test case for findings_generate_report_create"""
        pass

    def test_findings_list(self) -> None:
        """Test case for findings_list"""
        pass

    def test_findings_metadata_create(self) -> None:
        """Test case for findings_metadata_create"""
        pass

    def test_findings_metadata_destroy(self) -> None:
        """Test case for findings_metadata_destroy"""
        pass

    def test_findings_metadata_list(self) -> None:
        """Test case for findings_metadata_list"""
        pass

    def test_findings_metadata_update(self) -> None:
        """Test case for findings_metadata_update"""
        pass

    def test_findings_notes_create(self) -> None:
        """Test case for findings_notes_create"""
        pass

    def test_findings_notes_retrieve(self) -> None:
        """Test case for findings_notes_retrieve"""
        pass

    def test_findings_original_create(self) -> None:
        """Test case for findings_original_create"""
        pass

    def test_findings_partial_update(self) -> None:
        """Test case for findings_partial_update"""
        pass

    def test_findings_remove_note_partial_update(self) -> None:
        """Test case for findings_remove_note_partial_update"""
        pass

    def test_findings_remove_tags_partial_update(self) -> None:
        """Test case for findings_remove_tags_partial_update"""
        pass

    def test_findings_remove_tags_update(self) -> None:
        """Test case for findings_remove_tags_update"""
        pass

    def test_findings_request_response_create(self) -> None:
        """Test case for findings_request_response_create"""
        pass

    def test_findings_request_response_retrieve(self) -> None:
        """Test case for findings_request_response_retrieve"""
        pass

    def test_findings_retrieve(self) -> None:
        """Test case for findings_retrieve"""
        pass

    def test_findings_tags_create(self) -> None:
        """Test case for findings_tags_create"""
        pass

    def test_findings_tags_retrieve(self) -> None:
        """Test case for findings_tags_retrieve"""
        pass

    def test_findings_update(self) -> None:
        """Test case for findings_update"""
        pass


if __name__ == '__main__':
    unittest.main()
