# coding: utf-8

"""
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

The version of the OpenAPI document: 2.44.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

import unittest

from defectdojo_api_generated.models.patched_jira_project_request import PatchedJIRAProjectRequest


class TestPatchedJIRAProjectRequest(unittest.TestCase):
    """PatchedJIRAProjectRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatchedJIRAProjectRequest:
        """Test PatchedJIRAProjectRequest
        include_optional is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `PatchedJIRAProjectRequest`
        """
        model = PatchedJIRAProjectRequest()
        if include_optional:
            return PatchedJIRAProjectRequest(
                project_key = '',
                issue_template_dir = '',
                component = '',
                custom_fields = None,
                default_assignee = '',
                jira_labels = '',
                add_vulnerability_id_to_jira_label = True,
                push_all_issues = True,
                enable_engagement_epic_mapping = True,
                epic_issue_type_name = '',
                push_notes = True,
                product_jira_sla_notification = True,
                risk_acceptance_expiration_notification = True,
                enabled = True,
                jira_instance = 56,
                product = 56,
                engagement = 56
            )
        else:
            return PatchedJIRAProjectRequest(
        )
        """

    def testPatchedJIRAProjectRequest(self):
        """Test PatchedJIRAProjectRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
