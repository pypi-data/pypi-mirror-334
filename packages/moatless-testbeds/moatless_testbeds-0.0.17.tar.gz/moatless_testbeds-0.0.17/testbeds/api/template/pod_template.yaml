apiVersion: batch/v1
kind: Job
metadata:
  name: {{ job_name }}
  namespace: {{ namespace }}
  labels:
    testbed-id: {{ testbed_id }}
    user-id: {{ user_id }}
    run-id: {{ run_id }}
    instance-id: {{ instance_id }}
spec:
  template:
    spec:
      serviceAccountName: testbed-sa
      containers:
      - name: testbed
        image: {{ testbed_image }}
        imagePullPolicy: IfNotPresent
        command: [ "/bin/bash" ]
        args:
          - -c
          - |
            echo "Initating testbed"
            {% for command in init_env_commands %}
            {{ command }}
            {% endfor %}
            echo "Started testbed"
            touch /shared/started
            while true; do
              if [ -f /shared/run_cmd.sh ]; then
                echo "Starting /shared/run_cmd.sh"
                touch /shared/cmd_output.txt
                /shared/run_cmd.sh 2>&1 | tee /shared/cmd_output.txt
                rm /shared/run_cmd.sh
                touch /shared/complete_cmd
                echo "Finished /shared/run_cmd.sh"
              elif [ -f /shared/kill ]; then
                echo "Kill command received. Exiting."
                exit 0
              fi
              sleep 0.1
            done
        startupProbe:
          exec:
            command:
              - cat
              - /shared/started
          failureThreshold: 600
          periodSeconds: 1
        livenessProbe:
          exec:
            command:
              - cat
              - /shared/started
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ request_cpu }}"
            memory: "{{ request_memory }}"
          limits:
            # cpu: "{{ limit_cpu }}"
            memory: "{{ limit_memory }}"
        volumeMounts:
        - name: shared-volume
          mountPath: /shared
      - name: sidecar
        image: {{ sidecar_image }}
        imagePullPolicy: Always
        serviceAccountName: testbed-sidecar-sa
        ports:
        - containerPort: 8000
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          failureThreshold: 1
          periodSeconds: 10
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          failureThreshold: 30
          periodSeconds: 10
        volumeMounts:
        - name: shared-volume
          mountPath: /shared
        env:
        - name: HTTP_PORT
          value: "8000"
        - name: KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: USER_ID
          value: "{{ user_id }}"
        - name: INSTANCE_ID
          value: "{{ instance_id }}"
        - name: TESTBED_ID
          value: "{{ testbed_id }}"
        #- name: APPLICATIONINSIGHTS_CONNECTION_STRING
        #  valueFrom:
        #    secretKeyRef:
        #      name: testbed-secrets
        #      key: AZURE_APPLICATIONINSIGHTS_CONNECTION_STRING
      nodeSelector:
        node-purpose: testbeds
      restartPolicy: OnFailure
      volumes:
      - name: shared-volume
        emptyDir: {}
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node-purpose"
        value: "testbeds"
        operator: "Equal"
        effect: "NoSchedule"
      - key: "karpenter.sh/unregistered"
        operator: "Exists"
        effect: "NoSchedule"
  backoffLimit: 4