[tox]
envlist = py3{8,9,10,11,12,13}-{linux,macos,windows}
skip_missing_interpreters = true
isolated_build = true
skipsdist = true

[gh-actions]
python =
    3.8: py38
    3.9: py39
    3.10: py310
    3.11: py311
    3.12: py312
    3.13: py313

[gh-actions:env]
PLATFORM =
    ubuntu-20.04: linux
    macos-latest: macos
    windows-latest: windows

[base]
deps =
    pip>=21.1
    setuptools_scm

[testenv]
passenv = CI,PYTHON,PYTHONIOENCODING
allowlist_externals = bash

deps =
    {[base]deps}
    .[test,cov]

commands =
    python -m pytest . --capture=no --doctest-modules --doctest-glob="*.rst" --doctest-glob="*.py" --cov pystache --cov-branch --cov-report term-missing
    coverage xml
    bash -c './gh/fix_pkg_name.sh'

[testenv:bare]
# Change the working directory so that we don't import the pystache located
# in the original location.
deps =
    {[base]deps}
    -e .

changedir =
    {envbindir}

commands =
    pystache-test

[testenv:bench]
passenv = CI,PYTHON,PYTHONIOENCODING

deps =
    {[base]deps}
    # uncomment for comparison, posargs expects a number, eg, 10000
    #chevron

commands_pre =
    pip install .

commands =
    python pystache/tests/benchmark.py {posargs:10000}

[testenv:setup]
passenv = CI,PYTHON,PYTHONIOENCODING

deps =
    {[base]deps}
    pyyaml

# this is becoming even more deprecated (possibly failing) BUT,
# to run the spec tests, first init the git submodule, and then run
# something like: tox -e setup ext/spec/specs
commands =
    python -m pip install .
    pystache-test {toxinidir} {posargs}

[testenv:lint]
passenv = CI,PYTHON,PYTHONIOENCODING

deps =
    {[base]deps}
    pylint

commands_pre =
    # need to generate version info in a fresh checkout
    python setup.py egg_info

commands =
    pylint --rcfile={toxinidir}/.pylintrc --fail-under=8.00 pystache/

[testenv:style]
passenv = CI,PYTHON,PYTHONIOENCODING

deps =
    {[base]deps}
    flake8

commands =
    flake8 pystache/

[testenv:build]
passenv = CI,PYTHON,PYTHONIOENCODING

deps =
    pip>=22.1
    build
    twine

commands =
    python -m build .
    twine check dist/*

[testenv:check]
passenv = CI,PYTHON,PYTHONIOENCODING
skip_install = true

allowlist_externals = bash

deps =
    pip>=22.1

commands =
    pip install pystache --force-reinstall --pre --prefer-binary -f dist/
    pystache-test

[testenv:docs]
skip_install = true
allowlist_externals =
    bash
    make

deps =
    {[base]deps}
    .[doc]

commands_pre =
    # need to generate version info in a fresh checkout
    bash -c '[[ -f pystache/_version.py ]] || python setup.py egg_info'

commands = make -C docs html

[testenv:docs-lint]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

deps =
    {[testenv:docs]deps}

commands_pre =
    {[testenv:docs]commands_pre}

commands = make -C docs linkcheck

[testenv:changes]
skip_install = true
allowlist_externals =
    {[testenv:docs]allowlist_externals}

passenv =
    CI
    OS
    PIP_DOWNLOAD_CACHE

setenv =
    VERSION = {env:VERSION}

deps =
    {[base]deps}
    git+https://github.com/sarnold/gitchangelog.git@master

commands =
    bash -c 'gitchangelog {posargs} > CHANGELOG.rst'

[testenv:sec]
passenv = CI,PYTHON,PYTHONIOENCODING
skip_install = true

deps =
    {[base]deps}
    bandit

commands_pre =
    # need to generate version info in a fresh checkout
    python setup.py egg_info

commands =
    bandit -r pystache/ -x pystache/tests

[testenv:isort]
skip_install = true

setenv = PYTHONPATH = {toxinidir}

deps =
    {[base]deps}
    isort

commands =
    python -m isort pystache/

[testenv:clean]
skip_install = true
allowlist_externals = bash

deps =
    pip>=21.1

commands =
    bash -c 'make -C docs/ clean'
    bash -c 'rm -rf build/ dist/ pystache.egg-info/ pystache/_version.py docs/source/api/'
