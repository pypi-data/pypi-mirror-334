--- /home/andreas/tetgen1.4.2/tetgen.h	2007-04-16 10:45:13.000000000 -0400
+++ ../src/cpp/tetgen.h	2007-08-19 03:03:45.000000000 -0400
@@ -87,6 +87,7 @@
 #include <math.h>                     // Math lib: sin(), sqrt(), pow(), ...
 #include <time.h>           // Defined type clock_t, constant CLOCKS_PER_SEC.
 #include <assert.h> 
+#include <boost/noncopyable.hpp>
 
 ///////////////////////////////////////////////////////////////////////////////
 //                                                                           //
@@ -194,10 +195,13 @@
     // 'vertexlist' is a list of vertex indices (integers), its length is
     //   indicated by 'numberofvertices'.  The vertex indices are odered in
     //   either counterclockwise or clockwise way.
-    typedef struct {
+    struct polygon : public boost::noncopyable {
       int *vertexlist;
       int numberofvertices;
-    } polygon;
+
+      polygon();
+      ~polygon();
+    };
 
     static void init(polygon* p) {
       p->vertexlist = (int *) NULL;
@@ -208,12 +212,15 @@
     //   to represent a planar straight line graph (PSLG) in two dimension.
     //   A PSLG contains a list of polygons. It also may conatin holes in it,
     //   indicated by a list of hole points (their coordinates).
-    typedef struct {
+    struct facet {
       polygon *polygonlist;
       int numberofpolygons;
       REAL *holelist;
       int numberofholes;
-    } facet;
+
+      facet();
+      ~facet();
+    };
 
     static void init(facet* f) {
       f->polygonlist = (polygon *) NULL;
@@ -253,12 +260,15 @@
     //   maps a point in f1 into f2.  An array of pbc point pairs are saved
     //   in 'pointpairlist'. The first point pair is at indices [0] and [1],
     //   followed by remaining pairs. Two integers per pair.
-    typedef struct {
+    struct pbcgroup {
       int fmark1, fmark2;
       REAL transmat[4][4];
       int numberofpointpairs;
       int *pointpairlist;
-    } pbcgroup;
+
+      pbcgroup();
+      ~pbcgroup();
+    };
 
   public:
 
@@ -568,6 +578,7 @@
 ///////////////////////////////////////////////////////////////////////////////
 
 REAL exactinit();
+void exactdeinit();
 REAL orient3d(REAL *pa, REAL *pb, REAL *pc, REAL *pd);
 REAL insphere(REAL *pa, REAL *pb, REAL *pc, REAL *pd, REAL *pe);
 
--- /home/andreas/tetgen1.4.2/tetgen.cxx	2007-04-16 10:45:11.000000000 -0400
+++ ../src/cpp/tetgen.cpp	2007-08-19 03:05:28.000000000 -0400
@@ -49,6 +49,45 @@
 // Begin of class 'tetgenio' implementation
 //
 
+tetgenio::polygon::polygon()
+{
+  vertexlist = 0;
+  numberofvertices = 0;
+}
+
+tetgenio::polygon::~polygon()
+{
+  if (vertexlist)
+    delete [] vertexlist;
+}
+
+tetgenio::facet::facet()
+{
+  polygonlist = 0;
+  numberofpolygons = 0;
+  holelist = 0;
+  numberofholes = 0;
+}
+
+tetgenio::facet::~facet()
+{
+  if (polygonlist)
+    delete[] polygonlist;
+  if (holelist)
+    delete[] holelist;
+}
+
+tetgenio::pbcgroup::pbcgroup()
+{ 
+  numberofpointpairs = 0;
+  pointpairlist = 0;
+}
+
+tetgenio::pbcgroup::~pbcgroup()
+{
+  delete[] pointpairlist;
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 //                                                                           //
 // initialize()    Initialize all variables of 'tetgenio'.                   //
@@ -143,6 +182,7 @@
   pbcgroup *pg;
   int i, j;
 
+  using namespace std;
   if (pointlist != (REAL *) NULL) {
     delete [] pointlist;
   }
@@ -187,19 +227,9 @@
   }
 
   if (facetlist != (facet *) NULL) {
-    for (i = 0; i < numberoffacets; i++) {
-      f = &facetlist[i];
-      for (j = 0; j < f->numberofpolygons; j++) {
-        p = &f->polygonlist[j];
-        delete [] p->vertexlist;
-      }
-      delete [] f->polygonlist;
-      if (f->holelist != (REAL *) NULL) {
-        delete [] f->holelist;
-      }
-    }
     delete [] facetlist;
   }
+
   if (facetmarkerlist != (int *) NULL) {
     delete [] facetmarkerlist;
   }
@@ -217,12 +247,6 @@
     delete [] segmentconstraintlist;
   }
   if (pbcgrouplist != (pbcgroup *) NULL) {
-    for (i = 0; i < numberofpbcgroups; i++) {
-      pg = &(pbcgrouplist[i]);
-      if (pg->pointpairlist != (int *) NULL) {
-        delete [] pg->pointpairlist;
-      }
-    }
     delete [] pbcgrouplist;
   }
   if (vpointlist != (REAL *) NULL) {
@@ -34887,6 +34911,7 @@
   if (b->metric) {
     delete m.bgm;
   }
+  exactdeinit();
 }
 
 #ifndef TETLIBRARY
--- /home/andreas/tetgen1.4.2/predicates.cxx	2007-04-16 10:45:04.000000000 -0400
+++ ../src/cpp/predicates.cpp	2007-07-19 20:55:24.000000000 -0400
@@ -113,6 +113,10 @@
 /*                                                                           */
 /*****************************************************************************/
 
+#if defined(__linux__) && defined(__i386__)
+  #define LINUX 1
+#endif
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
@@ -149,8 +153,8 @@
 /*   which is disastrously slow.  A faster way on IEEE machines might be to  */
 /*   mask the appropriate bit, but that's difficult to do in C.              */
 
-#define Absolute(a)  ((a) >= 0.0 ? (a) : -(a))
-/* #define Absolute(a)  fabs(a) */
+/* #define Absolute(a)  ((a) >= 0.0 ? (a) : -(a))*/
+#define Absolute(a)  fabs(a)
 
 /* Many of the operations are broken up into two pieces, a main part that    */
 /*   performs an approximate operation, and a "tail" that computes the       */
@@ -660,6 +664,8 @@
 /*                                                                           */
 /*****************************************************************************/
 
+static int previous_cword;
+
 REAL exactinit()
 {
   REAL half;
@@ -676,7 +682,9 @@
   _control87(_PC_53, _MCW_PC); /* Set FPU control word for double precision. */
 #endif /* not SINGLE */
 #endif /* CPU86 */
+
 #ifdef LINUX
+  _FPU_GETCW(previous_cword);
 #ifdef SINGLE
   /*  cword = 4223; */
   cword = 4210;                 /* set FPU control word for single precision */
@@ -725,6 +733,13 @@
   return epsilon; /* Added by H. Si 30 Juli, 2004. */
 }
 
+void exactdeinit()
+{
+#ifdef LINUX
+  _FPU_SETCW(previous_cword);
+#endif /* LINUX */
+}
+
 /*****************************************************************************/
 /*                                                                           */
 /*  grow_expansion()   Add a scalar to an expansion.                         */
