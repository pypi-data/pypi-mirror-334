---
apiVersion: batch/v1
kind: Job
metadata:
  name: init-ssd-${NODE_ORDINAL}
  labels:
    app: setup
spec:
  template:
    metadata:
      labels:
        app: setup
    spec:
      volumes:
      - name: blastdb
        hostPath:
          path: "/mnt/disks/ssd0"
      containers:
      - name: ${K8S_JOB_GET_BLASTDB}
        image: ${ELB_DOCKER_IMAGE}
        workingDir: /blast/blastdb
        volumeMounts:
        - name: blastdb
          mountPath: /blast/blastdb
          subPath: blast
        env:
        - name: BLAST_USAGE_REPORT
          value: "false"
        command: ["/bin/bash", "-c"]
        args:
        - echo "BASH version ${BASH_VERSION}";
          start=`date +%s`;
          sleep 30;
          log() { ts=`date +'%F %T'`; printf '%s RUNTIME %s %f seconds\n' "$ts" "$1" "$2"; };
          if [ -z '${ELB_DB_PATH}' ]; then
            echo update_blastdb.pl ${ELB_DB} --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose ${GCP_PROJECT_OPT};
            update_blastdb.pl ${ELB_DB} --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose ${GCP_PROJECT_OPT};
            exit_code=$?;
          else
            echo gsutil -mq cp ${ELB_DB_PATH} .;
            gsutil -mq cp ${ELB_DB_PATH} .;
            exit_code=$?;
            [ $exit_code -eq 0 ] || exit $exit_code;
            [ -f ${ELB_DB}.tar.gz ] && tar xzf ${ELB_DB}.tar.gz;
            [ -f ${ELB_DB}.tar.gz ] && rm ${ELB_DB}.tar.gz;
          fi;
          echo update_blastdb.pl taxdb --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose ${GCP_PROJECT_OPT};
          update_blastdb.pl taxdb --decompress --source ${ELB_BLASTDB_SRC} --verbose --verbose --verbose --verbose --verbose --verbose ${GCP_PROJECT_OPT};
          end=`date +%s`;
          log "download-blastdbs" $(($end-$start));
          [ $exit_code -eq 0 ] || exit $exit_code;
          echo blastdbcmd -info -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE};
          blastdbcmd -info -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE};
          exit_code=$?;
          [ $exit_code -eq 0 ] || exit $exit_code;
          echo blastdbcheck -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE} -no_isam -ends 5;
          blastdbcheck -db ${ELB_DB} -dbtype ${ELB_DB_MOL_TYPE} -no_isam -ends 5;
          exit_code=$?;
          [ $exit_code -eq 0 ] || exit $exit_code;
          if [ ! -z "${ELB_TAXIDLIST}" ] ; then
              gsutil -mq cp ${ELB_TAXIDLIST} /blast/blastdb;
              exit_code=$?;
          fi;
          exit $exit_code;
      restartPolicy: Never
      nodeSelector:
        ordinal: "${NODE_ORDINAL}"
  backoffLimit: 3
  activeDeadlineSeconds: ${TIMEOUT}
