
enum Role {
    USER @description(#"
        The end user of the application.
    "#)
    TOOL @description(#"
        A function call or API request.
    "#)
    SYSTEM @description(#"
        The system prompt.
    "#)
    BOT  @description(#"
        A human-readable message generated by the LLM for direct consumption by the end-user USER.
    "#)
} // Role

enum State {
    INITIAL @description(#"
        The initial state of the context when an assistant is instantiated.
    "#)
    AWAITING_USER @description(#"
        BOT is awaiting user input. This will always be set manually and should not be estimated.
    "#)
    MAKE_REQUEST @description(#"
        A state where the user is seeking to make a request, the bot has explained the requirements of the request body, and the user has given them.
    "#)
    EXPLAIN_REQUEST @description(#"
        A state where the user wants to make a request, but the BOT has not yet told the user the requirements for the request or recieved a tool call explaining requirements from the request. The bot should inform them of the options of the request and ask them if they wish to proceed. If yes, then the state should become MAKE_REQUEST.
    "#)
    NATURAL_LANGUAGE @description(#"
        A state where the user has asked something that can be answered without interacting with the API or TOOL has returned a message. Try to be as conversational as possible and don't unnecessarily repeat yourself.
    "#)
} // State

class Context {
    state State? @description(#"
        The current state that the program is in. Used to guide intent throughout the flow.
    "#)
    messages Message[]? @description(#"
        The messages between the system, user, bot, and function calls.
    "#)
    limit int?
} // Context

class Message {
    role Role @description(#"The role of the message creator."#)
    context_state State @description(#"
        The state of the context when this message was created.
    "#)

    content string  @description(#"
        The content created by the entity described in role.
    "#)
} // Message

function GenerateNaturalLanguageResponse(context: Context) -> string {
    client "openai/gpt-4o-mini"
    prompt #"
        Using {{ context }}, generate a human language response that will help the user. Give precedence to more recent messages. If the user has expressed interest in a request, and the state has been explain request, but not make request, then ask the user if they would like to proceed with the request.
        {{ ctx.output_format }}
    "#
} // GenerateNaturalLanguageResponse

function EstimateState(msgs: Message[]) -> State {
    client "openai/gpt-4o-mini"
    prompt #"
        Using the messages that have led up to now (giving precedence to more recent messages):
        {{ msgs }},
        {{ ctx.output_format }}
        Never evaluate to AWAITING_USER.
    "#
} // EstimateState


test est_state_00 {
    functions [EstimateState]
    args {
        // current_state AWAITING_USER
        msgs [
            {
                role SYSTEM
                content "You are a helpful AI Assistant. Help the user accomplish the tasks they ask you for help on."
            }
            {
                role USER
                content "Hi there. Can you tell me about large language models?"
            }
        ]
    }
}

test est_state_01 {
    functions [EstimateState]
    args {
        // current_state NATURALLANGUAGE
        msgs [
            {
                role SYSTEM
                content "You are a helpful AI Assistant. Help the user accomplish the tasks they ask you for help on."
            }
            {
                role USER
                content "Hi there. Can you tell me about large language models?"
            }
            {
                role BOT
                content "Hello! Large language models are AI models build on top of transformer architectures that use large input parameters to predict which word comes next. They are the most advanced NLP models in existence. Is there anything in particular that you want to learn about?"
            }
        ]
    }
}

test est_state_02 {
    functions [EstimateState]
    args {
        msgs [
            {
                role SYSTEM
                content "You are a helpful AI Assistant. Help the user accomplish the tasks they ask you for help on."
            }
            {
                role USER
                content "Hi there. Can you tell me about large language models?"
            }
            {
                role BOT
                content "Hello! Large language models are AI models build on top of transformer architectures that use large input parameters to predict which word comes next. They are the most advanced NLP models in existence. Is there anything in particular that you want to learn about?"
            }
            {
                role USER
                content "No, thanks though. I want to add a vehicle to fleetio."
            }
        ]
    }
}

// this case may never happen though, right?
test est_state_03 {
    functions [EstimateState]
    args {
        msgs [
            {
                role SYSTEM
                content "You are a helpful AI Assistant. Help the user accomplish the tasks they ask you for help on."
            }
            {
                role USER
                content "Hi there. Can you tell me about large language models?"
            }
            {
                role BOT
                content "Hello! Large language models are AI models build on top of transformer architectures that use large input parameters to predict which word comes next. They are the most advanced NLP models in existence. Is there anything in particular that you want to learn about?"
            }
            {
                role USER
                content "No, thanks though. I want to add a vehicle to fleetio."
            }
            {
                role TOOL
                content #"
                    request_body {
                        data {
                            'vehicle_status_id': int
                            'primary_meter_unit': `km` or `mi` or `hr`
                            'make': string or null
                            'name': string
                        }
                    }
                "#
            }
        ]
    }
}


