###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class DynamicEnum(str, Enum):
    pass

class HTTPMethod(str, Enum):
    
    GET = "GET"
    DELETE = "DELETE"
    POST = "POST"
    PATCH = "PATCH"
    PUT = "PUT"

class Role(str, Enum):
    
    USER = "USER"
    TOOL = "TOOL"
    SYSTEM = "SYSTEM"
    BOT = "BOT"

class State(str, Enum):
    
    INITIAL = "INITIAL"
    AWAITING_USER = "AWAITING_USER"
    MAKE_REQUEST = "MAKE_REQUEST"
    EXPLAIN_REQUEST = "EXPLAIN_REQUEST"
    NATURAL_LANGUAGE = "NATURAL_LANGUAGE"

class Context(BaseModel):
    state: Optional["State"] = None
    messages: Optional[List["Message"]] = None
    limit: Optional[int] = None

class DynamicAPIRequest(BaseModel):
    path: str
    method: "HTTPMethod"
    params: Optional[Dict[str, str]] = None
    request_body: Optional["DynamicObject"] = None

class DynamicObject(BaseModel):
    model_config = ConfigDict(extra='allow')

class Message(BaseModel):
    role: "Role"
    context_state: "State"
    content: str
