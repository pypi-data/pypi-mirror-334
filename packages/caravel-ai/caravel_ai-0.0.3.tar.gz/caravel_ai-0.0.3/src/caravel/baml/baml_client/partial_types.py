###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Context(BaseModel):
    state: Optional[types.State] = None
    messages: Optional[List["Message"]] = None
    limit: Optional[int] = None

class DynamicAPIRequest(BaseModel):
    path: Optional[str] = None
    method: Optional[types.HTTPMethod] = None
    params: Optional[Dict[str, Optional[str]]] = None
    request_body: Optional["DynamicObject"] = None

class DynamicObject(BaseModel):
    model_config = ConfigDict(extra='allow')

class Message(BaseModel):
    role: Optional[types.Role] = None
    context_state: Optional[types.State] = None
    content: Optional[str] = None
