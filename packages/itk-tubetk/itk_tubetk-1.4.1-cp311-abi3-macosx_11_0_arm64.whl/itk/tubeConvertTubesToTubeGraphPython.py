# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeConvertTubesToTubeGraphPython
else:
    import _tubeConvertTubesToTubeGraphPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def tubeConvertTubesToTubeGraphD2_New():
    return tubeConvertTubesToTubeGraphD2.New()

class tubeConvertTubesToTubeGraphD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphD2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphD2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageD2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD2

        Create a new object of the class tubeConvertTubesToTubeGraphD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphD2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD2_swigregister(tubeConvertTubesToTubeGraphD2)

def tubeConvertTubesToTubeGraphD3_New():
    return tubeConvertTubesToTubeGraphD3.New()

class tubeConvertTubesToTubeGraphD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphD3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphD3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageD3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphD3

        Create a new object of the class tubeConvertTubesToTubeGraphD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphD3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphD3_swigregister(tubeConvertTubesToTubeGraphD3)

def tubeConvertTubesToTubeGraphF2_New():
    return tubeConvertTubesToTubeGraphF2.New()

class tubeConvertTubesToTubeGraphF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphF2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphF2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageF2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF2

        Create a new object of the class tubeConvertTubesToTubeGraphF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphF2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF2_swigregister(tubeConvertTubesToTubeGraphF2)

def tubeConvertTubesToTubeGraphF3_New():
    return tubeConvertTubesToTubeGraphF3.New()

class tubeConvertTubesToTubeGraphF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphF3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphF3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageF3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphF3

        Create a new object of the class tubeConvertTubesToTubeGraphF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphF3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphF3_swigregister(tubeConvertTubesToTubeGraphF3)

def tubeConvertTubesToTubeGraphSS2_New():
    return tubeConvertTubesToTubeGraphSS2.New()

class tubeConvertTubesToTubeGraphSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphSS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphSS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageSS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS2

        Create a new object of the class tubeConvertTubesToTubeGraphSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphSS2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS2_swigregister(tubeConvertTubesToTubeGraphSS2)

def tubeConvertTubesToTubeGraphSS3_New():
    return tubeConvertTubesToTubeGraphSS3.New()

class tubeConvertTubesToTubeGraphSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphSS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphSS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageSS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphSS3

        Create a new object of the class tubeConvertTubesToTubeGraphSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphSS3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphSS3_swigregister(tubeConvertTubesToTubeGraphSS3)

def tubeConvertTubesToTubeGraphUC2_New():
    return tubeConvertTubesToTubeGraphUC2.New()

class tubeConvertTubesToTubeGraphUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphUC2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphUC2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageUC2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC2

        Create a new object of the class tubeConvertTubesToTubeGraphUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUC2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC2_swigregister(tubeConvertTubesToTubeGraphUC2)

def tubeConvertTubesToTubeGraphUC3_New():
    return tubeConvertTubesToTubeGraphUC3.New()

class tubeConvertTubesToTubeGraphUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphUC3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphUC3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageUC3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUC3

        Create a new object of the class tubeConvertTubesToTubeGraphUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUC3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUC3_swigregister(tubeConvertTubesToTubeGraphUC3)

def tubeConvertTubesToTubeGraphUS2_New():
    return tubeConvertTubesToTubeGraphUS2.New()

class tubeConvertTubesToTubeGraphUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphUS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphUS2_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageUS2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS2

        Create a new object of the class tubeConvertTubesToTubeGraphUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUS2 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS2_swigregister(tubeConvertTubesToTubeGraphUS2)

def tubeConvertTubesToTubeGraphUS3_New():
    return tubeConvertTubesToTubeGraphUS3.New()

class tubeConvertTubesToTubeGraphUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToTubeGraphUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToTubeGraphUS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToTubeGraphUS3_Pointer"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_Clone(self)

    def SetNumberOfCenteroids(self, value):
        r"""
        SetNumberOfCenteroids(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetNumberOfCenteroids(self, value)

    def GetNumberOfCenteroids(self):
        r"""GetNumberOfCenteroids(self) -> int"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetNumberOfCenteroids(self)

    def SetCVTImage(self, value):
        r"""
        SetCVTImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetCVTImage(self, value)

    def GetCVTImage(self):
        r"""GetCVTImage(self) -> itkImageUS3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetCVTImage(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetInputTubeGroup(self)

    def GetAdjacencyMatrix(self):
        r"""GetAdjacencyMatrix(self) -> vnl_matrixD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetAdjacencyMatrix(self)

    def GetRootNodes(self):
        r"""GetRootNodes(self) -> vnl_vectorSI"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetRootNodes(self)

    def GetBranchNodes(self):
        r"""GetBranchNodes(self) -> vnl_vectorD"""
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_GetBranchNodes(self)
    __swig_destroy__ = _tubeConvertTubesToTubeGraphPython.delete_tubeConvertTubesToTubeGraphUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToTubeGraphUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToTubeGraphUS3

        Create a new object of the class tubeConvertTubesToTubeGraphUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToTubeGraphUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToTubeGraphUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToTubeGraphUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToTubeGraphUS3 in _tubeConvertTubesToTubeGraphPython:
_tubeConvertTubesToTubeGraphPython.tubeConvertTubesToTubeGraphUS3_swigregister(tubeConvertTubesToTubeGraphUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def convert_tubes_to_tube_graph(*args,  number_of_centeroids: int=..., cvt_image: itkt.Image=..., input_tube_group=...,**kwargs):
    """Functional interface for ConvertTubesToTubeGraph"""
    import itk

    kwarg_typehints = { 'number_of_centeroids':number_of_centeroids,'cvt_image':cvt_image,'input_tube_group':input_tube_group }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConvertTubesToTubeGraph.New(*args, **kwargs)

    return instance.__internal_call__()

def convert_tubes_to_tube_graph_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ConvertTubesToTubeGraph
    convert_tubes_to_tube_graph.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    convert_tubes_to_tube_graph.__doc__ = filter_object.__doc__



