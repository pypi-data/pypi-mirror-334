# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeConvertTubesToDensityImagePython
else:
    import _tubeConvertTubesToDensityImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def tubeConvertTubesToDensityImageD2_New():
    return tubeConvertTubesToDensityImageD2.New()

class tubeConvertTubesToDensityImageD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageD2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageD2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> double"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageD2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageD2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itkImageVD22_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageD2

        Create a new object of the class tubeConvertTubesToDensityImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageD2 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD2_swigregister(tubeConvertTubesToDensityImageD2)

def tubeConvertTubesToDensityImageD3_New():
    return tubeConvertTubesToDensityImageD3.New()

class tubeConvertTubesToDensityImageD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageD3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageD3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> double"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageD3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageD3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itkImageVD33_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageD3

        Create a new object of the class tubeConvertTubesToDensityImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageD3 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageD3_swigregister(tubeConvertTubesToDensityImageD3)

def tubeConvertTubesToDensityImageF2_New():
    return tubeConvertTubesToDensityImageF2.New()

class tubeConvertTubesToDensityImageF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageF2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageF2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> float"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageF2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageF2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itkImageVF22_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageF2

        Create a new object of the class tubeConvertTubesToDensityImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageF2 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF2_swigregister(tubeConvertTubesToDensityImageF2)

def tubeConvertTubesToDensityImageF3_New():
    return tubeConvertTubesToDensityImageF3.New()

class tubeConvertTubesToDensityImageF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageF3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageF3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> float"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageF3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageF3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itkImageVF33_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageF3

        Create a new object of the class tubeConvertTubesToDensityImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageF3 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageF3_swigregister(tubeConvertTubesToDensityImageF3)

def tubeConvertTubesToDensityImageSS2_New():
    return tubeConvertTubesToDensityImageSS2.New()

class tubeConvertTubesToDensityImageSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageSS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageSS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> short"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageSS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageSS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< short,2 > > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageSS2

        Create a new object of the class tubeConvertTubesToDensityImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageSS2 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS2_swigregister(tubeConvertTubesToDensityImageSS2)

def tubeConvertTubesToDensityImageSS3_New():
    return tubeConvertTubesToDensityImageSS3.New()

class tubeConvertTubesToDensityImageSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageSS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageSS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> short"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageSS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageSS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< short >,3 > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageSS3

        Create a new object of the class tubeConvertTubesToDensityImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageSS3 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageSS3_swigregister(tubeConvertTubesToDensityImageSS3)

def tubeConvertTubesToDensityImageUC2_New():
    return tubeConvertTubesToDensityImageUC2.New()

class tubeConvertTubesToDensityImageUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageUC2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageUC2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> unsigned char"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageUC2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageUC2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< unsigned char,2 > > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageUC2

        Create a new object of the class tubeConvertTubesToDensityImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageUC2 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC2_swigregister(tubeConvertTubesToDensityImageUC2)

def tubeConvertTubesToDensityImageUC3_New():
    return tubeConvertTubesToDensityImageUC3.New()

class tubeConvertTubesToDensityImageUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageUC3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageUC3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> unsigned char"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageUC3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageUC3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< unsigned char >,3 > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageUC3

        Create a new object of the class tubeConvertTubesToDensityImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageUC3 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUC3_swigregister(tubeConvertTubesToDensityImageUC3)

def tubeConvertTubesToDensityImageUS2_New():
    return tubeConvertTubesToDensityImageUS2.New()

class tubeConvertTubesToDensityImageUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageUS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageUS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> unsigned short"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageUS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageUS2_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< unsigned short,2 > > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD2

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD2"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageUS2

        Create a new object of the class tubeConvertTubesToDensityImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageUS2 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS2_swigregister(tubeConvertTubesToDensityImageUS2)

def tubeConvertTubesToDensityImageUS3_New():
    return tubeConvertTubesToDensityImageUS3.New()

class tubeConvertTubesToDensityImageUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToDensityImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToDensityImageUS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToDensityImageUS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_Clone(self)

    def SetMaxDensityIntensity(self, value):
        r"""
        SetMaxDensityIntensity(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_SetMaxDensityIntensity(self, value)

    def GetMaxDensityIntensity(self):
        r"""GetMaxDensityIntensity(self) -> unsigned short"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetMaxDensityIntensity(self)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: itkSize3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_SetSize(self, value)

    def GetSize(self):
        r"""GetSize(self) -> itkSize3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetSize(self)

    def SetUseSquaredDistance(self, value):
        r"""
        SetUseSquaredDistance(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_SetUseSquaredDistance(self, value)

    def GetUseSquaredDistance(self):
        r"""GetUseSquaredDistance(self) -> bool"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetUseSquaredDistance(self)

    def SetInputTubeGroup(self, value):
        r"""
        SetInputTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_SetInputTubeGroup(self, value)

    def GetInputTubeGroup(self):
        r"""GetInputTubeGroup(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetInputTubeGroup(self)

    def GetDensityMapImage(self):
        r"""GetDensityMapImage(self) -> itkImageUS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetDensityMapImage(self)

    def GetRadiusMapImage(self):
        r"""GetRadiusMapImage(self) -> itkImageUS3_Pointer"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetRadiusMapImage(self)

    def GetTangentMapImage(self):
        r"""GetTangentMapImage(self) -> itk::SmartPointer< itk::Image< itk::Vector< unsigned short >,3 > >"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetTangentMapImage(self)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: itkVectorD3

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_SetSpacing(self, value)

    def GetSpacing(self):
        r"""GetSpacing(self) -> itkVectorD3"""
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_GetSpacing(self)
    __swig_destroy__ = _tubeConvertTubesToDensityImagePython.delete_tubeConvertTubesToDensityImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToDensityImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToDensityImageUS3

        Create a new object of the class tubeConvertTubesToDensityImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToDensityImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToDensityImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToDensityImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToDensityImageUS3 in _tubeConvertTubesToDensityImagePython:
_tubeConvertTubesToDensityImagePython.tubeConvertTubesToDensityImageUS3_swigregister(tubeConvertTubesToDensityImageUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def convert_tubes_to_density_image(*args,  max_density_intensity: int=..., size: Sequence[int]=..., use_squared_distance: bool=..., input_tube_group=..., spacing: Sequence[float]=...,**kwargs):
    """Functional interface for ConvertTubesToDensityImage"""
    import itk

    kwarg_typehints = { 'max_density_intensity':max_density_intensity,'size':size,'use_squared_distance':use_squared_distance,'input_tube_group':input_tube_group,'spacing':spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConvertTubesToDensityImage.New(*args, **kwargs)

    return instance.__internal_call__()

def convert_tubes_to_density_image_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ConvertTubesToDensityImage
    convert_tubes_to_density_image.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    convert_tubes_to_density_image.__doc__ = filter_object.__doc__



