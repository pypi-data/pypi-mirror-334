# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeMergeAdjacentImagesPython
else:
    import _tubeMergeAdjacentImagesPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython

def tubeMergeAdjacentImagesID2_New():
    return tubeMergeAdjacentImagesID2.New()

class tubeMergeAdjacentImagesID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesID2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesID2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesID2

        Create a new object of the class tubeMergeAdjacentImagesID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesID2 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID2_swigregister(tubeMergeAdjacentImagesID2)

def tubeMergeAdjacentImagesID3_New():
    return tubeMergeAdjacentImagesID3.New()

class tubeMergeAdjacentImagesID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesID3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesID3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesID3

        Create a new object of the class tubeMergeAdjacentImagesID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesID3 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesID3_swigregister(tubeMergeAdjacentImagesID3)

def tubeMergeAdjacentImagesIF2_New():
    return tubeMergeAdjacentImagesIF2.New()

class tubeMergeAdjacentImagesIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIF2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIF2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> float"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIF2

        Create a new object of the class tubeMergeAdjacentImagesIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIF2 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF2_swigregister(tubeMergeAdjacentImagesIF2)

def tubeMergeAdjacentImagesIF3_New():
    return tubeMergeAdjacentImagesIF3.New()

class tubeMergeAdjacentImagesIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIF3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIF3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> float"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIF3

        Create a new object of the class tubeMergeAdjacentImagesIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIF3 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIF3_swigregister(tubeMergeAdjacentImagesIF3)

def tubeMergeAdjacentImagesISS2_New():
    return tubeMergeAdjacentImagesISS2.New()

class tubeMergeAdjacentImagesISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesISS2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesISS2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> short"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesISS2

        Create a new object of the class tubeMergeAdjacentImagesISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesISS2 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS2_swigregister(tubeMergeAdjacentImagesISS2)

def tubeMergeAdjacentImagesISS3_New():
    return tubeMergeAdjacentImagesISS3.New()

class tubeMergeAdjacentImagesISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesISS3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesISS3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> short"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesISS3

        Create a new object of the class tubeMergeAdjacentImagesISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesISS3 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesISS3_swigregister(tubeMergeAdjacentImagesISS3)

def tubeMergeAdjacentImagesIUC2_New():
    return tubeMergeAdjacentImagesIUC2.New()

class tubeMergeAdjacentImagesIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIUC2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIUC2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> unsigned char"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIUC2

        Create a new object of the class tubeMergeAdjacentImagesIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIUC2 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC2_swigregister(tubeMergeAdjacentImagesIUC2)

def tubeMergeAdjacentImagesIUC3_New():
    return tubeMergeAdjacentImagesIUC3.New()

class tubeMergeAdjacentImagesIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIUC3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIUC3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> unsigned char"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIUC3

        Create a new object of the class tubeMergeAdjacentImagesIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIUC3 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUC3_swigregister(tubeMergeAdjacentImagesIUC3)

def tubeMergeAdjacentImagesIUS2_New():
    return tubeMergeAdjacentImagesIUS2.New()

class tubeMergeAdjacentImagesIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIUS2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIUS2_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> unsigned short"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD2 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIUS2

        Create a new object of the class tubeMergeAdjacentImagesIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIUS2 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS2_swigregister(tubeMergeAdjacentImagesIUS2)

def tubeMergeAdjacentImagesIUS3_New():
    return tubeMergeAdjacentImagesIUS3.New()

class tubeMergeAdjacentImagesIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeMergeAdjacentImagesIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeMergeAdjacentImagesIUS3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeMergeAdjacentImagesIUS3_Pointer"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_Clone(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetInput2(self)

    def SetBackground(self, value):
        r"""
        SetBackground(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetBackground(self, value)

    def GetBackground(self):
        r"""GetBackground(self) -> unsigned short"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetBackground(self)

    def SetMaskZero(self, value):
        r"""
        SetMaskZero(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetMaskZero(self, value)

    def GetMaskZero(self):
        r"""GetMaskZero(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetMaskZero(self)

    def SetMaxIterations(self, value):
        r"""
        SetMaxIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetMaxIterations(self, value)

    def GetMaxIterations(self):
        r"""GetMaxIterations(self) -> unsigned int"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetMaxIterations(self)

    def SetPadding(self, value):
        r"""
        SetPadding(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > > const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetPadding(self, value)

    def GetPadding(self):
        r"""GetPadding(self) -> vectorI"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetPadding(self)

    def SetExpectedOffset(self, value):
        r"""
        SetExpectedOffset(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetExpectedOffset(self, value)

    def GetExpectedOffset(self):
        r"""GetExpectedOffset(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetExpectedOffset(self)

    def SetExpectedRotation(self, value):
        r"""
        SetExpectedRotation(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetExpectedRotation(self, value)

    def GetExpectedRotation(self):
        r"""GetExpectedRotation(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetExpectedRotation(self)

    def SetSamplingRatio(self, value):
        r"""
        SetSamplingRatio(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetSamplingRatio(self, value)

    def GetSamplingRatio(self):
        r"""GetSamplingRatio(self) -> double"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetSamplingRatio(self)

    def SetBlendUsingAverage(self, value):
        r"""
        SetBlendUsingAverage(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetBlendUsingAverage(self, value)

    def GetBlendUsingAverage(self):
        r"""GetBlendUsingAverage(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetBlendUsingAverage(self)

    def SetUseFastBlending(self, value):
        r"""
        SetUseFastBlending(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetUseFastBlending(self, value)

    def GetUseFastBlending(self):
        r"""GetUseFastBlending(self) -> bool"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetUseFastBlending(self)

    def SetInitialTransform(self, value):
        r"""
        SetInitialTransform(self, value)

        Parameters
        ----------
        value: itkAffineTransformD3 const *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SetInitialTransform(self, value)

    def GetInitialTransform(self):
        r"""GetInitialTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetInitialTransform(self)

    def LoadInitialTransform(self, value):
        r"""
        LoadInitialTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_LoadInitialTransform(self, value)

    def GetOutputTransform(self):
        r"""GetOutputTransform(self) -> itkAffineTransformD3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetOutputTransform(self)

    def SaveOutputTransform(self, value):
        r"""
        SaveOutputTransform(self, value)

        Parameters
        ----------
        value: std::string const &

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_SaveOutputTransform(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_GetOutput(self)
    __swig_destroy__ = _tubeMergeAdjacentImagesPython.delete_tubeMergeAdjacentImagesIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeMergeAdjacentImagesIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeMergeAdjacentImagesIUS3

        Create a new object of the class tubeMergeAdjacentImagesIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeMergeAdjacentImagesIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeMergeAdjacentImagesIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeMergeAdjacentImagesIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeMergeAdjacentImagesIUS3 in _tubeMergeAdjacentImagesPython:
_tubeMergeAdjacentImagesPython.tubeMergeAdjacentImagesIUS3_swigregister(tubeMergeAdjacentImagesIUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def merge_adjacent_images(*args,  background: float=..., mask_zero: bool=..., max_iterations: int=..., padding: Sequence[int]=..., expected_offset: float=..., expected_rotation: float=..., sampling_ratio: float=..., blend_using_average: bool=..., use_fast_blending: bool=..., initial_transform=...,**kwargs):
    """Functional interface for MergeAdjacentImages"""
    import itk

    kwarg_typehints = { 'background':background,'mask_zero':mask_zero,'max_iterations':max_iterations,'padding':padding,'expected_offset':expected_offset,'expected_rotation':expected_rotation,'sampling_ratio':sampling_ratio,'blend_using_average':blend_using_average,'use_fast_blending':use_fast_blending,'initial_transform':initial_transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.MergeAdjacentImages.New(*args, **kwargs)

    return instance.__internal_call__()

def merge_adjacent_images_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.MergeAdjacentImages
    merge_adjacent_images.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    merge_adjacent_images.__doc__ = filter_object.__doc__



