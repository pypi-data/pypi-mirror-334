# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeImageSimilarityMetricsPython
else:
    import _tubeComputeImageSimilarityMetricsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython

def tubeComputeImageSimilarityMetricsID2_New():
    return tubeComputeImageSimilarityMetricsID2.New()

class tubeComputeImageSimilarityMetricsID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsID2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsID2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsID2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsID2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsID2

        Create a new object of the class tubeComputeImageSimilarityMetricsID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsID2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID2_swigregister(tubeComputeImageSimilarityMetricsID2)

def tubeComputeImageSimilarityMetricsID3_New():
    return tubeComputeImageSimilarityMetricsID3.New()

class tubeComputeImageSimilarityMetricsID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsID3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsID3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsID3

        Create a new object of the class tubeComputeImageSimilarityMetricsID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsID3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID3_swigregister(tubeComputeImageSimilarityMetricsID3)

def tubeComputeImageSimilarityMetricsID4_New():
    return tubeComputeImageSimilarityMetricsID4.New()

class tubeComputeImageSimilarityMetricsID4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsID4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsID4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageD4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageD4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsID4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsID4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsID4

        Create a new object of the class tubeComputeImageSimilarityMetricsID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsID4 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsID4_swigregister(tubeComputeImageSimilarityMetricsID4)

def tubeComputeImageSimilarityMetricsIF2_New():
    return tubeComputeImageSimilarityMetricsIF2.New()

class tubeComputeImageSimilarityMetricsIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIF2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIF2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIF2

        Create a new object of the class tubeComputeImageSimilarityMetricsIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIF2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF2_swigregister(tubeComputeImageSimilarityMetricsIF2)

def tubeComputeImageSimilarityMetricsIF3_New():
    return tubeComputeImageSimilarityMetricsIF3.New()

class tubeComputeImageSimilarityMetricsIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIF3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIF3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIF3

        Create a new object of the class tubeComputeImageSimilarityMetricsIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIF3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF3_swigregister(tubeComputeImageSimilarityMetricsIF3)

def tubeComputeImageSimilarityMetricsIF4_New():
    return tubeComputeImageSimilarityMetricsIF4.New()

class tubeComputeImageSimilarityMetricsIF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIF4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIF4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageF4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageF4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIF4

        Create a new object of the class tubeComputeImageSimilarityMetricsIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIF4 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIF4_swigregister(tubeComputeImageSimilarityMetricsIF4)

def tubeComputeImageSimilarityMetricsISS2_New():
    return tubeComputeImageSimilarityMetricsISS2.New()

class tubeComputeImageSimilarityMetricsISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsISS2

        Create a new object of the class tubeComputeImageSimilarityMetricsISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsISS2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS2_swigregister(tubeComputeImageSimilarityMetricsISS2)

def tubeComputeImageSimilarityMetricsISS3_New():
    return tubeComputeImageSimilarityMetricsISS3.New()

class tubeComputeImageSimilarityMetricsISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsISS3

        Create a new object of the class tubeComputeImageSimilarityMetricsISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsISS3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS3_swigregister(tubeComputeImageSimilarityMetricsISS3)

def tubeComputeImageSimilarityMetricsISS4_New():
    return tubeComputeImageSimilarityMetricsISS4.New()

class tubeComputeImageSimilarityMetricsISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsISS4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsISS4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageSS4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageSS4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsISS4

        Create a new object of the class tubeComputeImageSimilarityMetricsISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsISS4 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsISS4_swigregister(tubeComputeImageSimilarityMetricsISS4)

def tubeComputeImageSimilarityMetricsIUC2_New():
    return tubeComputeImageSimilarityMetricsIUC2.New()

class tubeComputeImageSimilarityMetricsIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUC2

        Create a new object of the class tubeComputeImageSimilarityMetricsIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUC2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC2_swigregister(tubeComputeImageSimilarityMetricsIUC2)

def tubeComputeImageSimilarityMetricsIUC3_New():
    return tubeComputeImageSimilarityMetricsIUC3.New()

class tubeComputeImageSimilarityMetricsIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUC3

        Create a new object of the class tubeComputeImageSimilarityMetricsIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUC3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC3_swigregister(tubeComputeImageSimilarityMetricsIUC3)

def tubeComputeImageSimilarityMetricsIUC4_New():
    return tubeComputeImageSimilarityMetricsIUC4.New()

class tubeComputeImageSimilarityMetricsIUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUC4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUC4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUC4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUC4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUC4

        Create a new object of the class tubeComputeImageSimilarityMetricsIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUC4 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUC4_swigregister(tubeComputeImageSimilarityMetricsIUC4)

def tubeComputeImageSimilarityMetricsIUS2_New():
    return tubeComputeImageSimilarityMetricsIUS2.New()

class tubeComputeImageSimilarityMetricsIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS2"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUS2

        Create a new object of the class tubeComputeImageSimilarityMetricsIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUS2 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS2_swigregister(tubeComputeImageSimilarityMetricsIUS2)

def tubeComputeImageSimilarityMetricsIUS3_New():
    return tubeComputeImageSimilarityMetricsIUS3.New()

class tubeComputeImageSimilarityMetricsIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS3"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUS3

        Create a new object of the class tubeComputeImageSimilarityMetricsIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUS3 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS3_swigregister(tubeComputeImageSimilarityMetricsIUS3)

def tubeComputeImageSimilarityMetricsIUS4_New():
    return tubeComputeImageSimilarityMetricsIUS4.New()

class tubeComputeImageSimilarityMetricsIUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageSimilarityMetricsIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageSimilarityMetricsIUS4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageSimilarityMetricsIUS4_Pointer"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_Clone(self)

    def SetUseCorrelation(self, value):
        r"""
        SetUseCorrelation(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_SetUseCorrelation(self, value)

    def GetUseCorrelation(self):
        r"""GetUseCorrelation(self) -> bool"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_GetUseCorrelation(self)

    def SetSamplingRate(self, value):
        r"""
        SetSamplingRate(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_SetSamplingRate(self, value)

    def GetSamplingRate(self):
        r"""GetSamplingRate(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_GetSamplingRate(self)

    def SetInput1(self, value):
        r"""
        SetInput1(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_SetInput1(self, value)

    def GetInput1(self):
        r"""GetInput1(self) -> itkImageUS4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_GetInput1(self)

    def SetInput2(self, value):
        r"""
        SetInput2(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_SetInput2(self, value)

    def GetInput2(self):
        r"""GetInput2(self) -> itkImageUS4"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_GetInput2(self)

    def GetOutput(self):
        r"""GetOutput(self) -> double"""
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageSimilarityMetricsPython.delete_tubeComputeImageSimilarityMetricsIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageSimilarityMetricsIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageSimilarityMetricsIUS4

        Create a new object of the class tubeComputeImageSimilarityMetricsIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageSimilarityMetricsIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageSimilarityMetricsIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageSimilarityMetricsIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageSimilarityMetricsIUS4 in _tubeComputeImageSimilarityMetricsPython:
_tubeComputeImageSimilarityMetricsPython.tubeComputeImageSimilarityMetricsIUS4_swigregister(tubeComputeImageSimilarityMetricsIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_image_similarity_metrics(*args,  use_correlation: bool=..., sampling_rate: float=...,**kwargs):
    """Functional interface for ComputeImageSimilarityMetrics"""
    import itk

    kwarg_typehints = { 'use_correlation':use_correlation,'sampling_rate':sampling_rate }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeImageSimilarityMetrics.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_image_similarity_metrics_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeImageSimilarityMetrics
    compute_image_similarity_metrics.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_image_similarity_metrics.__doc__ = filter_object.__doc__



