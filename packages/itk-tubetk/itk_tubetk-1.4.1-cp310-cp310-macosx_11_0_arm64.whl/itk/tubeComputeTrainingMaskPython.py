# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTrainingMaskPython
else:
    import _tubeComputeTrainingMaskPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeComputeTrainingMaskDD2_New():
    return tubeComputeTrainingMaskDD2.New()

class tubeComputeTrainingMaskDD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD2

        Create a new object of the class tubeComputeTrainingMaskDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD2_swigregister(tubeComputeTrainingMaskDD2)

def tubeComputeTrainingMaskDD3_New():
    return tubeComputeTrainingMaskDD3.New()

class tubeComputeTrainingMaskDD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD3

        Create a new object of the class tubeComputeTrainingMaskDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD3_swigregister(tubeComputeTrainingMaskDD3)

def tubeComputeTrainingMaskDD4_New():
    return tubeComputeTrainingMaskDD4.New()

class tubeComputeTrainingMaskDD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDD4

        Create a new object of the class tubeComputeTrainingMaskDD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDD4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDD4_swigregister(tubeComputeTrainingMaskDD4)

def tubeComputeTrainingMaskDF2_New():
    return tubeComputeTrainingMaskDF2.New()

class tubeComputeTrainingMaskDF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF2

        Create a new object of the class tubeComputeTrainingMaskDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF2_swigregister(tubeComputeTrainingMaskDF2)

def tubeComputeTrainingMaskDF3_New():
    return tubeComputeTrainingMaskDF3.New()

class tubeComputeTrainingMaskDF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF3

        Create a new object of the class tubeComputeTrainingMaskDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF3_swigregister(tubeComputeTrainingMaskDF3)

def tubeComputeTrainingMaskDF4_New():
    return tubeComputeTrainingMaskDF4.New()

class tubeComputeTrainingMaskDF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDF4

        Create a new object of the class tubeComputeTrainingMaskDF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDF4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDF4_swigregister(tubeComputeTrainingMaskDF4)

def tubeComputeTrainingMaskDSS2_New():
    return tubeComputeTrainingMaskDSS2.New()

class tubeComputeTrainingMaskDSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS2

        Create a new object of the class tubeComputeTrainingMaskDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS2_swigregister(tubeComputeTrainingMaskDSS2)

def tubeComputeTrainingMaskDSS3_New():
    return tubeComputeTrainingMaskDSS3.New()

class tubeComputeTrainingMaskDSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS3

        Create a new object of the class tubeComputeTrainingMaskDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS3_swigregister(tubeComputeTrainingMaskDSS3)

def tubeComputeTrainingMaskDSS4_New():
    return tubeComputeTrainingMaskDSS4.New()

class tubeComputeTrainingMaskDSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDSS4

        Create a new object of the class tubeComputeTrainingMaskDSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDSS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDSS4_swigregister(tubeComputeTrainingMaskDSS4)

def tubeComputeTrainingMaskDUC2_New():
    return tubeComputeTrainingMaskDUC2.New()

class tubeComputeTrainingMaskDUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC2

        Create a new object of the class tubeComputeTrainingMaskDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC2_swigregister(tubeComputeTrainingMaskDUC2)

def tubeComputeTrainingMaskDUC3_New():
    return tubeComputeTrainingMaskDUC3.New()

class tubeComputeTrainingMaskDUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC3

        Create a new object of the class tubeComputeTrainingMaskDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC3_swigregister(tubeComputeTrainingMaskDUC3)

def tubeComputeTrainingMaskDUC4_New():
    return tubeComputeTrainingMaskDUC4.New()

class tubeComputeTrainingMaskDUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUC4

        Create a new object of the class tubeComputeTrainingMaskDUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUC4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUC4_swigregister(tubeComputeTrainingMaskDUC4)

def tubeComputeTrainingMaskDUS2_New():
    return tubeComputeTrainingMaskDUS2.New()

class tubeComputeTrainingMaskDUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS2

        Create a new object of the class tubeComputeTrainingMaskDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS2_swigregister(tubeComputeTrainingMaskDUS2)

def tubeComputeTrainingMaskDUS3_New():
    return tubeComputeTrainingMaskDUS3.New()

class tubeComputeTrainingMaskDUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS3

        Create a new object of the class tubeComputeTrainingMaskDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS3_swigregister(tubeComputeTrainingMaskDUS3)

def tubeComputeTrainingMaskDUS4_New():
    return tubeComputeTrainingMaskDUS4.New()

class tubeComputeTrainingMaskDUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskDUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskDUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskDUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskDUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskDUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskDUS4

        Create a new object of the class tubeComputeTrainingMaskDUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskDUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskDUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskDUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskDUS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskDUS4_swigregister(tubeComputeTrainingMaskDUS4)

def tubeComputeTrainingMaskFD2_New():
    return tubeComputeTrainingMaskFD2.New()

class tubeComputeTrainingMaskFD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD2

        Create a new object of the class tubeComputeTrainingMaskFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD2_swigregister(tubeComputeTrainingMaskFD2)

def tubeComputeTrainingMaskFD3_New():
    return tubeComputeTrainingMaskFD3.New()

class tubeComputeTrainingMaskFD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD3

        Create a new object of the class tubeComputeTrainingMaskFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD3_swigregister(tubeComputeTrainingMaskFD3)

def tubeComputeTrainingMaskFD4_New():
    return tubeComputeTrainingMaskFD4.New()

class tubeComputeTrainingMaskFD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFD4

        Create a new object of the class tubeComputeTrainingMaskFD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFD4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFD4_swigregister(tubeComputeTrainingMaskFD4)

def tubeComputeTrainingMaskFF2_New():
    return tubeComputeTrainingMaskFF2.New()

class tubeComputeTrainingMaskFF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF2

        Create a new object of the class tubeComputeTrainingMaskFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF2_swigregister(tubeComputeTrainingMaskFF2)

def tubeComputeTrainingMaskFF3_New():
    return tubeComputeTrainingMaskFF3.New()

class tubeComputeTrainingMaskFF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF3

        Create a new object of the class tubeComputeTrainingMaskFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF3_swigregister(tubeComputeTrainingMaskFF3)

def tubeComputeTrainingMaskFF4_New():
    return tubeComputeTrainingMaskFF4.New()

class tubeComputeTrainingMaskFF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFF4

        Create a new object of the class tubeComputeTrainingMaskFF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFF4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFF4_swigregister(tubeComputeTrainingMaskFF4)

def tubeComputeTrainingMaskFSS2_New():
    return tubeComputeTrainingMaskFSS2.New()

class tubeComputeTrainingMaskFSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS2

        Create a new object of the class tubeComputeTrainingMaskFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS2_swigregister(tubeComputeTrainingMaskFSS2)

def tubeComputeTrainingMaskFSS3_New():
    return tubeComputeTrainingMaskFSS3.New()

class tubeComputeTrainingMaskFSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS3

        Create a new object of the class tubeComputeTrainingMaskFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS3_swigregister(tubeComputeTrainingMaskFSS3)

def tubeComputeTrainingMaskFSS4_New():
    return tubeComputeTrainingMaskFSS4.New()

class tubeComputeTrainingMaskFSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFSS4

        Create a new object of the class tubeComputeTrainingMaskFSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFSS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFSS4_swigregister(tubeComputeTrainingMaskFSS4)

def tubeComputeTrainingMaskFUC2_New():
    return tubeComputeTrainingMaskFUC2.New()

class tubeComputeTrainingMaskFUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC2

        Create a new object of the class tubeComputeTrainingMaskFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC2_swigregister(tubeComputeTrainingMaskFUC2)

def tubeComputeTrainingMaskFUC3_New():
    return tubeComputeTrainingMaskFUC3.New()

class tubeComputeTrainingMaskFUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC3

        Create a new object of the class tubeComputeTrainingMaskFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC3_swigregister(tubeComputeTrainingMaskFUC3)

def tubeComputeTrainingMaskFUC4_New():
    return tubeComputeTrainingMaskFUC4.New()

class tubeComputeTrainingMaskFUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUC4

        Create a new object of the class tubeComputeTrainingMaskFUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUC4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUC4_swigregister(tubeComputeTrainingMaskFUC4)

def tubeComputeTrainingMaskFUS2_New():
    return tubeComputeTrainingMaskFUS2.New()

class tubeComputeTrainingMaskFUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS2

        Create a new object of the class tubeComputeTrainingMaskFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS2_swigregister(tubeComputeTrainingMaskFUS2)

def tubeComputeTrainingMaskFUS3_New():
    return tubeComputeTrainingMaskFUS3.New()

class tubeComputeTrainingMaskFUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS3

        Create a new object of the class tubeComputeTrainingMaskFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS3_swigregister(tubeComputeTrainingMaskFUS3)

def tubeComputeTrainingMaskFUS4_New():
    return tubeComputeTrainingMaskFUS4.New()

class tubeComputeTrainingMaskFUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskFUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskFUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskFUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskFUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskFUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskFUS4

        Create a new object of the class tubeComputeTrainingMaskFUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskFUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskFUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskFUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskFUS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskFUS4_swigregister(tubeComputeTrainingMaskFUS4)

def tubeComputeTrainingMaskSSD2_New():
    return tubeComputeTrainingMaskSSD2.New()

class tubeComputeTrainingMaskSSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD2

        Create a new object of the class tubeComputeTrainingMaskSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD2_swigregister(tubeComputeTrainingMaskSSD2)

def tubeComputeTrainingMaskSSD3_New():
    return tubeComputeTrainingMaskSSD3.New()

class tubeComputeTrainingMaskSSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD3

        Create a new object of the class tubeComputeTrainingMaskSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD3_swigregister(tubeComputeTrainingMaskSSD3)

def tubeComputeTrainingMaskSSD4_New():
    return tubeComputeTrainingMaskSSD4.New()

class tubeComputeTrainingMaskSSD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSD4

        Create a new object of the class tubeComputeTrainingMaskSSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSD4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSD4_swigregister(tubeComputeTrainingMaskSSD4)

def tubeComputeTrainingMaskSSF2_New():
    return tubeComputeTrainingMaskSSF2.New()

class tubeComputeTrainingMaskSSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF2

        Create a new object of the class tubeComputeTrainingMaskSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF2_swigregister(tubeComputeTrainingMaskSSF2)

def tubeComputeTrainingMaskSSF3_New():
    return tubeComputeTrainingMaskSSF3.New()

class tubeComputeTrainingMaskSSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF3

        Create a new object of the class tubeComputeTrainingMaskSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF3_swigregister(tubeComputeTrainingMaskSSF3)

def tubeComputeTrainingMaskSSF4_New():
    return tubeComputeTrainingMaskSSF4.New()

class tubeComputeTrainingMaskSSF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSF4

        Create a new object of the class tubeComputeTrainingMaskSSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSF4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSF4_swigregister(tubeComputeTrainingMaskSSF4)

def tubeComputeTrainingMaskSSSS2_New():
    return tubeComputeTrainingMaskSSSS2.New()

class tubeComputeTrainingMaskSSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS2

        Create a new object of the class tubeComputeTrainingMaskSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS2_swigregister(tubeComputeTrainingMaskSSSS2)

def tubeComputeTrainingMaskSSSS3_New():
    return tubeComputeTrainingMaskSSSS3.New()

class tubeComputeTrainingMaskSSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS3

        Create a new object of the class tubeComputeTrainingMaskSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS3_swigregister(tubeComputeTrainingMaskSSSS3)

def tubeComputeTrainingMaskSSSS4_New():
    return tubeComputeTrainingMaskSSSS4.New()

class tubeComputeTrainingMaskSSSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSSS4

        Create a new object of the class tubeComputeTrainingMaskSSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSSS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSSS4_swigregister(tubeComputeTrainingMaskSSSS4)

def tubeComputeTrainingMaskSSUC2_New():
    return tubeComputeTrainingMaskSSUC2.New()

class tubeComputeTrainingMaskSSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC2

        Create a new object of the class tubeComputeTrainingMaskSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC2_swigregister(tubeComputeTrainingMaskSSUC2)

def tubeComputeTrainingMaskSSUC3_New():
    return tubeComputeTrainingMaskSSUC3.New()

class tubeComputeTrainingMaskSSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC3

        Create a new object of the class tubeComputeTrainingMaskSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC3_swigregister(tubeComputeTrainingMaskSSUC3)

def tubeComputeTrainingMaskSSUC4_New():
    return tubeComputeTrainingMaskSSUC4.New()

class tubeComputeTrainingMaskSSUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUC4

        Create a new object of the class tubeComputeTrainingMaskSSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUC4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUC4_swigregister(tubeComputeTrainingMaskSSUC4)

def tubeComputeTrainingMaskSSUS2_New():
    return tubeComputeTrainingMaskSSUS2.New()

class tubeComputeTrainingMaskSSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS2

        Create a new object of the class tubeComputeTrainingMaskSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS2_swigregister(tubeComputeTrainingMaskSSUS2)

def tubeComputeTrainingMaskSSUS3_New():
    return tubeComputeTrainingMaskSSUS3.New()

class tubeComputeTrainingMaskSSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS3

        Create a new object of the class tubeComputeTrainingMaskSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS3_swigregister(tubeComputeTrainingMaskSSUS3)

def tubeComputeTrainingMaskSSUS4_New():
    return tubeComputeTrainingMaskSSUS4.New()

class tubeComputeTrainingMaskSSUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskSSUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskSSUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskSSUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskSSUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskSSUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskSSUS4

        Create a new object of the class tubeComputeTrainingMaskSSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskSSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskSSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskSSUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskSSUS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskSSUS4_swigregister(tubeComputeTrainingMaskSSUS4)

def tubeComputeTrainingMaskUCD2_New():
    return tubeComputeTrainingMaskUCD2.New()

class tubeComputeTrainingMaskUCD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD2

        Create a new object of the class tubeComputeTrainingMaskUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD2_swigregister(tubeComputeTrainingMaskUCD2)

def tubeComputeTrainingMaskUCD3_New():
    return tubeComputeTrainingMaskUCD3.New()

class tubeComputeTrainingMaskUCD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD3

        Create a new object of the class tubeComputeTrainingMaskUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD3_swigregister(tubeComputeTrainingMaskUCD3)

def tubeComputeTrainingMaskUCD4_New():
    return tubeComputeTrainingMaskUCD4.New()

class tubeComputeTrainingMaskUCD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCD4

        Create a new object of the class tubeComputeTrainingMaskUCD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCD4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCD4_swigregister(tubeComputeTrainingMaskUCD4)

def tubeComputeTrainingMaskUCF2_New():
    return tubeComputeTrainingMaskUCF2.New()

class tubeComputeTrainingMaskUCF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF2

        Create a new object of the class tubeComputeTrainingMaskUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF2_swigregister(tubeComputeTrainingMaskUCF2)

def tubeComputeTrainingMaskUCF3_New():
    return tubeComputeTrainingMaskUCF3.New()

class tubeComputeTrainingMaskUCF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF3

        Create a new object of the class tubeComputeTrainingMaskUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF3_swigregister(tubeComputeTrainingMaskUCF3)

def tubeComputeTrainingMaskUCF4_New():
    return tubeComputeTrainingMaskUCF4.New()

class tubeComputeTrainingMaskUCF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCF4

        Create a new object of the class tubeComputeTrainingMaskUCF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCF4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCF4_swigregister(tubeComputeTrainingMaskUCF4)

def tubeComputeTrainingMaskUCSS2_New():
    return tubeComputeTrainingMaskUCSS2.New()

class tubeComputeTrainingMaskUCSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS2

        Create a new object of the class tubeComputeTrainingMaskUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS2_swigregister(tubeComputeTrainingMaskUCSS2)

def tubeComputeTrainingMaskUCSS3_New():
    return tubeComputeTrainingMaskUCSS3.New()

class tubeComputeTrainingMaskUCSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS3

        Create a new object of the class tubeComputeTrainingMaskUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS3_swigregister(tubeComputeTrainingMaskUCSS3)

def tubeComputeTrainingMaskUCSS4_New():
    return tubeComputeTrainingMaskUCSS4.New()

class tubeComputeTrainingMaskUCSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCSS4

        Create a new object of the class tubeComputeTrainingMaskUCSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCSS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCSS4_swigregister(tubeComputeTrainingMaskUCSS4)

def tubeComputeTrainingMaskUCUC2_New():
    return tubeComputeTrainingMaskUCUC2.New()

class tubeComputeTrainingMaskUCUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC2

        Create a new object of the class tubeComputeTrainingMaskUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC2_swigregister(tubeComputeTrainingMaskUCUC2)

def tubeComputeTrainingMaskUCUC3_New():
    return tubeComputeTrainingMaskUCUC3.New()

class tubeComputeTrainingMaskUCUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC3

        Create a new object of the class tubeComputeTrainingMaskUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC3_swigregister(tubeComputeTrainingMaskUCUC3)

def tubeComputeTrainingMaskUCUC4_New():
    return tubeComputeTrainingMaskUCUC4.New()

class tubeComputeTrainingMaskUCUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUC4

        Create a new object of the class tubeComputeTrainingMaskUCUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUC4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUC4_swigregister(tubeComputeTrainingMaskUCUC4)

def tubeComputeTrainingMaskUCUS2_New():
    return tubeComputeTrainingMaskUCUS2.New()

class tubeComputeTrainingMaskUCUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS2

        Create a new object of the class tubeComputeTrainingMaskUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS2_swigregister(tubeComputeTrainingMaskUCUS2)

def tubeComputeTrainingMaskUCUS3_New():
    return tubeComputeTrainingMaskUCUS3.New()

class tubeComputeTrainingMaskUCUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS3

        Create a new object of the class tubeComputeTrainingMaskUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS3_swigregister(tubeComputeTrainingMaskUCUS3)

def tubeComputeTrainingMaskUCUS4_New():
    return tubeComputeTrainingMaskUCUS4.New()

class tubeComputeTrainingMaskUCUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUCUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUCUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUCUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUCUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUCUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUCUS4

        Create a new object of the class tubeComputeTrainingMaskUCUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUCUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUCUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUCUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUCUS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUCUS4_swigregister(tubeComputeTrainingMaskUCUS4)

def tubeComputeTrainingMaskUSD2_New():
    return tubeComputeTrainingMaskUSD2.New()

class tubeComputeTrainingMaskUSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSD2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD2

        Create a new object of the class tubeComputeTrainingMaskUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSD2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD2_swigregister(tubeComputeTrainingMaskUSD2)

def tubeComputeTrainingMaskUSD3_New():
    return tubeComputeTrainingMaskUSD3.New()

class tubeComputeTrainingMaskUSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSD3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD3

        Create a new object of the class tubeComputeTrainingMaskUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSD3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD3_swigregister(tubeComputeTrainingMaskUSD3)

def tubeComputeTrainingMaskUSD4_New():
    return tubeComputeTrainingMaskUSD4.New()

class tubeComputeTrainingMaskUSD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSD4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSD4

        Create a new object of the class tubeComputeTrainingMaskUSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSD4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSD4_swigregister(tubeComputeTrainingMaskUSD4)

def tubeComputeTrainingMaskUSF2_New():
    return tubeComputeTrainingMaskUSF2.New()

class tubeComputeTrainingMaskUSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSF2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF2

        Create a new object of the class tubeComputeTrainingMaskUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSF2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF2_swigregister(tubeComputeTrainingMaskUSF2)

def tubeComputeTrainingMaskUSF3_New():
    return tubeComputeTrainingMaskUSF3.New()

class tubeComputeTrainingMaskUSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSF3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF3

        Create a new object of the class tubeComputeTrainingMaskUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSF3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF3_swigregister(tubeComputeTrainingMaskUSF3)

def tubeComputeTrainingMaskUSF4_New():
    return tubeComputeTrainingMaskUSF4.New()

class tubeComputeTrainingMaskUSF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSF4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSF4

        Create a new object of the class tubeComputeTrainingMaskUSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSF4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSF4_swigregister(tubeComputeTrainingMaskUSF4)

def tubeComputeTrainingMaskUSSS2_New():
    return tubeComputeTrainingMaskUSSS2.New()

class tubeComputeTrainingMaskUSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSSS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS2

        Create a new object of the class tubeComputeTrainingMaskUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSSS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS2_swigregister(tubeComputeTrainingMaskUSSS2)

def tubeComputeTrainingMaskUSSS3_New():
    return tubeComputeTrainingMaskUSSS3.New()

class tubeComputeTrainingMaskUSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSSS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS3

        Create a new object of the class tubeComputeTrainingMaskUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSSS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS3_swigregister(tubeComputeTrainingMaskUSSS3)

def tubeComputeTrainingMaskUSSS4_New():
    return tubeComputeTrainingMaskUSSS4.New()

class tubeComputeTrainingMaskUSSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSSS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSSS4

        Create a new object of the class tubeComputeTrainingMaskUSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSSS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSSS4_swigregister(tubeComputeTrainingMaskUSSS4)

def tubeComputeTrainingMaskUSUC2_New():
    return tubeComputeTrainingMaskUSUC2.New()

class tubeComputeTrainingMaskUSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUC2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC2

        Create a new object of the class tubeComputeTrainingMaskUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUC2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC2_swigregister(tubeComputeTrainingMaskUSUC2)

def tubeComputeTrainingMaskUSUC3_New():
    return tubeComputeTrainingMaskUSUC3.New()

class tubeComputeTrainingMaskUSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUC3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC3

        Create a new object of the class tubeComputeTrainingMaskUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUC3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC3_swigregister(tubeComputeTrainingMaskUSUC3)

def tubeComputeTrainingMaskUSUC4_New():
    return tubeComputeTrainingMaskUSUC4.New()

class tubeComputeTrainingMaskUSUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUC4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUC4

        Create a new object of the class tubeComputeTrainingMaskUSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUC4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUC4_swigregister(tubeComputeTrainingMaskUSUC4)

def tubeComputeTrainingMaskUSUS2_New():
    return tubeComputeTrainingMaskUSUS2.New()

class tubeComputeTrainingMaskUSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUS2_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS2

        Create a new object of the class tubeComputeTrainingMaskUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUS2 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS2_swigregister(tubeComputeTrainingMaskUSUS2)

def tubeComputeTrainingMaskUSUS3_New():
    return tubeComputeTrainingMaskUSUS3.New()

class tubeComputeTrainingMaskUSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUS3_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS3

        Create a new object of the class tubeComputeTrainingMaskUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUS3 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS3_swigregister(tubeComputeTrainingMaskUSUS3)

def tubeComputeTrainingMaskUSUS4_New():
    return tubeComputeTrainingMaskUSUS4.New()

class tubeComputeTrainingMaskUSUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTrainingMaskUSUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTrainingMaskUSUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTrainingMaskUSUS4_Pointer"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_Clone(self)

    def SetGap(self, value):
        r"""
        SetGap(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_SetGap(self, value)

    def GetGap(self):
        r"""GetGap(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetGap(self)

    def SetObjectWidth(self, value):
        r"""
        SetObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_SetObjectWidth(self, value)

    def GetObjectWidth(self):
        r"""GetObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetObjectWidth(self)

    def SetNotObjectWidth(self, value):
        r"""
        SetNotObjectWidth(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_SetNotObjectWidth(self, value)

    def GetNotObjectWidth(self):
        r"""GetNotObjectWidth(self) -> double"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetNotObjectWidth(self)

    def GetObjectMask(self):
        r"""GetObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetObjectMask(self)

    def GetNotObjectMask(self):
        r"""GetNotObjectMask(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetNotObjectMask(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_SetInput(self, value)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeTrainingMaskPython.delete_tubeComputeTrainingMaskUSUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTrainingMaskUSUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTrainingMaskUSUS4

        Create a new object of the class tubeComputeTrainingMaskUSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTrainingMaskUSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTrainingMaskUSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTrainingMaskUSUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTrainingMaskUSUS4 in _tubeComputeTrainingMaskPython:
_tubeComputeTrainingMaskPython.tubeComputeTrainingMaskUSUS4_swigregister(tubeComputeTrainingMaskUSUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_training_mask(*args,  gap: float=..., object_width: float=..., not_object_width: float=...,**kwargs):
    """Functional interface for ComputeTrainingMask"""
    import itk

    kwarg_typehints = { 'gap':gap,'object_width':object_width,'not_object_width':not_object_width }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeTrainingMask.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_training_mask_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeTrainingMask
    compute_training_mask.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_training_mask.__doc__ = filter_object.__doc__



