# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeTubeMathPython
else:
    import _tubeTubeMathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkArrayPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkOptimizerParametersPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkTransformBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkTubeSpatialObjectPython
import itk.itkTubeSpatialObjectPointPython
import itk.itkSpatialObjectPointPython

def tubeTubeMath2D_New():
    return tubeTubeMath2D.New()

class tubeTubeMath2D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath2D_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath2D_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2D_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2D_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2D_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath2D_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageD2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageD2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageD2 const *

        """
        return _tubeTubeMathPython.tubeTubeMath2D_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2D_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2D_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2D_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageD2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageD2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath2D_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath2D_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath2D_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath2D_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath2D

        Create a new object of the class tubeTubeMath2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath2D in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath2D_swigregister(tubeTubeMath2D)

def tubeTubeMath2F_New():
    return tubeTubeMath2F.New()

class tubeTubeMath2F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath2F_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath2F_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2F_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2F_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2F_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath2F_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageF2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageF2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 const *

        """
        return _tubeTubeMathPython.tubeTubeMath2F_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2F_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2F_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2F_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageF2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageF2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath2F_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath2F_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath2F_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath2F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath2F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath2F_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath2F

        Create a new object of the class tubeTubeMath2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath2F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath2F in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath2F_swigregister(tubeTubeMath2F)

def tubeTubeMath2SS_New():
    return tubeTubeMath2SS.New()

class tubeTubeMath2SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath2SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath2SS_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2SS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath2SS_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2SS_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2SS_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2SS_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath2SS_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageSS2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageSS2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageSS2 const *

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2SS_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2SS_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2SS_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageSS2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageSS2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath2SS_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath2SS_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath2SS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath2SS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath2SS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath2SS

        Create a new object of the class tubeTubeMath2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath2SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath2SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath2SS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath2SS in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath2SS_swigregister(tubeTubeMath2SS)

def tubeTubeMath2UC_New():
    return tubeTubeMath2UC.New()

class tubeTubeMath2UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath2UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath2UC_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2UC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath2UC_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2UC_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2UC_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2UC_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath2UC_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUC2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUC2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUC2 const *

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2UC_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2UC_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2UC_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUC2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUC2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath2UC_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath2UC_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath2UC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath2UC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath2UC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath2UC

        Create a new object of the class tubeTubeMath2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath2UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath2UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath2UC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath2UC in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath2UC_swigregister(tubeTubeMath2UC)

def tubeTubeMath2US_New():
    return tubeTubeMath2US.New()

class tubeTubeMath2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath2US_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath2US_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath2US_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject2 *

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2US_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject2"""
        return _tubeTubeMathPython.tubeTubeMath2US_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath2US_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUS2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUS2 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUS2 const *

        """
        return _tubeTubeMathPython.tubeTubeMath2US_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2US_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2US_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF2"""
        return _tubeTubeMathPython.tubeTubeMath2US_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUS2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUS2 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath2US_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath2US_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath2US_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath2US_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath2US

        Create a new object of the class tubeTubeMath2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath2US in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath2US_swigregister(tubeTubeMath2US)

def tubeTubeMath3D_New():
    return tubeTubeMath3D.New()

class tubeTubeMath3D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath3D_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath3D_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3D_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3D_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3D_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath3D_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageD3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageD3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageD3 const *

        """
        return _tubeTubeMathPython.tubeTubeMath3D_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3D_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3D_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3D_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageD3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageD3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath3D_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath3D_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath3D_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath3D_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath3D

        Create a new object of the class tubeTubeMath3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath3D in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath3D_swigregister(tubeTubeMath3D)

def tubeTubeMath3F_New():
    return tubeTubeMath3F.New()

class tubeTubeMath3F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath3F_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath3F_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3F_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3F_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3F_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath3F_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageF3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageF3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 const *

        """
        return _tubeTubeMathPython.tubeTubeMath3F_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3F_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3F_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3F_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageF3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageF3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath3F_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath3F_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath3F_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath3F_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath3F

        Create a new object of the class tubeTubeMath3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath3F in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath3F_swigregister(tubeTubeMath3F)

def tubeTubeMath3SS_New():
    return tubeTubeMath3SS.New()

class tubeTubeMath3SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath3SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath3SS_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3SS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath3SS_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3SS_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3SS_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3SS_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath3SS_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageSS3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageSS3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageSS3 const *

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3SS_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3SS_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3SS_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageSS3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageSS3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath3SS_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath3SS_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath3SS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath3SS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath3SS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath3SS

        Create a new object of the class tubeTubeMath3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath3SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath3SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath3SS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath3SS in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath3SS_swigregister(tubeTubeMath3SS)

def tubeTubeMath3UC_New():
    return tubeTubeMath3UC.New()

class tubeTubeMath3UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath3UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath3UC_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3UC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath3UC_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3UC_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3UC_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3UC_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath3UC_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUC3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUC3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUC3 const *

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3UC_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3UC_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3UC_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUC3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUC3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath3UC_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath3UC_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath3UC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath3UC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath3UC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath3UC

        Create a new object of the class tubeTubeMath3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath3UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath3UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath3UC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath3UC in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath3UC_swigregister(tubeTubeMath3UC)

def tubeTubeMath3US_New():
    return tubeTubeMath3US.New()

class tubeTubeMath3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeTubeMath3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeTubeMath3US_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeTubeMath3US_Pointer"""
        return _tubeTubeMathPython.tubeTubeMath3US_Clone(self)

    def SetInputTubeGroup(self, tubeGroup):
        r"""
        SetInputTubeGroup(self, tubeGroup)

        Parameters
        ----------
        tubeGroup: itkGroupSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetInputTubeGroup(self, tubeGroup)

    def SetInputTube(self, tube):
        r"""
        SetInputTube(self, tube)

        Parameters
        ----------
        tube: itkTubeSpatialObject3 *

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetInputTube(self, tube)

    def GetOutputTubeGroup(self):
        r"""GetOutputTubeGroup(self) -> itkGroupSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3US_GetOutputTubeGroup(self)

    def GetOutputTube(self):
        r"""GetOutputTube(self) -> itkTubeSpatialObject3"""
        return _tubeTubeMathPython.tubeTubeMath3US_GetOutputTube(self)

    def SetCurrentTubeId(self, tubeId):
        r"""
        SetCurrentTubeId(self, tubeId)

        Parameters
        ----------
        tubeId: int

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetCurrentTubeId(self, tubeId)

    def SetUseAllTubes(self):
        r"""SetUseAllTubes(self)"""
        return _tubeTubeMathPython.tubeTubeMath3US_SetUseAllTubes(self)

    def SetPointValues(self, propertyId, val, blend=1):
        r"""
        SetPointValues(self, propertyId, val, blend=1)

        Parameters
        ----------
        propertyId: std::string
        val: double
        blend: double

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetPointValues(self, propertyId, val, blend)

    def SetPointValuesFromImage(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImage(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUS3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetPointValuesFromImage(self, inputImage, propertyId)

    def SetPointValuesFromImageMean(self, inputImage, propertyId):
        r"""
        SetPointValuesFromImageMean(self, inputImage, propertyId)

        Parameters
        ----------
        inputImage: itkImageUS3 const *
        propertyId: std::string

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetPointValuesFromImageMean(self, inputImage, propertyId)

    def ComputeTubeRegions(self, referenceImage):
        r"""
        ComputeTubeRegions(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUS3 const *

        """
        return _tubeTubeMathPython.tubeTubeMath3US_ComputeTubeRegions(self, referenceImage)

    def GetTubeRadiusImage(self):
        r"""GetTubeRadiusImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3US_GetTubeRadiusImage(self)

    def GetTubePointIdImage(self):
        r"""GetTubePointIdImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3US_GetTubePointIdImage(self)

    def GetTubeDistanceImage(self):
        r"""GetTubeDistanceImage(self) -> itkImageF3"""
        return _tubeTubeMathPython.tubeTubeMath3US_GetTubeDistanceImage(self)

    def SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUS3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetPointValuesFromTubeRegions(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3):
        r"""
        SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor=1, maxRFactor=3)

        Parameters
        ----------
        inputImage: itkImageUS3 const *
        propertyId: std::string const &
        minRFactor: double
        maxRFactor: double

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SetPointValuesFromTubeRadius(self, inputImage, propertyId, minRFactor, maxRFactor)

    def SmoothTube(self, *args):
        r"""
        SmoothTube(self, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SmoothTube(self, *args)

    def SmoothTubeProperty(self, *args):
        r"""
        SmoothTubeProperty(self, propertyId, h=2, smoothTubeFunction="SMOOTH_TUBE_USING_INDEX_AVERAGE")

        Parameters
        ----------
        propertyId: std::string const &
        h: double
        smoothTubeFunction: std::string const &

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SmoothTubeProperty(self, *args)

    def RenumberPoints(self):
        r"""RenumberPoints(self)"""
        return _tubeTubeMathPython.tubeTubeMath3US_RenumberPoints(self)

    def SubsampleTube(self, N=2):
        r"""
        SubsampleTube(self, N=2)

        Parameters
        ----------
        N: int

        """
        return _tubeTubeMathPython.tubeTubeMath3US_SubsampleTube(self, N)

    def ComputeTubeLength(self):
        r"""ComputeTubeLength(self) -> double"""
        return _tubeTubeMathPython.tubeTubeMath3US_ComputeTubeLength(self)
    __swig_destroy__ = _tubeTubeMathPython.delete_tubeTubeMath3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeTubeMath3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeTubeMathPython.tubeTubeMath3US_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeTubeMath3US

        Create a new object of the class tubeTubeMath3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeTubeMath3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeTubeMath3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeTubeMath3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeTubeMath3US in _tubeTubeMathPython:
_tubeTubeMathPython.tubeTubeMath3US_swigregister(tubeTubeMath3US)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def tube_math(*args,  input_tube_group=..., input_tube=..., current_tube_id: int=..., point_values: str=..., point_values_from_image: itkt.Image=..., point_values_from_image_mean: itkt.Image=..., point_values_from_tube_regions: itkt.Image=..., point_values_from_tube_radius: itkt.Image=...,**kwargs):
    """Functional interface for TubeMath"""
    import itk

    kwarg_typehints = { 'input_tube_group':input_tube_group,'input_tube':input_tube,'current_tube_id':current_tube_id,'point_values':point_values,'point_values_from_image':point_values_from_image,'point_values_from_image_mean':point_values_from_image_mean,'point_values_from_tube_regions':point_values_from_tube_regions,'point_values_from_tube_radius':point_values_from_tube_radius }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TubeMath.New(*args, **kwargs)

    return instance.__internal_call__()

def tube_math_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.TubeMath
    tube_math.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    tube_math.__doc__ = filter_object.__doc__



