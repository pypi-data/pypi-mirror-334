# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeEnhanceTubesUsingDiscriminantAnalysisPython
else:
    import _tubeEnhanceTubesUsingDiscriminantAnalysisPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython

def tubeEnhanceTubesUsingDiscriminantAnalysisDD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDD2)

def tubeEnhanceTubesUsingDiscriminantAnalysisDD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDD3)

def tubeEnhanceTubesUsingDiscriminantAnalysisDD4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDD4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDD4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDD4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDD4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDD4)

def tubeEnhanceTubesUsingDiscriminantAnalysisDF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDF2)

def tubeEnhanceTubesUsingDiscriminantAnalysisDF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDF3)

def tubeEnhanceTubesUsingDiscriminantAnalysisDF4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDF4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDF4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDF4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDF4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDF4)

def tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDSS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDSS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDSS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDSS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDSS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDSS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDSS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUC2)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUC3)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUC4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUC4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUC4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUC4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUC4)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisDUS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisDUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisDUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageD4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageD4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisDUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisDUS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisDUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisDUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisDUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisDUS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisDUS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisDUS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisFD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFD2)

def tubeEnhanceTubesUsingDiscriminantAnalysisFD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFD3)

def tubeEnhanceTubesUsingDiscriminantAnalysisFD4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFD4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFD4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFD4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFD4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFD4)

def tubeEnhanceTubesUsingDiscriminantAnalysisFF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFF2)

def tubeEnhanceTubesUsingDiscriminantAnalysisFF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFF3)

def tubeEnhanceTubesUsingDiscriminantAnalysisFF4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFF4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFF4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFF4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFF4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFF4)

def tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFSS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFSS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFSS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFSS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFSS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFSS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFSS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUC2)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUC3)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUC4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUC4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUC4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUC4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUC4)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisFUS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisFUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisFUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisFUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisFUS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisFUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisFUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisFUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisFUS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisFUS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisFUS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSD2)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSD3)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSD4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSD4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSD4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSD4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSD4)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSF2)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSF3)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSF4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSF4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSF4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSF4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSF4)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSSS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSSS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSSS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUC2)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUC3)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUC4)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageSS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisSSUS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCD2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCD3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCD4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCD4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCD4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCD4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCD4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCF2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCF3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCF4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCF4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCF4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCF4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCF4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCSS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCSS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCSS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUC2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUC3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUC4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUC4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUCUS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSD2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSD2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSD3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSD3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSD4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSD4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSD4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSD4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSD4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSF2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSF2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSF3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSF3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSF4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: float

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> float"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSF4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSF4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSF4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSF4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSSS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSSS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSSS4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUC2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUC3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned char

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned char"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUC4)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF2

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUS2)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF3

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF3"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUS3)

def tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_New():
    return tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4.New()

class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_Pointer"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetInput(self, value)

    def AddInput(self, value):
        r"""
        AddInput(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_AddInput(self, value)

    def GetInput(self, i):
        r"""
        GetInput(self, i) -> itkImageUS4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetInput(self, i)

    def SetLabelMap(self, value):
        r"""
        SetLabelMap(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetLabelMap(self, value)

    def GetLabelMap(self):
        r"""GetLabelMap(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetLabelMap(self)

    def SetRidgeId(self, value):
        r"""
        SetRidgeId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetRidgeId(self, value)

    def GetRidgeId(self):
        r"""GetRidgeId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetRidgeId(self)

    def SetBackgroundId(self, value):
        r"""
        SetBackgroundId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetBackgroundId(self, value)

    def GetBackgroundId(self):
        r"""GetBackgroundId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetBackgroundId(self)

    def SetUnknownId(self, value):
        r"""
        SetUnknownId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetUnknownId(self, value)

    def GetUnknownId(self):
        r"""GetUnknownId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetUnknownId(self)

    def SetIgnoreId(self, value):
        r"""
        SetIgnoreId(self, value)

        Parameters
        ----------
        value: unsigned short

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetIgnoreId(self, value)

    def GetIgnoreId(self):
        r"""GetIgnoreId(self) -> unsigned short"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetIgnoreId(self)

    def SetScales(self, value):
        r"""
        SetScales(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetScales(self, value)

    def GetScales(self):
        r"""GetScales(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetScales(self)

    def SetInputWhitenMeans(self, value):
        r"""
        SetInputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetInputWhitenMeans(self, value)

    def GetInputWhitenMeans(self):
        r"""GetInputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetInputWhitenMeans(self)

    def SetInputWhitenStdDevs(self, value):
        r"""
        SetInputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetInputWhitenStdDevs(self, value)

    def GetInputWhitenStdDevs(self):
        r"""GetInputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetInputWhitenStdDevs(self)

    def SetOutputWhitenMeans(self, value):
        r"""
        SetOutputWhitenMeans(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetOutputWhitenMeans(self, value)

    def GetOutputWhitenMeans(self):
        r"""GetOutputWhitenMeans(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetOutputWhitenMeans(self)

    def SetOutputWhitenStdDevs(self, value):
        r"""
        SetOutputWhitenStdDevs(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetOutputWhitenStdDevs(self, value)

    def GetOutputWhitenStdDevs(self):
        r"""GetOutputWhitenStdDevs(self) -> vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetOutputWhitenStdDevs(self)

    def GetNumberOfBasis(self):
        r"""GetNumberOfBasis(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetNumberOfBasis(self)

    def GetBasisValue(self, i):
        r"""
        GetBasisValue(self, i) -> double

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetBasisValue(self, i)

    def SetBasisValue(self, i, value):
        r"""
        SetBasisValue(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetBasisValue(self, i, value)

    def GetBasisVector(self, i):
        r"""
        GetBasisVector(self, i) -> vnl_vectorD

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetBasisVector(self, i)

    def SetBasisVector(self, i, value):
        r"""
        SetBasisVector(self, i, value)

        Parameters
        ----------
        i: unsigned int
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetBasisVector(self, i, value)

    def GetBasisMatrix(self):
        r"""GetBasisMatrix(self) -> vnl_matrixD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetBasisMatrix(self)

    def SetBasisMatrix(self, value):
        r"""
        SetBasisMatrix(self, value)

        Parameters
        ----------
        value: vnl_matrixD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetBasisMatrix(self, value)

    def GetBasisValues(self):
        r"""GetBasisValues(self) -> vnl_vectorD"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetBasisValues(self)

    def SetBasisValues(self, value):
        r"""
        SetBasisValues(self, value)

        Parameters
        ----------
        value: vnl_vectorD

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetBasisValues(self, value)

    def GetClassProbabilityImage(self, i):
        r"""
        GetClassProbabilityImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetClassProbabilityImage(self, i)

    def GetClassLikelihoodRatioImage(self, i):
        r"""
        GetClassLikelihoodRatioImage(self, i) -> itkImageF4

        Parameters
        ----------
        i: unsigned int

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetClassLikelihoodRatioImage(self, i)

    def LoadParameterFile(self, filename):
        r"""
        LoadParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_LoadParameterFile(self, filename)

    def SaveParameterFile(self, filename):
        r"""
        SaveParameterFile(self, filename)

        Parameters
        ----------
        filename: std::string const &

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SaveParameterFile(self, filename)

    def SetSeedTolerance(self, value):
        r"""
        SetSeedTolerance(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetSeedTolerance(self, value)

    def GetSeedTolerance(self):
        r"""GetSeedTolerance(self) -> double"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetSeedTolerance(self)

    def SetSkeletonize(self, value):
        r"""
        SetSkeletonize(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetSkeletonize(self, value)

    def GetSkeletonize(self):
        r"""GetSkeletonize(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetSkeletonize(self)

    def SetUseIntensityOnly(self, value):
        r"""
        SetUseIntensityOnly(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetUseIntensityOnly(self, value)

    def GetUseIntensityOnly(self):
        r"""GetUseIntensityOnly(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetUseIntensityOnly(self)

    def SetUseFeatureMath(self, value):
        r"""
        SetUseFeatureMath(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetUseFeatureMath(self, value)

    def GetUseFeatureMath(self):
        r"""GetUseFeatureMath(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetUseFeatureMath(self)

    def SetTrainClassifier(self, value):
        r"""
        SetTrainClassifier(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_SetTrainClassifier(self, value)

    def GetTrainClassifier(self):
        r"""GetTrainClassifier(self) -> bool"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetTrainClassifier(self)

    def ClassifyImages(self):
        r"""ClassifyImages(self)"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_ClassifyImages(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetOutput(self)

    def GetOutputSeedScales(self):
        r"""GetOutputSeedScales(self) -> itkImageF4"""
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_GetOutputSeedScales(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiscriminantAnalysisPython.delete_tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4

        Create a new object of the class tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4 in _tubeEnhanceTubesUsingDiscriminantAnalysisPython:
_tubeEnhanceTubesUsingDiscriminantAnalysisPython.tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4_swigregister(tubeEnhanceTubesUsingDiscriminantAnalysisUSUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def enhance_tubes_using_discriminant_analysis(*args,  label_map: itkt.Image=..., ridge_id: int=..., background_id: int=..., unknown_id: int=..., ignore_id: int=..., scales: Sequence[float]=..., input_whiten_means: Sequence[float]=..., input_whiten_std_devs: Sequence[float]=..., output_whiten_means: Sequence[float]=..., output_whiten_std_devs: Sequence[float]=..., basis_value: int=..., basis_vector: int=..., basis_matrix=..., basis_values=..., seed_tolerance: float=..., skeletonize: bool=..., use_intensity_only: bool=..., use_feature_math: bool=..., train_classifier: bool=...,**kwargs):
    """Functional interface for EnhanceTubesUsingDiscriminantAnalysis"""
    import itk

    kwarg_typehints = { 'label_map':label_map,'ridge_id':ridge_id,'background_id':background_id,'unknown_id':unknown_id,'ignore_id':ignore_id,'scales':scales,'input_whiten_means':input_whiten_means,'input_whiten_std_devs':input_whiten_std_devs,'output_whiten_means':output_whiten_means,'output_whiten_std_devs':output_whiten_std_devs,'basis_value':basis_value,'basis_vector':basis_vector,'basis_matrix':basis_matrix,'basis_values':basis_values,'seed_tolerance':seed_tolerance,'skeletonize':skeletonize,'use_intensity_only':use_intensity_only,'use_feature_math':use_feature_math,'train_classifier':train_classifier }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.EnhanceTubesUsingDiscriminantAnalysis.New(*args, **kwargs)

    return instance.__internal_call__()

def enhance_tubes_using_discriminant_analysis_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.EnhanceTubesUsingDiscriminantAnalysis
    enhance_tubes_using_discriminant_analysis.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    enhance_tubes_using_discriminant_analysis.__doc__ = filter_object.__doc__



