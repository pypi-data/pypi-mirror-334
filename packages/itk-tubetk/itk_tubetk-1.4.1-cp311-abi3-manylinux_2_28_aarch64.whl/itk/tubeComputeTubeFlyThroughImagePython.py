# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTubeFlyThroughImagePython
else:
    import _tubeComputeTubeFlyThroughImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkArrayPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkOptimizerParametersPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython

def tubeComputeTubeFlyThroughImageD2_New():
    return tubeComputeTubeFlyThroughImageD2.New()

class tubeComputeTubeFlyThroughImageD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageD2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageD2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageD2

        Create a new object of the class tubeComputeTubeFlyThroughImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageD2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD2_swigregister(tubeComputeTubeFlyThroughImageD2)

def tubeComputeTubeFlyThroughImageD3_New():
    return tubeComputeTubeFlyThroughImageD3.New()

class tubeComputeTubeFlyThroughImageD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageD3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageD3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageD3

        Create a new object of the class tubeComputeTubeFlyThroughImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageD3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageD3_swigregister(tubeComputeTubeFlyThroughImageD3)

def tubeComputeTubeFlyThroughImageF2_New():
    return tubeComputeTubeFlyThroughImageF2.New()

class tubeComputeTubeFlyThroughImageF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageF2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageF2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageF2

        Create a new object of the class tubeComputeTubeFlyThroughImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageF2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF2_swigregister(tubeComputeTubeFlyThroughImageF2)

def tubeComputeTubeFlyThroughImageF3_New():
    return tubeComputeTubeFlyThroughImageF3.New()

class tubeComputeTubeFlyThroughImageF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageF3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageF3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageF3

        Create a new object of the class tubeComputeTubeFlyThroughImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageF3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageF3_swigregister(tubeComputeTubeFlyThroughImageF3)

def tubeComputeTubeFlyThroughImageSS2_New():
    return tubeComputeTubeFlyThroughImageSS2.New()

class tubeComputeTubeFlyThroughImageSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageSS2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageSS2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageSS2

        Create a new object of the class tubeComputeTubeFlyThroughImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageSS2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS2_swigregister(tubeComputeTubeFlyThroughImageSS2)

def tubeComputeTubeFlyThroughImageSS3_New():
    return tubeComputeTubeFlyThroughImageSS3.New()

class tubeComputeTubeFlyThroughImageSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageSS3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageSS3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageSS3

        Create a new object of the class tubeComputeTubeFlyThroughImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageSS3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageSS3_swigregister(tubeComputeTubeFlyThroughImageSS3)

def tubeComputeTubeFlyThroughImageUC2_New():
    return tubeComputeTubeFlyThroughImageUC2.New()

class tubeComputeTubeFlyThroughImageUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageUC2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageUC2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUC2

        Create a new object of the class tubeComputeTubeFlyThroughImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUC2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC2_swigregister(tubeComputeTubeFlyThroughImageUC2)

def tubeComputeTubeFlyThroughImageUC3_New():
    return tubeComputeTubeFlyThroughImageUC3.New()

class tubeComputeTubeFlyThroughImageUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageUC3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageUC3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUC3

        Create a new object of the class tubeComputeTubeFlyThroughImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUC3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUC3_swigregister(tubeComputeTubeFlyThroughImageUC3)

def tubeComputeTubeFlyThroughImageUS2_New():
    return tubeComputeTubeFlyThroughImageUS2.New()

class tubeComputeTubeFlyThroughImageUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageUS2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageUS2_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC2"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUS2

        Create a new object of the class tubeComputeTubeFlyThroughImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUS2 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS2_swigregister(tubeComputeTubeFlyThroughImageUS2)

def tubeComputeTubeFlyThroughImageUS3_New():
    return tubeComputeTubeFlyThroughImageUS3.New()

class tubeComputeTubeFlyThroughImageUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeFlyThroughImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeFlyThroughImageUS3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeFlyThroughImageUS3_Pointer"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_Clone(self)

    def SetTubeId(self, value):
        r"""
        SetTubeId(self, value)

        Parameters
        ----------
        value: unsigned long

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetTubeId(self, value)

    def GetTubeId(self):
        r"""GetTubeId(self) -> unsigned long"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetTubeId(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetInputImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3 const *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkGroupSpatialObject3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetOutput(self)

    def GetOutputMask(self):
        r"""GetOutputMask(self) -> itkImageUC3"""
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_GetOutputMask(self)
    __swig_destroy__ = _tubeComputeTubeFlyThroughImagePython.delete_tubeComputeTubeFlyThroughImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeFlyThroughImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeFlyThroughImageUS3

        Create a new object of the class tubeComputeTubeFlyThroughImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeFlyThroughImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeFlyThroughImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeFlyThroughImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeFlyThroughImageUS3 in _tubeComputeTubeFlyThroughImagePython:
_tubeComputeTubeFlyThroughImagePython.tubeComputeTubeFlyThroughImageUS3_swigregister(tubeComputeTubeFlyThroughImageUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_tube_fly_through_image(*args,  tube_id: int=...,**kwargs):
    """Functional interface for ComputeTubeFlyThroughImage"""
    import itk

    kwarg_typehints = { 'tube_id':tube_id }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeTubeFlyThroughImage.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_tube_fly_through_image_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeTubeFlyThroughImage
    compute_tube_fly_through_image.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_tube_fly_through_image.__doc__ = filter_object.__doc__



