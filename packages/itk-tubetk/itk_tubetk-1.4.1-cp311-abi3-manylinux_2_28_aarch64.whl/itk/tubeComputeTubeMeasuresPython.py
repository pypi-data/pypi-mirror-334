# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeTubeMeasuresPython
else:
    import _tubeComputeTubeMeasuresPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython

def tubeComputeTubeMeasuresD2_New():
    return tubeComputeTubeMeasuresD2.New()

class tubeComputeTubeMeasuresD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresD2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresD2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD2

        Create a new object of the class tubeComputeTubeMeasuresD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresD2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD2_swigregister(tubeComputeTubeMeasuresD2)

def tubeComputeTubeMeasuresD3_New():
    return tubeComputeTubeMeasuresD3.New()

class tubeComputeTubeMeasuresD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresD3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresD3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageD3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresD3

        Create a new object of the class tubeComputeTubeMeasuresD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresD3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresD3_swigregister(tubeComputeTubeMeasuresD3)

def tubeComputeTubeMeasuresF2_New():
    return tubeComputeTubeMeasuresF2.New()

class tubeComputeTubeMeasuresF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresF2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresF2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF2

        Create a new object of the class tubeComputeTubeMeasuresF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresF2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF2_swigregister(tubeComputeTubeMeasuresF2)

def tubeComputeTubeMeasuresF3_New():
    return tubeComputeTubeMeasuresF3.New()

class tubeComputeTubeMeasuresF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresF3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresF3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresF3

        Create a new object of the class tubeComputeTubeMeasuresF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresF3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresF3_swigregister(tubeComputeTubeMeasuresF3)

def tubeComputeTubeMeasuresSS2_New():
    return tubeComputeTubeMeasuresSS2.New()

class tubeComputeTubeMeasuresSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresSS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresSS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS2

        Create a new object of the class tubeComputeTubeMeasuresSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresSS2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS2_swigregister(tubeComputeTubeMeasuresSS2)

def tubeComputeTubeMeasuresSS3_New():
    return tubeComputeTubeMeasuresSS3.New()

class tubeComputeTubeMeasuresSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresSS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresSS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageSS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresSS3

        Create a new object of the class tubeComputeTubeMeasuresSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresSS3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresSS3_swigregister(tubeComputeTubeMeasuresSS3)

def tubeComputeTubeMeasuresUC2_New():
    return tubeComputeTubeMeasuresUC2.New()

class tubeComputeTubeMeasuresUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresUC2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresUC2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC2

        Create a new object of the class tubeComputeTubeMeasuresUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUC2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC2_swigregister(tubeComputeTubeMeasuresUC2)

def tubeComputeTubeMeasuresUC3_New():
    return tubeComputeTubeMeasuresUC3.New()

class tubeComputeTubeMeasuresUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresUC3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresUC3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUC3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUC3

        Create a new object of the class tubeComputeTubeMeasuresUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUC3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUC3_swigregister(tubeComputeTubeMeasuresUC3)

def tubeComputeTubeMeasuresUS2_New():
    return tubeComputeTubeMeasuresUS2.New()

class tubeComputeTubeMeasuresUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresUS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresUS2_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF2"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS2

        Create a new object of the class tubeComputeTubeMeasuresUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUS2 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS2_swigregister(tubeComputeTubeMeasuresUS2)

def tubeComputeTubeMeasuresUS3_New():
    return tubeComputeTubeMeasuresUS3.New()

class tubeComputeTubeMeasuresUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeTubeMeasuresUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeTubeMeasuresUS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeTubeMeasuresUS3_Pointer"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_Clone(self)

    def SetScale(self, value):
        r"""
        SetScale(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetScale(self, value)

    def GetScale(self):
        r"""GetScale(self) -> int"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetScale(self)

    def SetInputImage(self, value):
        r"""
        SetInputImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_SetInputImage(self, value)

    def GetInputImage(self):
        r"""GetInputImage(self) -> itkImageUS3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetInputImage(self)

    def GetRidgeness(self):
        r"""GetRidgeness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRidgeness(self)

    def GetRoundness(self):
        r"""GetRoundness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetRoundness(self)

    def GetCurvature(self):
        r"""GetCurvature(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetCurvature(self)

    def GetLevelness(self):
        r"""GetLevelness(self) -> itkImageF3"""
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_GetLevelness(self)
    __swig_destroy__ = _tubeComputeTubeMeasuresPython.delete_tubeComputeTubeMeasuresUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeTubeMeasuresUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeTubeMeasuresUS3

        Create a new object of the class tubeComputeTubeMeasuresUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeTubeMeasuresUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeTubeMeasuresUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeTubeMeasuresUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeTubeMeasuresUS3 in _tubeComputeTubeMeasuresPython:
_tubeComputeTubeMeasuresPython.tubeComputeTubeMeasuresUS3_swigregister(tubeComputeTubeMeasuresUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_tube_measures(*args,  scale: int=...,**kwargs):
    """Functional interface for ComputeTubeMeasures"""
    import itk

    kwarg_typehints = { 'scale':scale }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeTubeMeasures.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_tube_measures_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeTubeMeasures
    compute_tube_measures.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_tube_measures.__doc__ = filter_object.__doc__



