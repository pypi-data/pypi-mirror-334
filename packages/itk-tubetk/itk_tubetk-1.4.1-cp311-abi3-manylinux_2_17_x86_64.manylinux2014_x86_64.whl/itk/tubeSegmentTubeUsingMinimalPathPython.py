# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeSegmentTubeUsingMinimalPathPython
else:
    import _tubeSegmentTubeUsingMinimalPathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkGroupSpatialObjectPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkArrayPython
import itk.itkMapContainerPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkImageRegionPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkRGBPixelPython

def tubeSegmentTubeUsingMinimalPath2D_New():
    return tubeSegmentTubeUsingMinimalPath2D.New()

class tubeSegmentTubeUsingMinimalPath2D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath2D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath2D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageD2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageD2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageD2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageD2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD2,std::allocator< itkPointD2 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath2D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2D in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2D_swigregister(tubeSegmentTubeUsingMinimalPath2D)

def tubeSegmentTubeUsingMinimalPath2F_New():
    return tubeSegmentTubeUsingMinimalPath2F.New()

class tubeSegmentTubeUsingMinimalPath2F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath2F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath2F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageF2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageF2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageF2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageF2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD2,std::allocator< itkPointD2 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath2F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2F in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2F_swigregister(tubeSegmentTubeUsingMinimalPath2F)

def tubeSegmentTubeUsingMinimalPath2SS_New():
    return tubeSegmentTubeUsingMinimalPath2SS.New()

class tubeSegmentTubeUsingMinimalPath2SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath2SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath2SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageSS2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageSS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageSS2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageSS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD2,std::allocator< itkPointD2 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2SS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath2SS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2SS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2SS in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2SS_swigregister(tubeSegmentTubeUsingMinimalPath2SS)

def tubeSegmentTubeUsingMinimalPath2UC_New():
    return tubeSegmentTubeUsingMinimalPath2UC.New()

class tubeSegmentTubeUsingMinimalPath2UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath2UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath2UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUC2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUC2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUC2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUC2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD2,std::allocator< itkPointD2 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2UC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath2UC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2UC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2UC in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2UC_swigregister(tubeSegmentTubeUsingMinimalPath2UC)

def tubeSegmentTubeUsingMinimalPath2US_New():
    return tubeSegmentTubeUsingMinimalPath2US.New()

class tubeSegmentTubeUsingMinimalPath2US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath2US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath2US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath2US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUS2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUS2_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUS2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD2

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject2_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD2,std::allocator< itkPointD2 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath2US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath2US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath2US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath2US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath2US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath2US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath2US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath2US in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath2US_swigregister(tubeSegmentTubeUsingMinimalPath2US)

def tubeSegmentTubeUsingMinimalPath3D_New():
    return tubeSegmentTubeUsingMinimalPath3D.New()

class tubeSegmentTubeUsingMinimalPath3D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath3D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath3D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageD3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageD3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageD3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageD3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD3,std::allocator< itkPointD3 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath3D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3D in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3D_swigregister(tubeSegmentTubeUsingMinimalPath3D)

def tubeSegmentTubeUsingMinimalPath3F_New():
    return tubeSegmentTubeUsingMinimalPath3F.New()

class tubeSegmentTubeUsingMinimalPath3F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath3F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath3F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageF3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageF3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageF3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageF3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD3,std::allocator< itkPointD3 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath3F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3F in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3F_swigregister(tubeSegmentTubeUsingMinimalPath3F)

def tubeSegmentTubeUsingMinimalPath3SS_New():
    return tubeSegmentTubeUsingMinimalPath3SS.New()

class tubeSegmentTubeUsingMinimalPath3SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath3SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath3SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageSS3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageSS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageSS3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageSS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD3,std::allocator< itkPointD3 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3SS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath3SS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3SS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3SS in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3SS_swigregister(tubeSegmentTubeUsingMinimalPath3SS)

def tubeSegmentTubeUsingMinimalPath3UC_New():
    return tubeSegmentTubeUsingMinimalPath3UC.New()

class tubeSegmentTubeUsingMinimalPath3UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath3UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath3UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUC3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUC3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUC3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUC3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD3,std::allocator< itkPointD3 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3UC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath3UC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3UC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3UC in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3UC_swigregister(tubeSegmentTubeUsingMinimalPath3UC)

def tubeSegmentTubeUsingMinimalPath3US_New():
    return tubeSegmentTubeUsingMinimalPath3US.New()

class tubeSegmentTubeUsingMinimalPath3US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath3US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath3US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath3US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUS3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUS3_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUS3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD3

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject3_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD3,std::allocator< itkPointD3 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath3US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath3US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath3US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath3US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath3US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath3US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath3US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath3US in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath3US_swigregister(tubeSegmentTubeUsingMinimalPath3US)

def tubeSegmentTubeUsingMinimalPath4D_New():
    return tubeSegmentTubeUsingMinimalPath4D.New()

class tubeSegmentTubeUsingMinimalPath4D(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath4D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath4D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath4D_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageD4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageD4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageD4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageD4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD4,std::allocator< itkPointD4 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath4D

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath4D

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath4D

        Create a new object of the class tubeSegmentTubeUsingMinimalPath4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath4D.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath4D in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4D_swigregister(tubeSegmentTubeUsingMinimalPath4D)

def tubeSegmentTubeUsingMinimalPath4F_New():
    return tubeSegmentTubeUsingMinimalPath4F.New()

class tubeSegmentTubeUsingMinimalPath4F(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath4F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath4F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath4F_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageF4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageF4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageF4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageF4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD4,std::allocator< itkPointD4 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath4F

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath4F

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath4F

        Create a new object of the class tubeSegmentTubeUsingMinimalPath4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath4F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath4F in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4F_swigregister(tubeSegmentTubeUsingMinimalPath4F)

def tubeSegmentTubeUsingMinimalPath4SS_New():
    return tubeSegmentTubeUsingMinimalPath4SS.New()

class tubeSegmentTubeUsingMinimalPath4SS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath4SS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath4SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath4SS_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageSS4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageSS4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageSS4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageSS4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD4,std::allocator< itkPointD4 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath4SS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath4SS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath4SS

        Create a new object of the class tubeSegmentTubeUsingMinimalPath4SS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath4SS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath4SS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath4SS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath4SS in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4SS_swigregister(tubeSegmentTubeUsingMinimalPath4SS)

def tubeSegmentTubeUsingMinimalPath4UC_New():
    return tubeSegmentTubeUsingMinimalPath4UC.New()

class tubeSegmentTubeUsingMinimalPath4UC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath4UC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath4UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath4UC_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUC4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUC4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUC4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUC4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD4,std::allocator< itkPointD4 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath4UC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath4UC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath4UC

        Create a new object of the class tubeSegmentTubeUsingMinimalPath4UC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath4UC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath4UC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath4UC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath4UC in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4UC_swigregister(tubeSegmentTubeUsingMinimalPath4UC)

def tubeSegmentTubeUsingMinimalPath4US_New():
    return tubeSegmentTubeUsingMinimalPath4US.New()

class tubeSegmentTubeUsingMinimalPath4US(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentTubeUsingMinimalPath4US class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentTubeUsingMinimalPath4US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentTubeUsingMinimalPath4US_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_Clone(self)

    def SetTargetTubeGroup(self, value):
        r"""
        SetTargetTubeGroup(self, value)

        Parameters
        ----------
        value: itkGroupSpatialObject4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetTargetTubeGroup(self, value)

    def SetSpeedImage(self, value):
        r"""
        SetSpeedImage(self, value)

        Parameters
        ----------
        value: itkImageUS4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetSpeedImage(self, value)

    def GetSpeedImage(self):
        r"""GetSpeedImage(self) -> itkImageUS4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_GetSpeedImage(self)

    def SetRadiusImage(self, value):
        r"""
        SetRadiusImage(self, value)

        Parameters
        ----------
        value: itkImageUS4_Pointer

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetRadiusImage(self, value)

    def GetRadiusImage(self):
        r"""GetRadiusImage(self) -> itkImageUS4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_GetRadiusImage(self)

    def SetStartPoint(self, value):
        r"""
        SetStartPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetStartPoint(self, value)

    def SetEndPoint(self, value):
        r"""
        SetEndPoint(self, value)

        Parameters
        ----------
        value: itkPointD4

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetEndPoint(self, value)

    def SetConnectToTargetTubeSurface(self, value):
        r"""
        SetConnectToTargetTubeSurface(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetConnectToTargetTubeSurface(self, value)

    def SetOptimizationMethod(self, value):
        r"""
        SetOptimizationMethod(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetOptimizationMethod(self, value)

    def SetOptimizerTerminationValue(self, value):
        r"""
        SetOptimizerTerminationValue(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetOptimizerTerminationValue(self, value)

    def SetOptimizerNumberOfIterations(self, value):
        r"""
        SetOptimizerNumberOfIterations(self, value)

        Parameters
        ----------
        value: int

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetOptimizerNumberOfIterations(self, value)

    def SetOptimizerStepLengthFactor(self, value):
        r"""
        SetOptimizerStepLengthFactor(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetOptimizerStepLengthFactor(self, value)

    def SetOptimizerStepLengthRelax(self, value):
        r"""
        SetOptimizerStepLengthRelax(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetOptimizerStepLengthRelax(self, value)

    def SetStartRadius(self, value):
        r"""
        SetStartRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetStartRadius(self, value)

    def SetMaxRadius(self, value):
        r"""
        SetMaxRadius(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetMaxRadius(self, value)

    def GetCostAssociatedWithExtractedTube(self):
        r"""GetCostAssociatedWithExtractedTube(self) -> double"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_GetCostAssociatedWithExtractedTube(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkGroupSpatialObject4_Pointer"""
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_GetOutput(self)

    def SetIntermediatePoints(self, arg0):
        r"""
        SetIntermediatePoints(self, arg0)

        Parameters
        ----------
        arg0: std::vector< itkPointD4,std::allocator< itkPointD4 > >

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_SetIntermediatePoints(self, arg0)
    __swig_destroy__ = _tubeSegmentTubeUsingMinimalPathPython.delete_tubeSegmentTubeUsingMinimalPath4US

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentTubeUsingMinimalPath4US

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentTubeUsingMinimalPath4US

        Create a new object of the class tubeSegmentTubeUsingMinimalPath4US and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentTubeUsingMinimalPath4US.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentTubeUsingMinimalPath4US.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentTubeUsingMinimalPath4US.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentTubeUsingMinimalPath4US in _tubeSegmentTubeUsingMinimalPathPython:
_tubeSegmentTubeUsingMinimalPathPython.tubeSegmentTubeUsingMinimalPath4US_swigregister(tubeSegmentTubeUsingMinimalPath4US)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def segment_tube_using_minimal_path(*args,  target_tube_group=..., speed_image=..., radius_image=..., start_point: Sequence[float]=..., end_point: Sequence[float]=..., connect_to_target_tube_surface: bool=..., optimization_method: str=..., optimizer_termination_value: float=..., optimizer_number_of_iterations: int=..., optimizer_step_length_factor: float=..., optimizer_step_length_relax: float=..., start_radius: float=..., max_radius: float=..., intermediate_points=...,**kwargs):
    """Functional interface for SegmentTubeUsingMinimalPath"""
    import itk

    kwarg_typehints = { 'target_tube_group':target_tube_group,'speed_image':speed_image,'radius_image':radius_image,'start_point':start_point,'end_point':end_point,'connect_to_target_tube_surface':connect_to_target_tube_surface,'optimization_method':optimization_method,'optimizer_termination_value':optimizer_termination_value,'optimizer_number_of_iterations':optimizer_number_of_iterations,'optimizer_step_length_factor':optimizer_step_length_factor,'optimizer_step_length_relax':optimizer_step_length_relax,'start_radius':start_radius,'max_radius':max_radius,'intermediate_points':intermediate_points }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SegmentTubeUsingMinimalPath.New(*args, **kwargs)

    return instance.__internal_call__()

def segment_tube_using_minimal_path_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.SegmentTubeUsingMinimalPath
    segment_tube_using_minimal_path.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    segment_tube_using_minimal_path.__doc__ = filter_object.__doc__



