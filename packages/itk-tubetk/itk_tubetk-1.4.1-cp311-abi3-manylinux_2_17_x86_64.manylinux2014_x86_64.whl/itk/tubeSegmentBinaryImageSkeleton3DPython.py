# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeSegmentBinaryImageSkeleton3DPython
else:
    import _tubeSegmentBinaryImageSkeleton3DPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython

def tubeSegmentBinaryImageSkeleton3DD_New():
    return tubeSegmentBinaryImageSkeleton3DD.New()

class tubeSegmentBinaryImageSkeleton3DD(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentBinaryImageSkeleton3DD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentBinaryImageSkeleton3DD_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentBinaryImageSkeleton3DD_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 const *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_GetOutput(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_GetThinning(self)

    def GetEndPoints(self):
        r"""GetEndPoints(self) -> vectoritkPointD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_GetEndPoints(self)
    __swig_destroy__ = _tubeSegmentBinaryImageSkeleton3DPython.delete_tubeSegmentBinaryImageSkeleton3DD

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentBinaryImageSkeleton3DD

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentBinaryImageSkeleton3DD

        Create a new object of the class tubeSegmentBinaryImageSkeleton3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentBinaryImageSkeleton3DD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentBinaryImageSkeleton3DD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentBinaryImageSkeleton3DD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentBinaryImageSkeleton3DD in _tubeSegmentBinaryImageSkeleton3DPython:
_tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DD_swigregister(tubeSegmentBinaryImageSkeleton3DD)

def tubeSegmentBinaryImageSkeleton3DF_New():
    return tubeSegmentBinaryImageSkeleton3DF.New()

class tubeSegmentBinaryImageSkeleton3DF(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentBinaryImageSkeleton3DF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentBinaryImageSkeleton3DF_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentBinaryImageSkeleton3DF_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_GetOutput(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageF3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_GetThinning(self)

    def GetEndPoints(self):
        r"""GetEndPoints(self) -> vectoritkPointD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_GetEndPoints(self)
    __swig_destroy__ = _tubeSegmentBinaryImageSkeleton3DPython.delete_tubeSegmentBinaryImageSkeleton3DF

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentBinaryImageSkeleton3DF

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentBinaryImageSkeleton3DF

        Create a new object of the class tubeSegmentBinaryImageSkeleton3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentBinaryImageSkeleton3DF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentBinaryImageSkeleton3DF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentBinaryImageSkeleton3DF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentBinaryImageSkeleton3DF in _tubeSegmentBinaryImageSkeleton3DPython:
_tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DF_swigregister(tubeSegmentBinaryImageSkeleton3DF)

def tubeSegmentBinaryImageSkeleton3DSS_New():
    return tubeSegmentBinaryImageSkeleton3DSS.New()

class tubeSegmentBinaryImageSkeleton3DSS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentBinaryImageSkeleton3DSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentBinaryImageSkeleton3DSS_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentBinaryImageSkeleton3DSS_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_GetOutput(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageSS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_GetThinning(self)

    def GetEndPoints(self):
        r"""GetEndPoints(self) -> vectoritkPointD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_GetEndPoints(self)
    __swig_destroy__ = _tubeSegmentBinaryImageSkeleton3DPython.delete_tubeSegmentBinaryImageSkeleton3DSS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentBinaryImageSkeleton3DSS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentBinaryImageSkeleton3DSS

        Create a new object of the class tubeSegmentBinaryImageSkeleton3DSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentBinaryImageSkeleton3DSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentBinaryImageSkeleton3DSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentBinaryImageSkeleton3DSS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentBinaryImageSkeleton3DSS in _tubeSegmentBinaryImageSkeleton3DPython:
_tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DSS_swigregister(tubeSegmentBinaryImageSkeleton3DSS)

def tubeSegmentBinaryImageSkeleton3DUC_New():
    return tubeSegmentBinaryImageSkeleton3DUC.New()

class tubeSegmentBinaryImageSkeleton3DUC(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentBinaryImageSkeleton3DUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentBinaryImageSkeleton3DUC_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentBinaryImageSkeleton3DUC_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_GetOutput(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageUC3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_GetThinning(self)

    def GetEndPoints(self):
        r"""GetEndPoints(self) -> vectoritkPointD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_GetEndPoints(self)
    __swig_destroy__ = _tubeSegmentBinaryImageSkeleton3DPython.delete_tubeSegmentBinaryImageSkeleton3DUC

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentBinaryImageSkeleton3DUC

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentBinaryImageSkeleton3DUC

        Create a new object of the class tubeSegmentBinaryImageSkeleton3DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentBinaryImageSkeleton3DUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentBinaryImageSkeleton3DUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentBinaryImageSkeleton3DUC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentBinaryImageSkeleton3DUC in _tubeSegmentBinaryImageSkeleton3DPython:
_tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUC_swigregister(tubeSegmentBinaryImageSkeleton3DUC)

def tubeSegmentBinaryImageSkeleton3DUS_New():
    return tubeSegmentBinaryImageSkeleton3DUS.New()

class tubeSegmentBinaryImageSkeleton3DUS(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeSegmentBinaryImageSkeleton3DUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeSegmentBinaryImageSkeleton3DUS_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeSegmentBinaryImageSkeleton3DUS_Pointer"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_GetOutput(self)

    def GetThinning(self):
        r"""GetThinning(self) -> itkImageUS3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_GetThinning(self)

    def GetEndPoints(self):
        r"""GetEndPoints(self) -> vectoritkPointD3"""
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_GetEndPoints(self)
    __swig_destroy__ = _tubeSegmentBinaryImageSkeleton3DPython.delete_tubeSegmentBinaryImageSkeleton3DUS

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeSegmentBinaryImageSkeleton3DUS

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeSegmentBinaryImageSkeleton3DUS

        Create a new object of the class tubeSegmentBinaryImageSkeleton3DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeSegmentBinaryImageSkeleton3DUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeSegmentBinaryImageSkeleton3DUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeSegmentBinaryImageSkeleton3DUS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeSegmentBinaryImageSkeleton3DUS in _tubeSegmentBinaryImageSkeleton3DPython:
_tubeSegmentBinaryImageSkeleton3DPython.tubeSegmentBinaryImageSkeleton3DUS_swigregister(tubeSegmentBinaryImageSkeleton3DUS)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def segment_binary_image_skeleton3_d(*args, **kwargs):
    """Functional interface for SegmentBinaryImageSkeleton3D"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SegmentBinaryImageSkeleton3D.New(*args, **kwargs)

    return instance.__internal_call__()

def segment_binary_image_skeleton3_d_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.SegmentBinaryImageSkeleton3D
    segment_binary_image_skeleton3_d.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    segment_binary_image_skeleton3_d.__doc__ = filter_object.__doc__



