# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeImageMathPython
else:
    import _tubeImageMathPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkVariableSizeMatrixPython
import itk.itkArrayPython

def tubeImageMathD2_New():
    return tubeImageMathD2.New()

class tubeImageMathD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathD2_Pointer"""
        return _tubeImageMathPython.tubeImageMathD2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathD2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeImageMathPython.tubeImageMathD2_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathD2_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathD2_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathD2_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathD2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathD2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathD2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageD2 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathD2_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageD2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathD2_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathD2_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathD2_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathD2_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageD2 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathD2_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathD2_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathD2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageD2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathD2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageD2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathD2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathD2_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageD2 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathD2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathD2_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathD2_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageD2 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathD2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathD2_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathD2_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathD2_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathD2_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathD2_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageD2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageD2 *

        """
        return _tubeImageMathPython.tubeImageMathD2_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD2_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathD2_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathD2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD2_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathD2_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathD2

        Create a new object of the class tubeImageMathD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathD2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathD2_swigregister(tubeImageMathD2)

def tubeImageMathD3_New():
    return tubeImageMathD3.New()

class tubeImageMathD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathD3_Pointer"""
        return _tubeImageMathPython.tubeImageMathD3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageD3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathD3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeImageMathPython.tubeImageMathD3_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathD3_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathD3_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathD3_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathD3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathD3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathD3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageD3 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathD3_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageD3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathD3_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathD3_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathD3_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathD3_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageD3 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathD3_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathD3_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathD3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageD3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathD3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageD3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathD3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathD3_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageD3 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathD3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathD3_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathD3_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageD3 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathD3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathD3_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathD3_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathD3_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathD3_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathD3_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageD3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageD3 *

        """
        return _tubeImageMathPython.tubeImageMathD3_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD3_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathD3_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathD3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathD3_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathD3_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathD3

        Create a new object of the class tubeImageMathD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathD3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathD3_swigregister(tubeImageMathD3)

def tubeImageMathF2_New():
    return tubeImageMathF2.New()

class tubeImageMathF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathF2_Pointer"""
        return _tubeImageMathPython.tubeImageMathF2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathF2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathF2_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathF2_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathF2_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathF2_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathF2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathF2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathF2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageF2 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathF2_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathF2_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathF2_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathF2_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathF2_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageF2 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathF2_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathF2_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathF2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageF2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathF2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageF2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathF2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathF2_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageF2 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathF2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathF2_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathF2_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageF2 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathF2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathF2_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathF2_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathF2_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathF2_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathF2_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathF2_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF2_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathF2_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathF2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF2_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathF2_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathF2

        Create a new object of the class tubeImageMathF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathF2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathF2_swigregister(tubeImageMathF2)

def tubeImageMathF3_New():
    return tubeImageMathF3.New()

class tubeImageMathF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathF3_Pointer"""
        return _tubeImageMathPython.tubeImageMathF3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathF3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathF3_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathF3_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathF3_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathF3_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathF3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathF3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathF3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageF3 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathF3_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathF3_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathF3_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathF3_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathF3_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageF3 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathF3_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathF3_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathF3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageF3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathF3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageF3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathF3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathF3_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageF3 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathF3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathF3_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathF3_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageF3 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathF3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathF3_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathF3_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathF3_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathF3_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathF3_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathF3_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF3_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathF3_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathF3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathF3_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathF3_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathF3

        Create a new object of the class tubeImageMathF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathF3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathF3_swigregister(tubeImageMathF3)

def tubeImageMathSS2_New():
    return tubeImageMathSS2.New()

class tubeImageMathSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathSS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathSS2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSS2_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathSS2_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathSS2_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathSS2_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageSS2 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageSS2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathSS2_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathSS2_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathSS2_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageSS2 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageSS2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageSS2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathSS2_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageSS2 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageSS2 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathSS2_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathSS2_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageSS2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageSS2 *

        """
        return _tubeImageMathPython.tubeImageMathSS2_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS2_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathSS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathSS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSS2_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathSS2

        Create a new object of the class tubeImageMathSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathSS2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathSS2_swigregister(tubeImageMathSS2)

def tubeImageMathSS3_New():
    return tubeImageMathSS3.New()

class tubeImageMathSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathSS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathSS3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageSS3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSS3_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathSS3_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathSS3_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathSS3_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageSS3 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageSS3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathSS3_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathSS3_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathSS3_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageSS3 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageSS3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageSS3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathSS3_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageSS3 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageSS3 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathSS3_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathSS3_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageSS3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageSS3 *

        """
        return _tubeImageMathPython.tubeImageMathSS3_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS3_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathSS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathSS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathSS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathSS3_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathSS3

        Create a new object of the class tubeImageMathSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathSS3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathSS3_swigregister(tubeImageMathSS3)

def tubeImageMathUC2_New():
    return tubeImageMathUC2.New()

class tubeImageMathUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathUC2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUC2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUC2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUC2_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUC2_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUC2_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUC2_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageUC2 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageUC2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathUC2_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathUC2_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathUC2_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageUC2 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUC2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUC2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathUC2_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageUC2 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageUC2 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUC2_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUC2_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageUC2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUC2 *

        """
        return _tubeImageMathPython.tubeImageMathUC2_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC2_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathUC2_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathUC2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC2_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUC2_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathUC2

        Create a new object of the class tubeImageMathUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUC2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUC2_swigregister(tubeImageMathUC2)

def tubeImageMathUC3_New():
    return tubeImageMathUC3.New()

class tubeImageMathUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathUC3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUC3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUC3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUC3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUC3_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUC3_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUC3_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUC3_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageUC3 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageUC3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathUC3_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathUC3_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathUC3_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageUC3 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUC3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUC3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathUC3_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageUC3 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageUC3 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUC3_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUC3_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageUC3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUC3 *

        """
        return _tubeImageMathPython.tubeImageMathUC3_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC3_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathUC3_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathUC3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUC3_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUC3_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathUC3

        Create a new object of the class tubeImageMathUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUC3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUC3_swigregister(tubeImageMathUC3)

def tubeImageMathUS2_New():
    return tubeImageMathUS2.New()

class tubeImageMathUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathUS2_Pointer"""
        return _tubeImageMathPython.tubeImageMathUS2_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeImageMathPython.tubeImageMathUS2_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF2"""
        return _tubeImageMathPython.tubeImageMathUS2_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC2"""
        return _tubeImageMathPython.tubeImageMathUS2_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS2"""
        return _tubeImageMathPython.tubeImageMathUS2_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageUS2 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageUS2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathUS2_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathUS2_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathUS2_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageUS2 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUS2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUS2 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathUS2_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageUS2 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageUS2 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUS2_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUS2_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS2_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageUS2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUS2 *

        """
        return _tubeImageMathPython.tubeImageMathUS2_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS2_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathUS2_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathUS2_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD2,std::allocator< itkContinuousIndexD2 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS2_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUS2_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathUS2

        Create a new object of the class tubeImageMathUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUS2 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUS2_swigregister(tubeImageMathUS2)

def tubeImageMathUS3_New():
    return tubeImageMathUS3.New()

class tubeImageMathUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeImageMathUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeImageMathUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeImageMathUS3_Pointer"""
        return _tubeImageMathPython.tubeImageMathUS3_Clone(self)

    def SetInput(self, input):
        r"""
        SetInput(self, input)

        Parameters
        ----------
        input: itkImageUS3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_SetInput(self, input)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeImageMathPython.tubeImageMathUS3_GetOutput(self)

    def GetOutputFloat(self):
        r"""GetOutputFloat(self) -> itkImageF3"""
        return _tubeImageMathPython.tubeImageMathUS3_GetOutputFloat(self)

    def GetOutputUChar(self):
        r"""GetOutputUChar(self) -> itkImageUC3"""
        return _tubeImageMathPython.tubeImageMathUS3_GetOutputUChar(self)

    def GetOutputShort(self):
        r"""GetOutputShort(self) -> itkImageSS3"""
        return _tubeImageMathPython.tubeImageMathUS3_GetOutputShort(self)

    def IntensityWindow(self, inValMin, inValMax, outMin, outMax):
        r"""
        IntensityWindow(self, inValMin, inValMax, outMin, outMax)

        Parameters
        ----------
        inValMin: float
        inValMax: float
        outMin: float
        outMax: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_IntensityWindow(self, inValMin, inValMax, outMin, outMax)

    def IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage):
        r"""
        IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

        Parameters
        ----------
        inMeanFieldImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_IntensityMultiplicativeBiasCorrection(self, inMeanFieldImage)

    def Resample(self, referenceImage):
        r"""
        Resample(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageF3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_Resample(self, referenceImage)

    def AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed):
        r"""
        AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMin: float
        noiseMax: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_AddUniformNoise(self, valMin, valMax, noiseMin, noiseMax, seed)

    def AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed):
        r"""
        AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

        Parameters
        ----------
        valMin: float
        valMax: float
        noiseMean: float
        noiseRange: float
        seed: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_AddGaussianNoise(self, valMin, valMax, noiseMean, noiseRange, seed)

    def AddImages(self, input2, weight1, weight2):
        r"""
        AddImages(self, input2, weight1, weight2)

        Parameters
        ----------
        input2: itkImageUS3 *
        weight1: float
        weight2: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_AddImages(self, input2, weight1, weight2)

    def MultiplyImages(self, input2):
        r"""
        MultiplyImages(self, input2)

        Parameters
        ----------
        input2: itkImageUS3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_MultiplyImages(self, input2)

    def PadUsingMirroring(self, numPadVoxels):
        r"""
        PadUsingMirroring(self, numPadVoxels)

        Parameters
        ----------
        numPadVoxels: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_PadUsingMirroring(self, numPadVoxels)

    def NormalizeMeanStdDev(self):
        r"""NormalizeMeanStdDev(self)"""
        return _tubeImageMathPython.tubeImageMathUS3_NormalizeMeanStdDev(self)

    def NormalizeFWHM(self):
        r"""NormalizeFWHM(self)"""
        return _tubeImageMathPython.tubeImageMathUS3_NormalizeFWHM(self)

    def NormalizeMeanShift(self):
        r"""NormalizeMeanShift(self)"""
        return _tubeImageMathPython.tubeImageMathUS3_NormalizeMeanShift(self)

    def FuseUsingMax(self, input2, offset2):
        r"""
        FuseUsingMax(self, input2, offset2)

        Parameters
        ----------
        input2: itkImageUS3 *
        offset2: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_FuseUsingMax(self, input2, offset2)

    def MedianFilter(self, size):
        r"""
        MedianFilter(self, size)

        Parameters
        ----------
        size: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_MedianFilter(self, size)

    def Threshold(self, threshLow, threshHigh, valTrue, valFalse):
        r"""
        Threshold(self, threshLow, threshHigh, valTrue, valFalse)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        valTrue: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_Threshold(self, threshLow, threshHigh, valTrue, valFalse)

    def MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUS3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_MeanWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh):
        r"""
        StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh) -> double

        Parameters
        ----------
        mask: itkImageUS3 *
        maskThreshLow: float
        maskThreshHigh: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_StdDevWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh)

    def AbsoluteValue(self):
        r"""AbsoluteValue(self)"""
        return _tubeImageMathPython.tubeImageMathUS3_AbsoluteValue(self)

    def ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse):
        r"""
        ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

        Parameters
        ----------
        mask: itkImageUS3 *
        maskThreshLow: float
        maskThreshHigh: float
        valFalse: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_ReplaceValuesOutsideMaskRange(self, mask, maskThreshLow, maskThreshHigh, valFalse)

    def Erode(self, radius, fgVal, bkgVal):
        r"""
        Erode(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_Erode(self, radius, fgVal, bkgVal)

    def Dilate(self, radius, fgVal, bkgVal):
        r"""
        Dilate(self, radius, fgVal, bkgVal)

        Parameters
        ----------
        radius: int
        fgVal: float
        bkgVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_Dilate(self, radius, fgVal, bkgVal)

    def ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal):
        r"""
        ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

        Parameters
        ----------
        mask: itkImageUS3 *
        maskThreshLow: float
        maskThreshHigh: float
        imageVal: float
        newImageVal: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_ReplaceValueWithinMaskRange(self, mask, maskThreshLow, maskThreshHigh, imageVal, newImageVal)

    def Blur(self, sigma):
        r"""
        Blur(self, sigma)

        Parameters
        ----------
        sigma: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_Blur(self, sigma)

    def BlurOrder(self, sigma, order, direction):
        r"""
        BlurOrder(self, sigma, order, direction)

        Parameters
        ----------
        sigma: float
        order: int
        direction: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_BlurOrder(self, sigma, order, direction)

    def HistogramBinMin(self):
        r"""HistogramBinMin(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUS3_HistogramBinMin(self)

    def HistogramBinSize(self):
        r"""HistogramBinSize(self) -> float"""
        return _tubeImageMathPython.tubeImageMathUS3_HistogramBinSize(self)

    def Histogram(self, *args):
        r"""
        Histogram(self, nBins) -> vectorD

        Parameters
        ----------
        nBins: unsigned int

        Histogram(self, nBins, binMin, binSize) -> vectorD

        Parameters
        ----------
        nBins: unsigned int
        binMin: float
        binSize: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_Histogram(self, *args)

    def IntensityCorrectionBySlice(self, nBins, nMatchPoints):
        r"""
        IntensityCorrectionBySlice(self, nBins, nMatchPoints)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS3_IntensityCorrectionBySlice(self, nBins, nMatchPoints)

    def IntensityCorrection(self, nBins, nMatchPoints, referenceImage):
        r"""
        IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

        Parameters
        ----------
        nBins: unsigned int
        nMatchPoints: unsigned int
        referenceImage: itkImageUS3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_IntensityCorrection(self, nBins, nMatchPoints, referenceImage)

    def Resize(self, *args):
        r"""
        Resize(self, factor)

        Parameters
        ----------
        factor: double

        Resize(self, referenceImage)

        Parameters
        ----------
        referenceImage: itkImageUS3 *

        """
        return _tubeImageMathPython.tubeImageMathUS3_Resize(self, *args)

    def ExtractSlice(self, dimension, slice):
        r"""
        ExtractSlice(self, dimension, slice)

        Parameters
        ----------
        dimension: unsigned int
        slice: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS3_ExtractSlice(self, dimension, slice)

    def EnhanceVessels(self, scaleMin, scaleMax, numScales):
        r"""
        EnhanceVessels(self, scaleMin, scaleMax, numScales)

        Parameters
        ----------
        scaleMin: double
        scaleMax: double
        numScales: int

        """
        return _tubeImageMathPython.tubeImageMathUS3_EnhanceVessels(self, scaleMin, scaleMax, numScales)

    def ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z):
        r"""
        ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

        Parameters
        ----------
        threshLow: float
        threshHigh: float
        labelVal: float
        x: float
        y: float
        z: float

        """
        return _tubeImageMathPython.tubeImageMathUS3_ConnectedComponents(self, threshLow, threshHigh, labelVal, x, y, z)

    def VoronoiTessellation(self, nCentroids, nIters, nSamples):
        r"""
        VoronoiTessellation(self, nCentroids, nIters, nSamples) -> std::vector< itkContinuousIndexD3,std::allocator< itkContinuousIndexD3 > >

        Parameters
        ----------
        nCentroids: unsigned int
        nIters: unsigned int
        nSamples: unsigned int

        """
        return _tubeImageMathPython.tubeImageMathUS3_VoronoiTessellation(self, nCentroids, nIters, nSamples)

    def GetVoronoiTessellationAdjacencyMatrix(self):
        r"""GetVoronoiTessellationAdjacencyMatrix(self) -> itkVariableSizeMatrixD"""
        return _tubeImageMathPython.tubeImageMathUS3_GetVoronoiTessellationAdjacencyMatrix(self)
    __swig_destroy__ = _tubeImageMathPython.delete_tubeImageMathUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeImageMathUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeImageMathPython.tubeImageMathUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeImageMathUS3

        Create a new object of the class tubeImageMathUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeImageMathUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeImageMathUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeImageMathUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeImageMathUS3 in _tubeImageMathPython:
_tubeImageMathPython.tubeImageMathUS3_swigregister(tubeImageMathUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_math(*args, **kwargs):
    """Functional interface for ImageMath"""
    import itk

    kwarg_typehints = {  }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageMath.New(*args, **kwargs)

    return instance.__internal_call__()

def image_math_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ImageMath
    image_math.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_math.__doc__ = filter_object.__doc__



