# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeBinaryImageSimilarityMetricsPython
else:
    import _tubeComputeBinaryImageSimilarityMetricsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython

def tubeComputeBinaryImageSimilarityMetricsISS2_New():
    return tubeComputeBinaryImageSimilarityMetricsISS2.New()

class tubeComputeBinaryImageSimilarityMetricsISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsISS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsISS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsISS2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS2_swigregister(tubeComputeBinaryImageSimilarityMetricsISS2)

def tubeComputeBinaryImageSimilarityMetricsISS3_New():
    return tubeComputeBinaryImageSimilarityMetricsISS3.New()

class tubeComputeBinaryImageSimilarityMetricsISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsISS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsISS3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS3_swigregister(tubeComputeBinaryImageSimilarityMetricsISS3)

def tubeComputeBinaryImageSimilarityMetricsISS4_New():
    return tubeComputeBinaryImageSimilarityMetricsISS4.New()

class tubeComputeBinaryImageSimilarityMetricsISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsISS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsISS4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsISS4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageSS4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsISS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsISS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsISS4

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsISS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsISS4 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsISS4_swigregister(tubeComputeBinaryImageSimilarityMetricsISS4)

def tubeComputeBinaryImageSimilarityMetricsIUC2_New():
    return tubeComputeBinaryImageSimilarityMetricsIUC2.New()

class tubeComputeBinaryImageSimilarityMetricsIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUC2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUC2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC2)

def tubeComputeBinaryImageSimilarityMetricsIUC3_New():
    return tubeComputeBinaryImageSimilarityMetricsIUC3.New()

class tubeComputeBinaryImageSimilarityMetricsIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUC3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUC3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC3)

def tubeComputeBinaryImageSimilarityMetricsIUC4_New():
    return tubeComputeBinaryImageSimilarityMetricsIUC4.New()

class tubeComputeBinaryImageSimilarityMetricsIUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUC4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUC4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUC4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUC4

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUC4 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUC4_swigregister(tubeComputeBinaryImageSimilarityMetricsIUC4)

def tubeComputeBinaryImageSimilarityMetricsIUS2_New():
    return tubeComputeBinaryImageSimilarityMetricsIUS2.New()

class tubeComputeBinaryImageSimilarityMetricsIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUS2_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS2

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUS2 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS2_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS2)

def tubeComputeBinaryImageSimilarityMetricsIUS3_New():
    return tubeComputeBinaryImageSimilarityMetricsIUS3.New()

class tubeComputeBinaryImageSimilarityMetricsIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUS3_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS3

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUS3 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS3_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS3)

def tubeComputeBinaryImageSimilarityMetricsIUS4_New():
    return tubeComputeBinaryImageSimilarityMetricsIUS4.New()

class tubeComputeBinaryImageSimilarityMetricsIUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeBinaryImageSimilarityMetricsIUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeBinaryImageSimilarityMetricsIUS4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeBinaryImageSimilarityMetricsIUS4_Pointer"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_Clone(self)

    def SetSourceImage(self, value):
        r"""
        SetSourceImage(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_SetSourceImage(self, value)

    def SetTargetImage(self, value):
        r"""
        SetTargetImage(self, value)

        Parameters
        ----------
        value: itkImageUS4 const *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_SetTargetImage(self, value)

    def GetTotalOverlap(self):
        r"""GetTotalOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetTotalOverlap(self)

    def GetUnionOverlap(self):
        r"""GetUnionOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetUnionOverlap(self)

    def GetMeanOverlap(self):
        r"""GetMeanOverlap(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetMeanOverlap(self)

    def GetVolumeSimilarity(self):
        r"""GetVolumeSimilarity(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetVolumeSimilarity(self)

    def GetFalseNegativeError(self):
        r"""GetFalseNegativeError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetFalseNegativeError(self)

    def GetFalsePositiveError(self):
        r"""GetFalsePositiveError(self) -> float"""
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_GetFalsePositiveError(self)
    __swig_destroy__ = _tubeComputeBinaryImageSimilarityMetricsPython.delete_tubeComputeBinaryImageSimilarityMetricsIUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeBinaryImageSimilarityMetricsIUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeBinaryImageSimilarityMetricsIUS4

        Create a new object of the class tubeComputeBinaryImageSimilarityMetricsIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeBinaryImageSimilarityMetricsIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeBinaryImageSimilarityMetricsIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeBinaryImageSimilarityMetricsIUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeBinaryImageSimilarityMetricsIUS4 in _tubeComputeBinaryImageSimilarityMetricsPython:
_tubeComputeBinaryImageSimilarityMetricsPython.tubeComputeBinaryImageSimilarityMetricsIUS4_swigregister(tubeComputeBinaryImageSimilarityMetricsIUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_binary_image_similarity_metrics(*args,  source_image: itkt.Image=..., target_image: itkt.Image=...,**kwargs):
    """Functional interface for ComputeBinaryImageSimilarityMetrics"""
    import itk

    kwarg_typehints = { 'source_image':source_image,'target_image':target_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeBinaryImageSimilarityMetrics.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_binary_image_similarity_metrics_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeBinaryImageSimilarityMetrics
    compute_binary_image_similarity_metrics.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_binary_image_similarity_metrics.__doc__ = filter_object.__doc__



