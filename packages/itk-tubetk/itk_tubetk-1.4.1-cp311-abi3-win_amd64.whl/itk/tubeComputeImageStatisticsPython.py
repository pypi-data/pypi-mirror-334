# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeComputeImageStatisticsPython
else:
    import _tubeComputeImageStatisticsPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython

def tubeComputeImageStatisticsD2_New():
    return tubeComputeImageStatisticsD2.New()

class tubeComputeImageStatisticsD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsD2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsD2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageD2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD2

        Create a new object of the class tubeComputeImageStatisticsD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsD2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD2_swigregister(tubeComputeImageStatisticsD2)

def tubeComputeImageStatisticsD3_New():
    return tubeComputeImageStatisticsD3.New()

class tubeComputeImageStatisticsD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsD3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsD3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageD3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD3

        Create a new object of the class tubeComputeImageStatisticsD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsD3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD3_swigregister(tubeComputeImageStatisticsD3)

def tubeComputeImageStatisticsD4_New():
    return tubeComputeImageStatisticsD4.New()

class tubeComputeImageStatisticsD4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsD4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsD4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsD4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageD4 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageD4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsD4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsD4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsD4

        Create a new object of the class tubeComputeImageStatisticsD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsD4 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsD4_swigregister(tubeComputeImageStatisticsD4)

def tubeComputeImageStatisticsF2_New():
    return tubeComputeImageStatisticsF2.New()

class tubeComputeImageStatisticsF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsF2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsF2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF2

        Create a new object of the class tubeComputeImageStatisticsF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsF2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF2_swigregister(tubeComputeImageStatisticsF2)

def tubeComputeImageStatisticsF3_New():
    return tubeComputeImageStatisticsF3.New()

class tubeComputeImageStatisticsF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsF3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsF3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF3

        Create a new object of the class tubeComputeImageStatisticsF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsF3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF3_swigregister(tubeComputeImageStatisticsF3)

def tubeComputeImageStatisticsF4_New():
    return tubeComputeImageStatisticsF4.New()

class tubeComputeImageStatisticsF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsF4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsF4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageF4 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsF4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsF4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsF4

        Create a new object of the class tubeComputeImageStatisticsF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsF4 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsF4_swigregister(tubeComputeImageStatisticsF4)

def tubeComputeImageStatisticsSS2_New():
    return tubeComputeImageStatisticsSS2.New()

class tubeComputeImageStatisticsSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsSS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsSS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorSS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageSS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS2

        Create a new object of the class tubeComputeImageStatisticsSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsSS2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS2_swigregister(tubeComputeImageStatisticsSS2)

def tubeComputeImageStatisticsSS3_New():
    return tubeComputeImageStatisticsSS3.New()

class tubeComputeImageStatisticsSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsSS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsSS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorSS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageSS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS3

        Create a new object of the class tubeComputeImageStatisticsSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsSS3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS3_swigregister(tubeComputeImageStatisticsSS3)

def tubeComputeImageStatisticsSS4_New():
    return tubeComputeImageStatisticsSS4.New()

class tubeComputeImageStatisticsSS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsSS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsSS4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsSS4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorSS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageSS4 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageSS4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsSS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsSS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsSS4

        Create a new object of the class tubeComputeImageStatisticsSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsSS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsSS4 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsSS4_swigregister(tubeComputeImageStatisticsSS4)

def tubeComputeImageStatisticsUC2_New():
    return tubeComputeImageStatisticsUC2.New()

class tubeComputeImageStatisticsUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUC2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUC2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUC"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUC2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC2

        Create a new object of the class tubeComputeImageStatisticsUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUC2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC2_swigregister(tubeComputeImageStatisticsUC2)

def tubeComputeImageStatisticsUC3_New():
    return tubeComputeImageStatisticsUC3.New()

class tubeComputeImageStatisticsUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUC3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUC3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUC"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUC3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC3

        Create a new object of the class tubeComputeImageStatisticsUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUC3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC3_swigregister(tubeComputeImageStatisticsUC3)

def tubeComputeImageStatisticsUC4_New():
    return tubeComputeImageStatisticsUC4.New()

class tubeComputeImageStatisticsUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUC4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUC4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUC4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUC"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUC4 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUC4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUC4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUC4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUC4

        Create a new object of the class tubeComputeImageStatisticsUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUC4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUC4 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUC4_swigregister(tubeComputeImageStatisticsUC4)

def tubeComputeImageStatisticsUS2_New():
    return tubeComputeImageStatisticsUS2.New()

class tubeComputeImageStatisticsUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUS2_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUS2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS2

        Create a new object of the class tubeComputeImageStatisticsUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUS2 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS2_swigregister(tubeComputeImageStatisticsUS2)

def tubeComputeImageStatisticsUS3_New():
    return tubeComputeImageStatisticsUS3.New()

class tubeComputeImageStatisticsUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUS3_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUS3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS3

        Create a new object of the class tubeComputeImageStatisticsUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUS3 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS3_swigregister(tubeComputeImageStatisticsUS3)

def tubeComputeImageStatisticsUS4_New():
    return tubeComputeImageStatisticsUS4.New()

class tubeComputeImageStatisticsUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeComputeImageStatisticsUS4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeComputeImageStatisticsUS4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeComputeImageStatisticsUS4_Pointer"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_Clone(self)

    def GetCompMean(self):
        r"""GetCompMean(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompMean(self)

    def GetCompMin(self):
        r"""GetCompMin(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompMin(self)

    def GetCompMax(self):
        r"""GetCompMax(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompMax(self)

    def GetCompStdDev(self):
        r"""GetCompStdDev(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompStdDev(self)

    def GetCompCount(self):
        r"""GetCompCount(self) -> vectorD"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompCount(self)

    def GetCompValue(self):
        r"""GetCompValue(self) -> vectorUS"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetCompValue(self)

    def GetNumberOfComponents(self):
        r"""GetNumberOfComponents(self) -> unsigned int"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetNumberOfComponents(self)

    def SetQuantiles(self, value):
        r"""
        SetQuantiles(self, value)

        Parameters
        ----------
        value: std::vector< float,std::allocator< float > >

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_SetQuantiles(self, value)

    def GetQuantiles(self):
        r"""GetQuantiles(self) -> vectorF"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetQuantiles(self)

    def SetInputMask(self, value):
        r"""
        SetInputMask(self, value)

        Parameters
        ----------
        value: itkImageUS4 *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_SetInputMask(self, value)

    def GetInputMask(self):
        r"""GetInputMask(self) -> itkImageUS4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetInputMask(self)

    def WriteCSVStatistics(self, csvStatisticsFile):
        r"""
        WriteCSVStatistics(self, csvStatisticsFile)

        Parameters
        ----------
        csvStatisticsFile: std::string

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_WriteCSVStatistics(self, csvStatisticsFile)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF4 const *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF4"""
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_GetOutput(self)
    __swig_destroy__ = _tubeComputeImageStatisticsPython.delete_tubeComputeImageStatisticsUS4

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeComputeImageStatisticsUS4

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeComputeImageStatisticsUS4

        Create a new object of the class tubeComputeImageStatisticsUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeComputeImageStatisticsUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeComputeImageStatisticsUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeComputeImageStatisticsUS4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeComputeImageStatisticsUS4 in _tubeComputeImageStatisticsPython:
_tubeComputeImageStatisticsPython.tubeComputeImageStatisticsUS4_swigregister(tubeComputeImageStatisticsUS4)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def compute_image_statistics(*args,  quantiles: Sequence[float]=..., input_mask: itkt.Image=...,**kwargs):
    """Functional interface for ComputeImageStatistics"""
    import itk

    kwarg_typehints = { 'quantiles':quantiles,'input_mask':input_mask }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ComputeImageStatistics.New(*args, **kwargs)

    return instance.__internal_call__()

def compute_image_statistics_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ComputeImageStatistics
    compute_image_statistics.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    compute_image_statistics.__doc__ = filter_object.__doc__



