# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeWrite4DImageFrom3DImagesPython
else:
    import _tubeWrite4DImageFrom3DImagesPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBAPixelPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython

def tubeWrite4DImageFrom3DImagesD2_New():
    return tubeWrite4DImageFrom3DImagesD2.New()

class tubeWrite4DImageFrom3DImagesD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesD2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesD2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageD2 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesD2

        Create a new object of the class tubeWrite4DImageFrom3DImagesD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesD2 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD2_swigregister(tubeWrite4DImageFrom3DImagesD2)

def tubeWrite4DImageFrom3DImagesD3_New():
    return tubeWrite4DImageFrom3DImagesD3.New()

class tubeWrite4DImageFrom3DImagesD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesD3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesD3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageD3 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesD3

        Create a new object of the class tubeWrite4DImageFrom3DImagesD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesD3 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesD3_swigregister(tubeWrite4DImageFrom3DImagesD3)

def tubeWrite4DImageFrom3DImagesF2_New():
    return tubeWrite4DImageFrom3DImagesF2.New()

class tubeWrite4DImageFrom3DImagesF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesF2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesF2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageF2 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesF2

        Create a new object of the class tubeWrite4DImageFrom3DImagesF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesF2 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF2_swigregister(tubeWrite4DImageFrom3DImagesF2)

def tubeWrite4DImageFrom3DImagesF3_New():
    return tubeWrite4DImageFrom3DImagesF3.New()

class tubeWrite4DImageFrom3DImagesF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesF3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesF3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageF3 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesF3

        Create a new object of the class tubeWrite4DImageFrom3DImagesF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesF3 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesF3_swigregister(tubeWrite4DImageFrom3DImagesF3)

def tubeWrite4DImageFrom3DImagesSS2_New():
    return tubeWrite4DImageFrom3DImagesSS2.New()

class tubeWrite4DImageFrom3DImagesSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesSS2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesSS2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageSS2 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesSS2

        Create a new object of the class tubeWrite4DImageFrom3DImagesSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesSS2 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS2_swigregister(tubeWrite4DImageFrom3DImagesSS2)

def tubeWrite4DImageFrom3DImagesSS3_New():
    return tubeWrite4DImageFrom3DImagesSS3.New()

class tubeWrite4DImageFrom3DImagesSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesSS3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesSS3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageSS3 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesSS3

        Create a new object of the class tubeWrite4DImageFrom3DImagesSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesSS3 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesSS3_swigregister(tubeWrite4DImageFrom3DImagesSS3)

def tubeWrite4DImageFrom3DImagesUC2_New():
    return tubeWrite4DImageFrom3DImagesUC2.New()

class tubeWrite4DImageFrom3DImagesUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesUC2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesUC2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageUC2 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesUC2

        Create a new object of the class tubeWrite4DImageFrom3DImagesUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesUC2 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC2_swigregister(tubeWrite4DImageFrom3DImagesUC2)

def tubeWrite4DImageFrom3DImagesUC3_New():
    return tubeWrite4DImageFrom3DImagesUC3.New()

class tubeWrite4DImageFrom3DImagesUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesUC3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesUC3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageUC3 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesUC3

        Create a new object of the class tubeWrite4DImageFrom3DImagesUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesUC3 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUC3_swigregister(tubeWrite4DImageFrom3DImagesUC3)

def tubeWrite4DImageFrom3DImagesUS2_New():
    return tubeWrite4DImageFrom3DImagesUS2.New()

class tubeWrite4DImageFrom3DImagesUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesUS2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesUS2_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageUS2 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesUS2

        Create a new object of the class tubeWrite4DImageFrom3DImagesUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesUS2 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS2_swigregister(tubeWrite4DImageFrom3DImagesUS2)

def tubeWrite4DImageFrom3DImagesUS3_New():
    return tubeWrite4DImageFrom3DImagesUS3.New()

class tubeWrite4DImageFrom3DImagesUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeWrite4DImageFrom3DImagesUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeWrite4DImageFrom3DImagesUS3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeWrite4DImageFrom3DImagesUS3_Pointer"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_Clone(self)

    def SetNumberOfInputImages(self, numInputs):
        r"""
        SetNumberOfInputImages(self, numInputs)

        Parameters
        ----------
        numInputs: unsigned int

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_SetNumberOfInputImages(self, numInputs)

    def SetNthInputImage(self, outputIndex, img):
        r"""
        SetNthInputImage(self, outputIndex, img)

        Parameters
        ----------
        outputIndex: unsigned int
        img: itkImageUS3 const *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_SetNthInputImage(self, outputIndex, img)

    def SetFileName(self, _arg):
        r"""
        SetFileName(self, _arg)

        Parameters
        ----------
        _arg: std::string

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_SetFileName(self, _arg)

    def Write(self):
        r"""Write(self)"""
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_Write(self)
    __swig_destroy__ = _tubeWrite4DImageFrom3DImagesPython.delete_tubeWrite4DImageFrom3DImagesUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeWrite4DImageFrom3DImagesUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeWrite4DImageFrom3DImagesUS3

        Create a new object of the class tubeWrite4DImageFrom3DImagesUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeWrite4DImageFrom3DImagesUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeWrite4DImageFrom3DImagesUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeWrite4DImageFrom3DImagesUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeWrite4DImageFrom3DImagesUS3 in _tubeWrite4DImageFrom3DImagesPython:
_tubeWrite4DImageFrom3DImagesPython.tubeWrite4DImageFrom3DImagesUS3_swigregister(tubeWrite4DImageFrom3DImagesUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def write4_d_image_from3_d_images(*args,  number_of_input_images: int=..., nth_input_image: int=..., file_name: str=...,**kwargs):
    """Functional interface for Write4DImageFrom3DImages"""
    import itk

    kwarg_typehints = { 'number_of_input_images':number_of_input_images,'nth_input_image':nth_input_image,'file_name':file_name }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.Write4DImageFrom3DImages.New(*args, **kwargs)

    return instance.__internal_call__()

def write4_d_image_from3_d_images_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.Write4DImageFrom3DImages
    write4_d_image_from3_d_images.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    write4_d_image_from3_d_images.__doc__ = filter_object.__doc__



