# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeResampleImagePython
else:
    import _tubeResampleImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkArray2DPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkIndexPython
import itk.itkImageRegionPython

def tubeResampleImageD2_New():
    return tubeResampleImageD2.New()

class tubeResampleImageD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageD2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageD2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageD2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD2"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageD2 *

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageD2"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeResampleImagePython.tubeResampleImageD2_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD22 *

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD2_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageD2

        Create a new object of the class tubeResampleImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageD2 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageD2_swigregister(tubeResampleImageD2)

def tubeResampleImageD3_New():
    return tubeResampleImageD3.New()

class tubeResampleImageD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageD3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageD3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageD3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD3"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageD3 *

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageD3"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeResampleImagePython.tubeResampleImageD3_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD33 *

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageD3_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageD3

        Create a new object of the class tubeResampleImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageD3 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageD3_swigregister(tubeResampleImageD3)

def tubeResampleImageF2_New():
    return tubeResampleImageF2.New()

class tubeResampleImageF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageF2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageF2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageF2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageF2 *

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageF2"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeResampleImagePython.tubeResampleImageF2_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD22 *

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF2_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageF2

        Create a new object of the class tubeResampleImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageF2 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageF2_swigregister(tubeResampleImageF2)

def tubeResampleImageF3_New():
    return tubeResampleImageF3.New()

class tubeResampleImageF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageF3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageF3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageF3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF3"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageF3 *

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageF3"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeResampleImagePython.tubeResampleImageF3_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD33 *

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageF3_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageF3

        Create a new object of the class tubeResampleImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageF3 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageF3_swigregister(tubeResampleImageF3)

def tubeResampleImageSS2_New():
    return tubeResampleImageSS2.New()

class tubeResampleImageSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageSS2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageSS2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageSS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS2"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageSS2 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageSS2"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeResampleImagePython.tubeResampleImageSS2_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD22 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageSS2

        Create a new object of the class tubeResampleImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageSS2 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageSS2_swigregister(tubeResampleImageSS2)

def tubeResampleImageSS3_New():
    return tubeResampleImageSS3.New()

class tubeResampleImageSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageSS3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageSS3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageSS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS3"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageSS3 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageSS3"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeResampleImagePython.tubeResampleImageSS3_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD33 *

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageSS3

        Create a new object of the class tubeResampleImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageSS3 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageSS3_swigregister(tubeResampleImageSS3)

def tubeResampleImageUC2_New():
    return tubeResampleImageUC2.New()

class tubeResampleImageUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageUC2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageUC2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUC2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC2"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageUC2 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageUC2"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeResampleImagePython.tubeResampleImageUC2_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD22 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageUC2

        Create a new object of the class tubeResampleImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageUC2 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageUC2_swigregister(tubeResampleImageUC2)

def tubeResampleImageUC3_New():
    return tubeResampleImageUC3.New()

class tubeResampleImageUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageUC3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageUC3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUC3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC3"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageUC3 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageUC3"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeResampleImagePython.tubeResampleImageUC3_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD33 *

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageUC3

        Create a new object of the class tubeResampleImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageUC3 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageUC3_swigregister(tubeResampleImageUC3)

def tubeResampleImageUS2_New():
    return tubeResampleImageUS2.New()

class tubeResampleImageUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageUS2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageUS2_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUS2_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS2"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageUS2 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageUS2"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeResampleImagePython.tubeResampleImageUS2_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD22 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageUS2

        Create a new object of the class tubeResampleImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageUS2 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageUS2_swigregister(tubeResampleImageUS2)

def tubeResampleImageUS3_New():
    return tubeResampleImageUS3.New()

class tubeResampleImageUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeResampleImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeResampleImageUS3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeResampleImageUS3_Pointer"""
        return _tubeResampleImagePython.tubeResampleImageUS3_Clone(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS3"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetInput(self)

    def SetMatchImage(self, value):
        r"""
        SetMatchImage(self, value)

        Parameters
        ----------
        value: itkImageUS3 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetMatchImage(self, value)

    def GetMatchImage(self):
        r"""GetMatchImage(self) -> itkImageUS3"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetMatchImage(self)

    def SetMakeIsotropic(self, value):
        r"""
        SetMakeIsotropic(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetMakeIsotropic(self, value)

    def GetMakeIsotropic(self):
        r"""GetMakeIsotropic(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetMakeIsotropic(self)

    def SetMakeHighResIso(self, value):
        r"""
        SetMakeHighResIso(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetMakeHighResIso(self, value)

    def GetMakeHighResIso(self):
        r"""GetMakeHighResIso(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetMakeHighResIso(self)

    def SetInterpolator(self, value):
        r"""
        SetInterpolator(self, value)

        Parameters
        ----------
        value: std::string

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetInterpolator(self, value)

    def GetInterpolator(self):
        r"""GetInterpolator(self) -> std::string"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetInterpolator(self)

    def SetLoadTransform(self, value):
        r"""
        SetLoadTransform(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetLoadTransform(self, value)

    def GetLoadTransform(self):
        r"""GetLoadTransform(self) -> bool"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetLoadTransform(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeResampleImagePython.tubeResampleImageUS3_GetOutput(self)

    def SetTransform(self, value):
        r"""
        SetTransform(self, value)

        Parameters
        ----------
        value: itkTransformD33 *

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetTransform(self, value)

    def SetSpacing(self, value):
        r"""
        SetSpacing(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetSpacing(self, value)

    def SetOrigin(self, value):
        r"""
        SetOrigin(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetOrigin(self, value)

    def SetIndex(self, value):
        r"""
        SetIndex(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetIndex(self, value)

    def SetSize(self, value):
        r"""
        SetSize(self, value)

        Parameters
        ----------
        value: std::vector< int,std::allocator< int > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetSize(self, value)

    def SetResampleFactor(self, value):
        r"""
        SetResampleFactor(self, value)

        Parameters
        ----------
        value: std::vector< double,std::allocator< double > >

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_SetResampleFactor(self, value)
    __swig_destroy__ = _tubeResampleImagePython.delete_tubeResampleImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeResampleImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeResampleImagePython.tubeResampleImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeResampleImageUS3

        Create a new object of the class tubeResampleImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeResampleImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeResampleImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeResampleImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeResampleImageUS3 in _tubeResampleImagePython:
_tubeResampleImagePython.tubeResampleImageUS3_swigregister(tubeResampleImageUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def resample_image(*args,  match_image: itkt.Image=..., make_isotropic: bool=..., make_high_res_iso: bool=..., interpolator: str=..., load_transform: bool=..., transform: itkt.Transform=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., index: Sequence[int]=..., size: Sequence[int]=..., resample_factor: Sequence[float]=...,**kwargs):
    """Functional interface for ResampleImage"""
    import itk

    kwarg_typehints = { 'match_image':match_image,'make_isotropic':make_isotropic,'make_high_res_iso':make_high_res_iso,'interpolator':interpolator,'load_transform':load_transform,'transform':transform,'spacing':spacing,'origin':origin,'index':index,'size':size,'resample_factor':resample_factor }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ResampleImage.New(*args, **kwargs)

    return instance.__internal_call__()

def resample_image_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ResampleImage
    resample_image.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    resample_image.__doc__ = filter_object.__doc__



