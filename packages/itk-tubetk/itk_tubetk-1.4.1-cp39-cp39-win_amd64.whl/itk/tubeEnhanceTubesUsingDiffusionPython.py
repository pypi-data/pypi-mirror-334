# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeEnhanceTubesUsingDiffusionPython
else:
    import _tubeEnhanceTubesUsingDiffusionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython

def tubeEnhanceTubesUsingDiffusionD2_New():
    return tubeEnhanceTubesUsingDiffusionD2.New()

class tubeEnhanceTubesUsingDiffusionD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiffusionD2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiffusionD2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_Clone(self)

    def SetMinSigma(self, _arg):
        r"""
        SetMinSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMinSigma(self, _arg)

    def GetMinSigma(self):
        r"""GetMinSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMinSigma(self)

    def SetMaxSigma(self, _arg):
        r"""
        SetMaxSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetMaxSigma(self, _arg)

    def GetMaxSigma(self):
        r"""GetMaxSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetMaxSigma(self)

    def SetNumSigmaSteps(self, _arg):
        r"""
        SetNumSigmaSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetNumSigmaSteps(self, _arg)

    def GetNumSigmaSteps(self):
        r"""GetNumSigmaSteps(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetNumSigmaSteps(self)

    def SetRecalculateTubeness(self, value):
        r"""
        SetRecalculateTubeness(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetRecalculateTubeness(self, value)

    def GetRecalculateTubeness(self):
        r"""GetRecalculateTubeness(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetRecalculateTubeness(self)

    def SetBeta(self, value):
        r"""
        SetBeta(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetBeta(self, value)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetBeta(self)

    def SetGamma(self, value):
        r"""
        SetGamma(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetGamma(self, value)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetGamma(self)

    def SetEpsilon(self, value):
        r"""
        SetEpsilon(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetEpsilon(self, value)

    def GetEpsilon(self):
        r"""GetEpsilon(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetEpsilon(self)

    def SetOmega(self, value):
        r"""
        SetOmega(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetOmega(self, value)

    def GetOmega(self):
        r"""GetOmega(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOmega(self)

    def SetSensitivity(self, value):
        r"""
        SetSensitivity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetSensitivity(self, value)

    def GetSensitivity(self):
        r"""GetSensitivity(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetSensitivity(self)

    def SetTimeStep(self, value):
        r"""
        SetTimeStep(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetTimeStep(self, value)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetTimeStep(self)

    def SetIterations(self, value):
        r"""
        SetIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetIterations(self, value)

    def GetIterations(self):
        r"""GetIterations(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetIterations(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageD2 const *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_GetOutput(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiffusionD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionD2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionD2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionD2_swigregister(tubeEnhanceTubesUsingDiffusionD2)

def tubeEnhanceTubesUsingDiffusionF2_New():
    return tubeEnhanceTubesUsingDiffusionF2.New()

class tubeEnhanceTubesUsingDiffusionF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiffusionF2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiffusionF2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_Clone(self)

    def SetMinSigma(self, _arg):
        r"""
        SetMinSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMinSigma(self, _arg)

    def GetMinSigma(self):
        r"""GetMinSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMinSigma(self)

    def SetMaxSigma(self, _arg):
        r"""
        SetMaxSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetMaxSigma(self, _arg)

    def GetMaxSigma(self):
        r"""GetMaxSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetMaxSigma(self)

    def SetNumSigmaSteps(self, _arg):
        r"""
        SetNumSigmaSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetNumSigmaSteps(self, _arg)

    def GetNumSigmaSteps(self):
        r"""GetNumSigmaSteps(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetNumSigmaSteps(self)

    def SetRecalculateTubeness(self, value):
        r"""
        SetRecalculateTubeness(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetRecalculateTubeness(self, value)

    def GetRecalculateTubeness(self):
        r"""GetRecalculateTubeness(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetRecalculateTubeness(self)

    def SetBeta(self, value):
        r"""
        SetBeta(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetBeta(self, value)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetBeta(self)

    def SetGamma(self, value):
        r"""
        SetGamma(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetGamma(self, value)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetGamma(self)

    def SetEpsilon(self, value):
        r"""
        SetEpsilon(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetEpsilon(self, value)

    def GetEpsilon(self):
        r"""GetEpsilon(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetEpsilon(self)

    def SetOmega(self, value):
        r"""
        SetOmega(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetOmega(self, value)

    def GetOmega(self):
        r"""GetOmega(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOmega(self)

    def SetSensitivity(self, value):
        r"""
        SetSensitivity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetSensitivity(self, value)

    def GetSensitivity(self):
        r"""GetSensitivity(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetSensitivity(self)

    def SetTimeStep(self, value):
        r"""
        SetTimeStep(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetTimeStep(self, value)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetTimeStep(self)

    def SetIterations(self, value):
        r"""
        SetIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetIterations(self, value)

    def GetIterations(self):
        r"""GetIterations(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetIterations(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageF2 const *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_GetOutput(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiffusionF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionF2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionF2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionF2_swigregister(tubeEnhanceTubesUsingDiffusionF2)

def tubeEnhanceTubesUsingDiffusionSS2_New():
    return tubeEnhanceTubesUsingDiffusionSS2.New()

class tubeEnhanceTubesUsingDiffusionSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiffusionSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiffusionSS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_Clone(self)

    def SetMinSigma(self, _arg):
        r"""
        SetMinSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMinSigma(self, _arg)

    def GetMinSigma(self):
        r"""GetMinSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMinSigma(self)

    def SetMaxSigma(self, _arg):
        r"""
        SetMaxSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetMaxSigma(self, _arg)

    def GetMaxSigma(self):
        r"""GetMaxSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetMaxSigma(self)

    def SetNumSigmaSteps(self, _arg):
        r"""
        SetNumSigmaSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetNumSigmaSteps(self, _arg)

    def GetNumSigmaSteps(self):
        r"""GetNumSigmaSteps(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetNumSigmaSteps(self)

    def SetRecalculateTubeness(self, value):
        r"""
        SetRecalculateTubeness(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetRecalculateTubeness(self, value)

    def GetRecalculateTubeness(self):
        r"""GetRecalculateTubeness(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetRecalculateTubeness(self)

    def SetBeta(self, value):
        r"""
        SetBeta(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetBeta(self, value)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetBeta(self)

    def SetGamma(self, value):
        r"""
        SetGamma(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetGamma(self, value)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetGamma(self)

    def SetEpsilon(self, value):
        r"""
        SetEpsilon(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetEpsilon(self, value)

    def GetEpsilon(self):
        r"""GetEpsilon(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetEpsilon(self)

    def SetOmega(self, value):
        r"""
        SetOmega(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetOmega(self, value)

    def GetOmega(self):
        r"""GetOmega(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOmega(self)

    def SetSensitivity(self, value):
        r"""
        SetSensitivity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetSensitivity(self, value)

    def GetSensitivity(self):
        r"""GetSensitivity(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetSensitivity(self)

    def SetTimeStep(self, value):
        r"""
        SetTimeStep(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetTimeStep(self, value)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetTimeStep(self)

    def SetIterations(self, value):
        r"""
        SetIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetIterations(self, value)

    def GetIterations(self):
        r"""GetIterations(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetIterations(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageSS2 const *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_GetOutput(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiffusionSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionSS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionSS2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionSS2_swigregister(tubeEnhanceTubesUsingDiffusionSS2)

def tubeEnhanceTubesUsingDiffusionUC2_New():
    return tubeEnhanceTubesUsingDiffusionUC2.New()

class tubeEnhanceTubesUsingDiffusionUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiffusionUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiffusionUC2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_Clone(self)

    def SetMinSigma(self, _arg):
        r"""
        SetMinSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMinSigma(self, _arg)

    def GetMinSigma(self):
        r"""GetMinSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMinSigma(self)

    def SetMaxSigma(self, _arg):
        r"""
        SetMaxSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetMaxSigma(self, _arg)

    def GetMaxSigma(self):
        r"""GetMaxSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetMaxSigma(self)

    def SetNumSigmaSteps(self, _arg):
        r"""
        SetNumSigmaSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetNumSigmaSteps(self, _arg)

    def GetNumSigmaSteps(self):
        r"""GetNumSigmaSteps(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetNumSigmaSteps(self)

    def SetRecalculateTubeness(self, value):
        r"""
        SetRecalculateTubeness(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetRecalculateTubeness(self, value)

    def GetRecalculateTubeness(self):
        r"""GetRecalculateTubeness(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetRecalculateTubeness(self)

    def SetBeta(self, value):
        r"""
        SetBeta(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetBeta(self, value)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetBeta(self)

    def SetGamma(self, value):
        r"""
        SetGamma(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetGamma(self, value)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetGamma(self)

    def SetEpsilon(self, value):
        r"""
        SetEpsilon(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetEpsilon(self, value)

    def GetEpsilon(self):
        r"""GetEpsilon(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetEpsilon(self)

    def SetOmega(self, value):
        r"""
        SetOmega(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetOmega(self, value)

    def GetOmega(self):
        r"""GetOmega(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOmega(self)

    def SetSensitivity(self, value):
        r"""
        SetSensitivity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetSensitivity(self, value)

    def GetSensitivity(self):
        r"""GetSensitivity(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetSensitivity(self)

    def SetTimeStep(self, value):
        r"""
        SetTimeStep(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetTimeStep(self, value)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetTimeStep(self)

    def SetIterations(self, value):
        r"""
        SetIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetIterations(self, value)

    def GetIterations(self):
        r"""GetIterations(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetIterations(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUC2 const *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_GetOutput(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiffusionUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUC2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionUC2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUC2_swigregister(tubeEnhanceTubesUsingDiffusionUC2)

def tubeEnhanceTubesUsingDiffusionUS2_New():
    return tubeEnhanceTubesUsingDiffusionUS2.New()

class tubeEnhanceTubesUsingDiffusionUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeEnhanceTubesUsingDiffusionUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeEnhanceTubesUsingDiffusionUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeEnhanceTubesUsingDiffusionUS2_Pointer"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_Clone(self)

    def SetMinSigma(self, _arg):
        r"""
        SetMinSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMinSigma(self, _arg)

    def GetMinSigma(self):
        r"""GetMinSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMinSigma(self)

    def SetMaxSigma(self, _arg):
        r"""
        SetMaxSigma(self, _arg)

        Parameters
        ----------
        _arg: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetMaxSigma(self, _arg)

    def GetMaxSigma(self):
        r"""GetMaxSigma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetMaxSigma(self)

    def SetNumSigmaSteps(self, _arg):
        r"""
        SetNumSigmaSteps(self, _arg)

        Parameters
        ----------
        _arg: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetNumSigmaSteps(self, _arg)

    def GetNumSigmaSteps(self):
        r"""GetNumSigmaSteps(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetNumSigmaSteps(self)

    def SetRecalculateTubeness(self, value):
        r"""
        SetRecalculateTubeness(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetRecalculateTubeness(self, value)

    def GetRecalculateTubeness(self):
        r"""GetRecalculateTubeness(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetRecalculateTubeness(self)

    def SetBeta(self, value):
        r"""
        SetBeta(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetBeta(self, value)

    def GetBeta(self):
        r"""GetBeta(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetBeta(self)

    def SetGamma(self, value):
        r"""
        SetGamma(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetGamma(self, value)

    def GetGamma(self):
        r"""GetGamma(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetGamma(self)

    def SetEpsilon(self, value):
        r"""
        SetEpsilon(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetEpsilon(self, value)

    def GetEpsilon(self):
        r"""GetEpsilon(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetEpsilon(self)

    def SetOmega(self, value):
        r"""
        SetOmega(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetOmega(self, value)

    def GetOmega(self):
        r"""GetOmega(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOmega(self)

    def SetSensitivity(self, value):
        r"""
        SetSensitivity(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetSensitivity(self, value)

    def GetSensitivity(self):
        r"""GetSensitivity(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetSensitivity(self)

    def SetTimeStep(self, value):
        r"""
        SetTimeStep(self, value)

        Parameters
        ----------
        value: double

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetTimeStep(self, value)

    def GetTimeStep(self):
        r"""GetTimeStep(self) -> double"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetTimeStep(self)

    def SetIterations(self, value):
        r"""
        SetIterations(self, value)

        Parameters
        ----------
        value: unsigned int

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetIterations(self, value)

    def GetIterations(self):
        r"""GetIterations(self) -> unsigned int"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetIterations(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkImageUS2 const *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_GetOutput(self)
    __swig_destroy__ = _tubeEnhanceTubesUsingDiffusionPython.delete_tubeEnhanceTubesUsingDiffusionUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeEnhanceTubesUsingDiffusionUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeEnhanceTubesUsingDiffusionUS2

        Create a new object of the class tubeEnhanceTubesUsingDiffusionUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeEnhanceTubesUsingDiffusionUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeEnhanceTubesUsingDiffusionUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeEnhanceTubesUsingDiffusionUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeEnhanceTubesUsingDiffusionUS2 in _tubeEnhanceTubesUsingDiffusionPython:
_tubeEnhanceTubesUsingDiffusionPython.tubeEnhanceTubesUsingDiffusionUS2_swigregister(tubeEnhanceTubesUsingDiffusionUS2)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def enhance_tubes_using_diffusion(*args,  min_sigma: float=..., max_sigma: float=..., num_sigma_steps: int=..., recalculate_tubeness: int=..., beta: float=..., gamma: float=..., epsilon: float=..., omega: float=..., sensitivity: float=..., time_step: float=..., iterations: int=...,**kwargs):
    """Functional interface for EnhanceTubesUsingDiffusion"""
    import itk

    kwarg_typehints = { 'min_sigma':min_sigma,'max_sigma':max_sigma,'num_sigma_steps':num_sigma_steps,'recalculate_tubeness':recalculate_tubeness,'beta':beta,'gamma':gamma,'epsilon':epsilon,'omega':omega,'sensitivity':sensitivity,'time_step':time_step,'iterations':iterations }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.EnhanceTubesUsingDiffusion.New(*args, **kwargs)

    return instance.__internal_call__()

def enhance_tubes_using_diffusion_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.EnhanceTubesUsingDiffusion
    enhance_tubes_using_diffusion.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    enhance_tubes_using_diffusion.__doc__ = filter_object.__doc__



