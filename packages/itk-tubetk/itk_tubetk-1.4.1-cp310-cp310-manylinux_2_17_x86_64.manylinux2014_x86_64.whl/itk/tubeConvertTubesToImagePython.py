# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _TubeTKPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _tubeConvertTubesToImagePython
else:
    import _tubeConvertTubesToImagePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkSpatialObjectBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkArrayPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython

def tubeConvertTubesToImageD2_New():
    return tubeConvertTubesToImageD2.New()

class tubeConvertTubesToImageD2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageD2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageD2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageD2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageD2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageD2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageD2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageD2

        Create a new object of the class tubeConvertTubesToImageD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageD2 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageD2_swigregister(tubeConvertTubesToImageD2)

def tubeConvertTubesToImageD3_New():
    return tubeConvertTubesToImageD3.New()

class tubeConvertTubesToImageD3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageD3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageD3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageD3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageD3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageD3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageD3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageD3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageD3

        Create a new object of the class tubeConvertTubesToImageD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageD3 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageD3_swigregister(tubeConvertTubesToImageD3)

def tubeConvertTubesToImageF2_New():
    return tubeConvertTubesToImageF2.New()

class tubeConvertTubesToImageF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageF2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageF2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageF2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageF2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageF2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageF2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageF2

        Create a new object of the class tubeConvertTubesToImageF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageF2 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageF2_swigregister(tubeConvertTubesToImageF2)

def tubeConvertTubesToImageF3_New():
    return tubeConvertTubesToImageF3.New()

class tubeConvertTubesToImageF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageF3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageF3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageF3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageF3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageF3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageF3

        Create a new object of the class tubeConvertTubesToImageF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageF3 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageF3_swigregister(tubeConvertTubesToImageF3)

def tubeConvertTubesToImageSS2_New():
    return tubeConvertTubesToImageSS2.New()

class tubeConvertTubesToImageSS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageSS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageSS2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageSS2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageSS2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageSS2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageSS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageSS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageSS2

        Create a new object of the class tubeConvertTubesToImageSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageSS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageSS2 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageSS2_swigregister(tubeConvertTubesToImageSS2)

def tubeConvertTubesToImageSS3_New():
    return tubeConvertTubesToImageSS3.New()

class tubeConvertTubesToImageSS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageSS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageSS3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageSS3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageSS3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageSS3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageSS3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageSS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageSS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageSS3

        Create a new object of the class tubeConvertTubesToImageSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageSS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageSS3 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageSS3_swigregister(tubeConvertTubesToImageSS3)

def tubeConvertTubesToImageUC2_New():
    return tubeConvertTubesToImageUC2.New()

class tubeConvertTubesToImageUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageUC2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageUC2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageUC2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageUC2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageUC2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageUC2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageUC2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageUC2

        Create a new object of the class tubeConvertTubesToImageUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageUC2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageUC2 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageUC2_swigregister(tubeConvertTubesToImageUC2)

def tubeConvertTubesToImageUC3_New():
    return tubeConvertTubesToImageUC3.New()

class tubeConvertTubesToImageUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageUC3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageUC3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageUC3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageUC3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUC3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageUC3

        Create a new object of the class tubeConvertTubesToImageUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageUC3 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageUC3_swigregister(tubeConvertTubesToImageUC3)

def tubeConvertTubesToImageUS2_New():
    return tubeConvertTubesToImageUS2.New()

class tubeConvertTubesToImageUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageUS2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageUS2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageUS2_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageUS2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageUS2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject2 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS2"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageUS2

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageUS2

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageUS2

        Create a new object of the class tubeConvertTubesToImageUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageUS2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageUS2 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageUS2_swigregister(tubeConvertTubesToImageUS2)

def tubeConvertTubesToImageUS3_New():
    return tubeConvertTubesToImageUS3.New()

class tubeConvertTubesToImageUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""Proxy of C++ tubeConvertTubesToImageUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> tubeConvertTubesToImageUS3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> tubeConvertTubesToImageUS3_Pointer"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_Clone(self)

    def SetUseRadius(self, value):
        r"""
        SetUseRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetUseRadius(self, value)

    def GetUseRadius(self):
        r"""GetUseRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetUseRadius(self)

    def SetColorByTubeId(self, value):
        r"""
        SetColorByTubeId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByTubeId(self, value)

    def SetColorByPointId(self, value):
        r"""
        SetColorByPointId(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByPointId(self, value)

    def SetColorByRadius(self, value):
        r"""
        SetColorByRadius(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByRadius(self, value)

    def SetColorByRidgeness(self, value):
        r"""
        SetColorByRidgeness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByRidgeness(self, value)

    def SetColorByMedialness(self, value):
        r"""
        SetColorByMedialness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByMedialness(self, value)

    def SetColorByBranchness(self, value):
        r"""
        SetColorByBranchness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByBranchness(self, value)

    def SetColorByCurvature(self, value):
        r"""
        SetColorByCurvature(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByCurvature(self, value)

    def SetColorByLevelness(self, value):
        r"""
        SetColorByLevelness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByLevelness(self, value)

    def SetColorByRoundness(self, value):
        r"""
        SetColorByRoundness(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByRoundness(self, value)

    def SetColorByIntensity(self, value):
        r"""
        SetColorByIntensity(self, value)

        Parameters
        ----------
        value: bool

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetColorByIntensity(self, value)

    def GetColorByTubeId(self):
        r"""GetColorByTubeId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByTubeId(self)

    def GetColorByPointId(self):
        r"""GetColorByPointId(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByPointId(self)

    def GetColorByRadius(self):
        r"""GetColorByRadius(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByRadius(self)

    def GetColorByRidgeness(self):
        r"""GetColorByRidgeness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByRidgeness(self)

    def GetColorByMedialness(self):
        r"""GetColorByMedialness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByMedialness(self)

    def GetColorByBranchness(self):
        r"""GetColorByBranchness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByBranchness(self)

    def GetColorByCurvature(self):
        r"""GetColorByCurvature(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByCurvature(self)

    def GetColorByLevelness(self):
        r"""GetColorByLevelness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByLevelness(self)

    def GetColorByRoundness(self):
        r"""GetColorByRoundness(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByRoundness(self)

    def GetColorByIntensity(self):
        r"""GetColorByIntensity(self) -> bool"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetColorByIntensity(self)

    def SetTemplateImage(self, pTemplateImage):
        r"""
        SetTemplateImage(self, pTemplateImage)

        Parameters
        ----------
        pTemplateImage: itkImageUS3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetTemplateImage(self, pTemplateImage)

    def GetTemplateImage(self):
        r"""GetTemplateImage(self) -> itkImageUS3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetTemplateImage(self)

    def SetInput(self, value):
        r"""
        SetInput(self, value)

        Parameters
        ----------
        value: itkSpatialObject3 const *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_SetInput(self, value)

    def GetInput(self):
        r"""GetInput(self) -> itkSpatialObject3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetInput(self)

    def GetOutput(self):
        r"""GetOutput(self) -> itkImageUS3"""
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_GetOutput(self)
    __swig_destroy__ = _tubeConvertTubesToImagePython.delete_tubeConvertTubesToImageUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> tubeConvertTubesToImageUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> tubeConvertTubesToImageUS3

        Create a new object of the class tubeConvertTubesToImageUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          tubeConvertTubesToImageUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = tubeConvertTubesToImageUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = tubeConvertTubesToImageUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register tubeConvertTubesToImageUS3 in _tubeConvertTubesToImagePython:
_tubeConvertTubesToImagePython.tubeConvertTubesToImageUS3_swigregister(tubeConvertTubesToImageUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def convert_tubes_to_image(*args,  use_radius: bool=..., color_by_tube_id: bool=..., color_by_point_id: bool=..., color_by_radius: bool=..., color_by_ridgeness: bool=..., color_by_medialness: bool=..., color_by_branchness: bool=..., color_by_curvature: bool=..., color_by_levelness: bool=..., color_by_roundness: bool=..., color_by_intensity: bool=..., template_image: itkt.Image=...,**kwargs):
    """Functional interface for ConvertTubesToImage"""
    import itk

    kwarg_typehints = { 'use_radius':use_radius,'color_by_tube_id':color_by_tube_id,'color_by_point_id':color_by_point_id,'color_by_radius':color_by_radius,'color_by_ridgeness':color_by_ridgeness,'color_by_medialness':color_by_medialness,'color_by_branchness':color_by_branchness,'color_by_curvature':color_by_curvature,'color_by_levelness':color_by_levelness,'color_by_roundness':color_by_roundness,'color_by_intensity':color_by_intensity,'template_image':template_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConvertTubesToImage.New(*args, **kwargs)

    return instance.__internal_call__()

def convert_tubes_to_image_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.TubeTK.ConvertTubesToImage
    convert_tubes_to_image.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    convert_tubes_to_image.__doc__ = filter_object.__doc__



