# generated by datamodel-codegen:
#   filename:  auth-server-global.json
#   timestamp: 2025-03-12T19:06:56+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, List, Optional

from pydantic import BaseModel, Field, ConfigDict # , AliasChoices


class AuthServerType(Enum):
    RADIUS = 'RADIUS'
    LDAP = 'LDAP'
    TACACS = 'TACACS'
    WINDOWS = 'WINDOWS'
    RFC3576 = 'RFC3576'
    XMLAPI = 'XMLAPI'
    RADSEC = 'RADSEC'
    LOCAL = 'LOCAL'


class AuthenticationType(Enum):
    PAP = None
    MSCHAPv2 = 'MSCHAPv2'
    CHAP = 'CHAP'


class TrackingMode(Enum):
    ANY = 'ANY'
    DEAD_ONLY = 'DEAD_ONLY'


class PasswordType(Enum):
    PLAIN_TEXT = 'PLAIN_TEXT'
    CIPHER_TEXT = 'CIPHER_TEXT'


class TrackingPasswordConfig(BaseModel):
    password_type: Annotated[
        Optional[PasswordType],
        Field(
            # alias=AliasChoices('password-type', 'password_type'),
            serialization_alias='password-type',
            description='Specify the tracking password type: CIPHER_TEXT or PLAIN_TEXT.',
        ),
    ] = 'PLAIN_TEXT'
    ciphertext_value: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('ciphertext-value', 'ciphertext_value'),
            serialization_alias='ciphertext-value',
            description='Ciphertext for tracking password. This field can be configured only when password-type is CIPHER_TEXT.',
            max_length=9999,
        ),
    ] = None
    plaintext_value: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('plaintext-value', 'plaintext_value'),
            serialization_alias='plaintext-value',
            description='Tracking plaintext password. This field can be configured only when password-type is PLAIN_TEXT.',
            max_length=9999,
        ),
    ] = None


class SharedSecretConfig(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    secret_type: Annotated[
        Optional[PasswordType],
        Field(
            # alias=AliasChoices('secret-type', 'secret_type'),
            serialization_alias='secret-type',
            description='Specify the secret key type: CIPHER_TEXT or PLAIN_TEXT.',
        ),
    ] = 'PLAIN_TEXT'
    ciphertext_value: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('ciphertext-value', 'ciphertext_value'),
            serialization_alias='ciphertext-value',
            description='The global encrypted shared key used between the authentication\nserver and the device. This field can be configured only when secret-type is CIPHER_TEXT.',
            max_length=9999,
        ),
    ] = None
    plaintext_value: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('plaintext-value', 'plaintext_value'),
            serialization_alias='plaintext-value',
            description='The global unencrypted shared key used between the authentication\nserver and the device. This field can be configured only when secret-type is PLAIN_TEXT.',
            max_length=9999,
        ),
    ] = None


class TunnelPrivateGroupId(Enum):
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'


class AccessRequestInclude(BaseModel):
    framed_ip_address: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('framed-ip-address', 'framed_ip_address'),
            serialization_alias='framed-ip-address',
            description='Include framed-ip-address in RADIUS access-request',
        ),
    ] = None
    tunnel_private_group_id: Annotated[
        Optional[TunnelPrivateGroupId],
        Field(
            # alias=AliasChoices('tunnel-private-group-id', 'tunnel_private_group_id'),
            serialization_alias='tunnel-private-group-id',
            description='Include VLAN identifier in radius access-request',
        ),
    ] = None


class AuthServerGlobalConfig(BaseModel):
    profile: Annotated[
        Optional[List[AuthServerGlobalConfigProfile]],
        Field(
            description='Authentication Server Global Profiles.', max_length=2147483647
        ),
    ] = None


class CountObjectsInModule(BaseModel):
    LOCAL: Annotated[
        Optional[int],
        Field(description='Local config object.', ge=0, le=9223372036854776000),
    ] = 0
    SHARED: Annotated[
        Optional[int],
        Field(description='Shared config object.', ge=0, le=9223372036854776000),
    ] = 0
    ANY: Annotated[
        Optional[int],
        Field(
            description='Any of local or shared config object.',
            ge=0,
            le=9223372036854776000,
        ),
    ] = 0


class Metadata(BaseModel):
    count_objects_in_module: Annotated[
        Optional[CountObjectsInModule], Field(description='Object count in module')
    ] = None


class AuthServerGlobalConfigGET(BaseModel):
    profile: Annotated[
        Optional[List[AuthServerGlobalConfigProfile]],
        Field(
            description='Authentication Server Global Profiles.', max_length=2147483647
        ),
    ] = None
    metadata: Annotated[Optional[Metadata], Field(description='Summary metadata')] = (
        None
    )

class AuthServerGlobalConfigProfile(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    name: Annotated[
        Optional[str], Field(description='Profile name.', max_length=256, min_length=1)
    ] = None
    description: Annotated[
        Optional[str],
        Field(description='Profile description', max_length=256, min_length=1),
    ] = None
    type: Annotated[Optional[AuthServerType], Field(description='Auth Server Type.')] = None
    enable_radsec: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('enable-radsec', 'enable_radsec'),
            serialization_alias='enable-radsec',
            description='Enables RADIUS over TLS. This field can be configured only when type is RADIUS.',
        ),
    ] = None
    authentication_type: Annotated[
        Optional[AuthenticationType],
        Field(
            # alias=AliasChoices('authentication-type', 'authentication_type'),
            serialization_alias='authentication-type',
            description='Specifies authentication protocol which is used for communication with Auth servers. This field can be configured only when type is RADIUS or TACACS.',
        ),
    ] = None
    retries: Annotated[
        Optional[int],
        Field(
            description='The number of retry attempts to use for reaching out to RADIUS servers. This field can be configured only when type is RADIUS.',
            ge=0,
            le=5,
        ),
    ] = None
    service_type_in_access_request: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('service-type-in-access-request', 'service-type-in-access-request'),
            serialization_alias='service-type-in-access-request',
            description='Service Type attribute in access request. This field can be configured only when type is RADIUS.',
        ),
    ] = None
    status_server_interval: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('status-server-interval', 'status_server_interval'),
            serialization_alias='status-server-interval',
            description='Time interval to send the status server message. This field can be configured only when type is RADIUS.',
            ge=10,
            le=86400,
        ),
    ] = None
    single_connection_mode: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('single-connection-mode', 'single_connection_mode'),
            serialization_alias='single-connection-mode',
            description='Single connection mode for TACACS servers. This field can be configured only when type is TACACS.',
        ),
    ] = None
    timeout: Annotated[
        Optional[int],
        Field(
            description='The timeout value specifies the number of seconds to wait for a response from the Auth server before moving to next server.\nFor CX, range is 1-60. This field can be configured only when type is RADIUS or TACACS.',
            ge=1,
            le=255,
        ),
    ] = None
    tls_initial_connection_timeout: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('tls-initial-connection-timeout', 'tls_initial_connection_timeout'),
            serialization_alias='tls-initial-connection-timeout',
            description='TLS Initial connection timeout (timeout for TLS handshake). This field can be configured only when type is RADIUS.',
            ge=5,
            le=300,
        ),
    ] = None
    tracking_enable: Annotated[
        Optional[bool],
        Field(alias='tracking-enable', description='Tracking status of the server.'),
    ] = None
    tracking_mode: Annotated[
        Optional[TrackingMode],
        Field(alias='tracking-mode', description='Tracking mode of the server'),
    ] = None
    tracking_req_packet: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('tracking-req-packet', 'tracking_req_packet'),
            serialization_alias='tracking-req-packet',
            description='Maximum number of request packet to be sent for RADIUS tracking on retry',
            ge=1,
            le=5,
        ),
    ] = None
    tracking_retries: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('tracking-retries', 'tracking_retries'),
            serialization_alias='tracking-retries',
            description='Maximum number of retries to be done for RADIUS tracking. This field can be configured only when type is RADIUS.',
            ge=0,
            le=5,
        ),
    ] = None
    tracking_interval: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('tracking-interval', 'tracking_interval'),
            serialization_alias='tracking-interval',
            description='Time interval to send the tracking request for Auth Server. This field can be configured only when type is RADIUS, TACACS or RADSEC.',
            ge=60,
            le=86400,
        ),
    ] = None
    tracking_user_name: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('tracking-user-name', 'tracking_user_name'),
            serialization_alias='tracking-user-name',
            description='Username that will be used in Access-Request packets for Radius Server Tracking. This field can be configured only when type is RADIUS, TACACS or RADSEC.',
            max_length=64,
            min_length=1,
        ),
    ] = None
    tracking_password_config: Annotated[
        Optional[TrackingPasswordConfig],
        Field(
            # alias=AliasChoices('tracking-password-config', 'tracking_password_config'),
            serialization_alias='tracking-password-config',
            description='Configure the password used to track the RADIUS server. This field can be configured only when type is RADIUS or TACACS.',
        ),
    ] = None
    enable: Annotated[
        Optional[bool],
        Field(
            description='Dynamic Authorization Enable.This field can be configured only when type is RFC3576.'
        ),
    ] = None
    udp_port: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('udp-port', 'udp_port'),
            serialization_alias='udp-port',
            description='UDP port number used by the dynamic authorization server. This field can be configured only when type is RADIUS or RFC3576',
            ge=0,
            le=65535,
        ),
    ] = None
    deadtime: Annotated[
        Optional[int],
        Field(
            description='Dead time for unavailable authentication server.',
            ge=0,
            le=1440,
        ),
    ] = None
    infinite_deadtime: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('infinite-deadtime', 'infinite_deadtime'),
            serialization_alias='infinite-deadtime',
            description='Infinite deadtime for the Auth server.',
        ),
    ] = None
    shared_secret_config: Annotated[
        Optional[SharedSecretConfig],
        Field(
            # alias=AliasChoices('shared-secret-config', 'shared_secret_config'),
            serialization_alias='shared-secret-config',
            description='This passkey is used as shared-secret for encrypting the communication between all Auth servers and the switch.\nThis field can be configured only when type is RADIUS or TACACS',
        ),
    ] = None
    access_request_include: Annotated[
        Optional[AccessRequestInclude],
        Field(
            # alias=AliasChoices('access-request-include', 'access_request_include'),
            serialization_alias='access-request-include',
            description='Attributes to be included in access-request',
        ),
    ] = None
    fqdn_retry_interval: Annotated[
        Optional[int],
        Field(
            # alias=AliasChoices('fqdn-retry-interval', 'fqdn_retry_interval'),
            serialization_alias='fqdn-retry-interval',
            description='FQDN retry time in minutes',
            ge=0,
            le=5,
        ),
    ] = None
    ordering_sequence: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('ordering-sequence', 'ordering_sequence'),
            serialization_alias='ordering-sequence',
            description='Enables reordering upon deleting of tacacs server.',
        ),
    ] = None
    vsa_disable: Annotated[
        Optional[bool],
        Field(
            # alias=AliasChoices('vsa-disable', 'vsa_disable'),
            serialization_alias='vsa-disable',
            description='Disables vendor specific attribute capability advertisement.',
        ),
    ] = None



class Successful200(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['200'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Success code.',
            examples=['SUCC_001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of successful response.\n',
            examples=['Success.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error400(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['400'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_AP001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Bad request. Invalid values supplied in request.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error401(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['401'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_R001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Unauthorized. Failed in RBAC Authorization.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error403(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['403'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_CN001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Forbidden. Capability Rule fail.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error404(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['404'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_CN003'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Not found. Yang / Corresponding Rule is missing.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error406(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['406'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_AP003'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Not Acceptable. Invalid data format.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error408(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['408'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_K001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Request Timeout.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error412(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['412'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_LY002'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Precondition Failed.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error500(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['500'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_C001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Internal server error. Invalid scope.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class ArubaAuthServerGlobalCppmIdentity(BaseModel):
    cppm_user_name: Annotated[
        Optional[str],
        Field(
            # alias=AliasChoices('cppm-user-name', 'cppm_user_name'),
            serialization_alias='cppm-user-name',
            description='CPPM User Name.',
            max_length=255,
            min_length=1,
        ),
    ] = None
    cppm_password: Annotated[
        Optional[str],
        Field(description='CPPM Password.', max_length=9999),
    ] = None


class ArubaAuthServerGlobalAuthServerGlobalConfigTop(BaseModel):
    auth_server_global_config: Annotated[
        Optional[AuthServerGlobalConfig],
        Field(
            # alias=AliasChoices('auth-server-global-config', 'auth_server_global_config'),
            serialization_alias='auth-server-global-config',
            description='Global configurations for Auth servers.',
        ),
    ] = None
