# generated by datamodel-codegen:
#   filename:  local-management.json
#   timestamp: 2025-03-13T04:30:11+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, AliasChoices, ConfigDict


class BaudRate(Enum):
    RATE_1200 = 'RATE_1200'
    RATE_2400 = 'RATE_2400'
    RATE_4800 = 'RATE_4800'
    RATE_9600 = 'RATE_9600'
    RATE_19200 = 'RATE_19200'
    RATE_38400 = 'RATE_38400'
    RATE_57600 = 'RATE_57600'
    RATE_115200 = 'RATE_115200'
    SPEED_SENSE = 'SPEED_SENSE'


class FlowControl(Enum):
    XON_XOFF = 'XON_XOFF'
    NONE = 'NONE'


class LocalTerminal(Enum):
    ANSI = 'ANSI'
    NONE = 'NONE'
    VT100 = 'VT100'


class Console(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    enable: Annotated[Optional[bool], Field(description='Enables console access through the serial port.')] = None
    baud_rate: Annotated[Optional[BaudRate], Field(serialization_alias='baud-rate', description='Console serial port data transmission speed.')] = 'RATE_115200'
    flow_control: Annotated[Optional[FlowControl], Field(serialization_alias='flow-control', description='Console serial port flow control method.')] = 'XON_XOFF'
    idle_timeout: Annotated[Optional[int], Field(serialization_alias='idle-timeout', description='Console session timeout in seconds.', ge=0, le=7200)] = None
    usb_idle_timeout: Annotated[Optional[bool], Field(serialization_alias='usb-idle-timeout', description='Serial or USB console session timeout.')] = None
    local_terminal: Annotated[Optional[LocalTerminal], Field(serialization_alias='local-terminal', description='Enable the type of terminal for the current console sessions.')] = None
    terminal: Annotated[Optional[LocalTerminal], Field(description='Enable the type of terminal for the all console sessions.')] = None
    max_sessions: Annotated[Optional[int], Field(serialization_alias='max-sessions', description='Maximum concurrent sessions supported by the device.', ge=1, le=7)] = '7'
    usb_enable: Annotated[Optional[bool], Field(serialization_alias='usb-enable', description='Enable the USB console.')] = None
    serviceos_password_prompt: Annotated[Optional[bool], Field(serialization_alias='serviceos-password-prompt', description='Enables the ServiceOS boot loader password prompt.')] = None


class HashMgmtPassword(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable hashing of the management user password.')] = None
    min_password_length: Annotated[Optional[int], Field(serialization_alias='min-password-length', description='Minimum password length.\nIf this value exceeds the current password length, the user will be prompted to change their password at the next login.', ge=1, le=31)] = None


class DownloadMethod(Enum):
    FTP = 'FTP'
    FTPS = 'FTPS'


class SyncDay(Enum):
    sunday = 'sunday'
    monday = 'monday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    thursday = 'thursday'
    friday = 'friday'
    saturday = 'saturday'
    everyday = 'everyday'


class ManagedModeProfile(BaseModel):
    server_name: Annotated[Optional[str], Field(serialization_alias='server-name', description='Name of the server or the IP address of the server from which the\nconfiguration file must be downloaded.', max_length=40, min_length=1)] = None
    automatic: Annotated[Optional[bool], Field(description='Enables the automatic mode to automatically generate the user\ncredentials based on AP MAC address.')] = None
    config_filename: Annotated[Optional[str], Field(serialization_alias='config-filename', description='Configuration filename.', max_length=40, min_length=1)] = None
    username: Annotated[Optional[str], Field(description='Username credentials set by user to enable automatic configuration when automatic is false.', max_length=40, min_length=1)] = None
    password: Annotated[Optional[str], Field(description='Password credentials set by the user to enable automatic configuration when automatic is false.', max_length=9999)] = None
    download_method: Annotated[Optional[DownloadMethod], Field(serialization_alias='download-method', description='Download configuration method (FTP or FTPS).')] = None
    retry_poll_period: Annotated[Optional[int], Field(serialization_alias='retry-poll-period', description='Time interval in minutes between two retries, after which\nAPs can retry downloading the configuration file.', ge=5, le=4294967295)] = None
    debug_mode: Annotated[Optional[bool], Field(serialization_alias='debug-mode', description='Enable debug mode.')] = None
    sync_day: Annotated[Optional[SyncDay], Field(serialization_alias='sync-day', description='Configuration day, for example to configure Sunday as day, specify 01.\nTo configure the synchronization period as everyday, enter 00.')] = None
    sync_hour: Annotated[Optional[int], Field(serialization_alias='sync-hour', description='Configuration hour in the range of 0-23.', ge=0, le=23)] = None
    sync_minute: Annotated[Optional[int], Field(serialization_alias='sync-minute', description='Configuration minute in the range of 0-59.', ge=0, le=59)] = None
    sync_window: Annotated[Optional[int], Field(serialization_alias='sync-window', description='Defines a window for synchronization of the configuration file.\nThe default value is 3 hours.', ge=0, le=3)] = '3'


class Session(Enum):
    LOGIN = 'LOGIN'
    CONSOLE = 'CONSOLE'


class UserLockoutItem(BaseModel):
    session: Annotated[Optional[Session], Field(description='User sessions for which the lockout is applied')] = None
    denylist_period: Annotated[Optional[int], Field(serialization_alias='denylist-period', description='Time period for which the unauthorizes users will be denylisted.\nThe value is measured in seconds.\nFor a CX device, the range is 1..3600 seconds. This value has no effect unless threshold is set.\nFor AP, valid range is 10..65535', ge=0, le=65535)] = None
    threshold: Annotated[Optional[int], Field(description='Number of invalid login attempts before a user is blocked out of the system.\nFor a CX device, the range is 1..10. If no value is set, the default is no limit on login attempts.', ge=1, le=65535)] = None
    lockout: Annotated[Optional[bool], Field(description='User based lockout enable/disable.')] = None


class Login(BaseModel):
    user_lockout: Annotated[Optional[List[UserLockoutItem]], Field(serialization_alias='user-lockout', description='User lockout configuration for management interfaces.', max_length=2147483647)] = None


class PasswordComplexity(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable Password Complexity feature.')] = None
    minimum_length: Annotated[Optional[int], Field(serialization_alias='minimum-length', description='Minimum password length required.\nFor a Gateway device, the default value is 6 characters and the range of values is 6-128 characters.\nFor a CX device, the default minimum length of the password is 8 characters.\nFor a CX device, the range is 1..32 for firmware versions 10.12 and earlier, 1..64 otherwise.', ge=0, le=128)] = None
    password_aging: Annotated[Optional[bool], Field(serialization_alias='password-aging', description='Enable password aging check.')] = None
    password_aging_period: Annotated[Optional[int], Field(serialization_alias='password-aging-period', description='Password aging period for a system.', ge=1, le=365)] = '90'
    password_alert_before_expiry: Annotated[Optional[int], Field(serialization_alias='password-alert-before-expiry', description='Number of days before password aging during which user is warned of pending password expiry.', ge=1, le=30)] = '9'
    password_expired_user_login_attempts: Annotated[Optional[int], Field(serialization_alias='password-expired-user-login-attempts', description='Number of subsequent logins allowed after password expiry.', ge=1, le=10)] = '3'
    password_expiry_user_login_attempts_period: Annotated[Optional[int], Field(serialization_alias='password-expiry-user-login-attempts-period', description='Duration in days in which the particular logins are allowed.', ge=1, le=90)] = '30'
    logon_details: Annotated[Optional[bool], Field(serialization_alias='logon-details', description='Enable/Disable accessing the logon details.')] = None
    password_update_interval: Annotated[Optional[int], Field(serialization_alias='password-update-interval', description='Wait duration in hours before the password update.', ge=0, le=168)] = '24'
    history_check: Annotated[Optional[bool], Field(serialization_alias='history-check', description='Enable password history check.')] = None
    history_count: Annotated[Optional[int], Field(serialization_alias='history-count', description='Maximum number of password history count for each user.\nFor a CX device, the default password history count is 5 and the range is 1-5.', ge=1, le=15)] = None
    repeat_char_check: Annotated[Optional[bool], Field(serialization_alias='repeat-char-check', description='Password repeat character check ensures password does not contain three of the same characters used consecutively.')] = None
    repeat_password_check: Annotated[Optional[bool], Field(serialization_alias='repeat-password-check', description='Password repeat check ensures same password is not allowed.')] = None
    repeat_username_check: Annotated[Optional[bool], Field(serialization_alias='repeat-username-check', description='Password repeat username check ensures same username or reverse of username is not set as password.')] = None
    all_repeat_check: Annotated[Optional[bool], Field(serialization_alias='all-repeat-check', description='Enables all possible repeat checks avialable.')] = None
    min_char_difference: Annotated[Optional[int], Field(serialization_alias='min-char-difference', description='Minimum number of character that the new password differes from old password.\nFor a CX device, the default value is 8 characters.\nFor a CX device, the range is 1..32 for firmware versions 10.12 and earlier, 1..64 otherwise.', ge=0, le=128)] = None
    numeric_count: Annotated[Optional[int], Field(serialization_alias='numeric-count', description='Minimum number of numeric count in a password.\nFor a Gateway device, the range of values is 0-10 numeric digits and the default value is 0.\nFor a CX device, the default value is 1 character.\nFor a CX device, the range is 0..32 for firmware versions 10.12 and earlier.', ge=0, le=64)] = None
    lowercase_count: Annotated[Optional[int], Field(serialization_alias='lowercase-count', description='Minimum number of lowercase count in a password.\nFor a Gateway device, the range of values is  0-10 minimum lower case characters. A value of 0 indicates that the minimum number of lower case required is disabled by default.\nFor a CX device, the default value is 1 character.\nFor a CX device, the range is 0..32 for firmware versions 10.12 and earlier.', ge=0, le=64)] = None
    uppercase_count: Annotated[Optional[int], Field(serialization_alias='uppercase-count', description='Minimum number of uppercase count in a password.\nFor a Gateway device, the range of values is 0-10 minimum upper case characters. A value of 0 indicates that minimum number of upper case required is disabled by default.\nFor a CX device, the default value is 1 character.\nFor a CX device, the range is 0..32 for firmware versions 10.12 and earlier.', ge=0, le=64)] = None
    special_char_count: Annotated[Optional[int], Field(serialization_alias='special-char-count', description="Minimum number of special character count in a password.\nFor a Gateway device, the special characters are !, @, #, $, %, ^, &, *, <, >, {, }, [, ], :, ., comma, |, +, ~, `. The range of values is 0-10 special characters. A value of 0 indicates that the minimum number of special character required is disabled by default. The following ( ')', '(' ;, -, space, =, /, ?) are dis-allowed.\nFor a CX device, the default value is 1 character.\nFor a CX device, the range is 0..32 for firmware versions 10.12 and earlier.", ge=0, le=64)] = None
    adjacent_char_type_count: Annotated[Optional[int], Field(serialization_alias='adjacent-char-type-count', description='Maximum number of adjacent characters allowed from character set.\nFor a Gateway device, the range of values is 0-10 max consecutive characters. A value of 0 indicates that enforcing of maximum number of consecutive character repeat is disabled by default.\nFor a CX device, the default value is 0 character. A value of 0 indicates that the enforcement on the adjacent characters from the character set in the password is disabled by default.', ge=0, le=63)] = '0'
    certificate_lock_out: Annotated[Optional[int], Field(serialization_alias='certificate-lock-out', description="Configuring the number of failed attempts within 3 minute window to lockout the user. Provides ability to reduce the number of login attempts that can be made in a short time. Automatically clears the lockout after configured 'lock-out' minutes. A value of 0 indicates that lockout of users is disabled.", ge=0, le=10)] = '0'
    certificate_lock_out_time: Annotated[Optional[int], Field(serialization_alias='certificate-lock-out-time', description='Configuring the number of minutes the user is locked out. The lockout is cleared without administrator intervention.', ge=1, le=1440)] = '3'
    password_lock_out: Annotated[Optional[int], Field(serialization_alias='password-lock-out', description="Configuring the number of failed attempts within 3 minute window to lockout the user. Provides ability to reduce the number of passwords that can be guessed in a short time. Automatically clears the lockout after configured 'lock-out' minutes. A value of 0 indicates that lockout of users is disabled.", ge=0, le=10)] = '0'
    password_lock_out_time: Annotated[Optional[int], Field(serialization_alias='password-lock-out-time', description='Configuring the number of minutes the user is locked out. The lockout is cleared without administrator intervention.', ge=1, le=1440)] = '3'


class TelnetServerListenInterface(Enum):
    OOBM = 'OOBM'
    DATA = 'DATA'
    BOTH = 'BOTH'


class VrfItem(RootModel[str]):
    root: Annotated[str, Field(description='VRF on which the telnet server is enabled/disabled.', max_length=9999)]


class TelnetServer(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable Telnet access to the system.')] = None
    telnet_server_listen_interface: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='telnet-server-listen-interface', description='The type of interface that the telnet server is available.')] = 'BOTH'
    vrf: Annotated[Optional[List[VrfItem]], Field(max_length=2147483647)] = None


class TftpServer(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable Telnet access to the system.')] = None
    tftp_listen_interface: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='tftp-listen-interface', description='The type of interface that the TFTP server is available.')] = 'BOTH'


class TftpClient(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable Telnet access to the system.')] = None
    blk_size: Annotated[Optional[int], Field(serialization_alias='blk-size', description='TFTP transfer block size.', ge=512, le=1416)] = None


class DisableCipherTypeEnum(Enum):
    AES_CBC = 'AES_CBC'
    AES_CTR = 'AES_CTR'


class DisableMacEnum(Enum):
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_SHA1_96 = 'HMAC_SHA1_96'


class BannerMessage(BaseModel):
    enforce_accept: Annotated[Optional[bool], Field(serialization_alias='enforce-accept', description='WebUI users must accept the banner to login.')] = None
    message_delimiter: Annotated[Optional[str], Field(serialization_alias='message-delimiter', description='Delimiter for banner-message.', max_length=9999, min_length=1)] = None
    text: Annotated[Optional[str], Field(description='Login banner text.', max_length=4095, min_length=0)] = None
    last_login: Annotated[Optional[bool], Field(serialization_alias='last-login', description='Displays last login banner.')] = None


class BannerExec(BaseModel):
    message_delimiter: Annotated[Optional[str], Field(serialization_alias='message-delimiter', description='Delimiter for banner-exec.', max_length=9999, min_length=1)] = None
    text: Annotated[Optional[str], Field(description='Authentication banner text.', max_length=4095, min_length=0)] = None


class Nae(BaseModel):
    cli_authorization: Annotated[Optional[bool], Field(serialization_alias='cli-authorization', description='Configure NAE agent ActionCLI commands to require authorization.')] = None


class CountObjectsInModule(BaseModel):
    LOCAL: Annotated[Optional[int], Field(description='Local config object.', ge=0, le=9223372036854776000)] = 0
    SHARED: Annotated[Optional[int], Field(description='Shared config object.', ge=0, le=9223372036854776000)] = 0
    ANY: Annotated[Optional[int], Field(description='Any of local or shared config object.', ge=0, le=9223372036854776000)] = 0


class Metadata(BaseModel):
    count_objects_in_module: Annotated[Optional[CountObjectsInModule], Field(description='Object count in module')] = None


class Console1(Console):
    pass


class ManagedModeProfile1(ManagedModeProfile):
    pass


class UserLockoutItem1(UserLockoutItem):
    pass


class Login1(BaseModel):
    user_lockout: Annotated[Optional[List[UserLockoutItem1]], Field(serialization_alias='user-lockout', description='User lockout configuration for management interfaces.', max_length=2147483647)] = None


class AccessType(Enum):
    SSH = 'SSH'
    TELNET = 'TELNET'
    CONSOLE = 'CONSOLE'
    HTTPS_SERVER = 'HTTPS_SERVER'
    DEFAULT = 'DEFAULT'
    COMMANDS = 'COMMANDS'
    REST_URI = 'REST_URI'
    EXEC = 'EXEC'
    SYSTEM = 'SYSTEM'
    NETWORK = 'NETWORK'


class RecordType(Enum):
    START_STOP = 'START_STOP'
    STOP_ONLY = 'STOP_ONLY'
    INTERIM_UPDATE = 'INTERIM_UPDATE'


class Instance(Enum):
    LOCAL = 'LOCAL'
    SYSLOG = 'SYSLOG'
    RADIUS = 'RADIUS'
    TACACS = 'TACACS'


class Instance1(RootModel[str]):
    root: Annotated[str, Field(description='Name of server group.\n - For CX, the instance shall be a server group or local authentication.', max_length=80, min_length=1)]


class AcctInstance(BaseModel):
    seq_id: Annotated[Optional[int], Field(serialization_alias='seq-id', description='The sequence id determines the accounting method order.', ge=0, le=255)] = None
    accounting_method: Annotated[Instance, Field(serialization_alias='accounting-method', description='Accounting method.')]
    mgmt_server_group: Annotated[Optional[str], Field(serialization_alias='mgmt-server-group', description='Management server group.', max_length=80, min_length=1)] = None


class AccountingGroupItem(BaseModel):
    access_type: Annotated[Optional[AccessType], Field(serialization_alias='access-type', description='Accounting access type.')] = None
    record_type: Annotated[Optional[RecordType], Field(serialization_alias='record-type', description='Accounting record type.')] = None
    instance: Annotated[Optional[List[Union[Instance, Instance1]]], Field(max_length=2147483647)] = None
    acct_instances: Annotated[Optional[List[AcctInstance]], Field(serialization_alias='acct-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local accounting.', max_length=2147483647)] = None


class AcctSession(Enum):
    UNIQUE = 'UNIQUE'
    COMMON = 'COMMON'


class AccountingSchema(BaseModel):
    accounting_group: Annotated[Optional[List[AccountingGroupItem]], Field(serialization_alias='accounting-group', description='Specifies the list of server groups and the order in which they will be applied for accounting of management sessions.', max_length=2147483647)] = None
    failthrough: Annotated[Optional[bool], Field(description='Enable accounting fail-through. This determines whether to access the next remote AAA server in case accounting is not recorded with the current server, the accounting will be attempted with the next configured server.\nIf true, the next server in line will be accessed.\nIf false, accounting will not be attempted with the next server.')] = None
    acct_session: Annotated[Optional[AcctSession], Field(serialization_alias='acct-session', description='Configure how the accounting sessions are identified.')] = 'UNIQUE'
    acct_switch_id: Annotated[Optional[bool], Field(serialization_alias='acct-switch-id', description='Include Switch identity when generating the session-id.')] = None
    periodic_update: Annotated[Optional[int], Field(serialization_alias='periodic-update', description='Configure accounting updates.', ge=0, le=4294967295)] = None
    supress_null_username: Annotated[Optional[bool], Field(serialization_alias='supress-null-username', description='Supress accouting for users with no username')] = None


class Instance3(Instance1):
    pass


class AcctInstance1(AcctInstance):
    pass


class LocalManagementprofileaccountingaccountingGroupSchema(BaseModel):
    access_type: Annotated[Optional[AccessType], Field(serialization_alias='access-type', description='Accounting access type.')] = None
    record_type: Annotated[Optional[RecordType], Field(serialization_alias='record-type', description='Accounting record type.')] = None
    instance: Annotated[Optional[List[Union[Instance, Instance3]]], Field(max_length=2147483647)] = None
    acct_instances: Annotated[Optional[List[AcctInstance1]], Field(serialization_alias='acct-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local accounting.', max_length=2147483647)] = None


class LocalManagementprofileaccountingaccountingGroupacctInstancesSchema(AcctInstance):
    pass


class SessionType(Enum):
    SSH = 'SSH'
    TELNET = 'TELNET'
    CONSOLE = 'CONSOLE'
    HTTPS_SERVER = 'HTTPS_SERVER'
    REST = 'REST'
    WEB_UI = 'WEB_UI'
    DEFAULT = 'DEFAULT'


class AccessType2(Enum):
    LOGIN = 'LOGIN'
    ENABLE = 'ENABLE'
    CLIENT = 'CLIENT'


class Instance4(Enum):
    LOCAL = 'LOCAL'
    PEAP_MSCHAPV2 = 'PEAP_MSCHAPV2'
    PUBKEY = 'PUBKEY'
    CERTIFICATE = 'CERTIFICATE'
    NONE = 'NONE'
    AUTHORIZED = 'AUTHORIZED'
    RADIUS = 'RADIUS'
    TACACS = 'TACACS'


class Instance5(RootModel[str]):
    model_config = ConfigDict(use_enum_values=True)
    root: Annotated[str, Field(description='Name of server group.\n- For CX, the instance shall be a server group or local authentication.', max_length=80, min_length=1)]


class AuthInstance(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    seq_id: Annotated[Optional[int], Field(alias=AliasChoices('seq-id', 'seq_id'), serialization_alias='seq-id', description='The sequence id determines the authentication method order.', ge=0, le=255)] = None
    auth_method: Annotated[Instance4, Field(alias=AliasChoices('auth-method', 'auth_method'), serialization_alias='auth-method', description='Authentication method.')]
    mgmt_server_group: Annotated[Optional[str], Field(serialization_alias='mgmt-server-group', description='Management server group.', max_length=80, min_length=1)] = None


class SecondaryAuth(Enum):
    NONE = 'NONE'
    LOCAL = 'LOCAL'
    AUTHORIZED = 'AUTHORIZED'


class AccessGroupItem(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    access_type: Annotated[Optional[AccessType2], Field(serialization_alias='access-type', description='Authentication access type')] = None
    instance: Annotated[Optional[List[Union[Instance4, Instance5]]], Field(max_length=2147483647)] = None
    auth_instances: Annotated[Optional[List[AuthInstance]], Field(serialization_alias='auth-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local authentication.\n- For AP, the instance shall be a server group.', max_length=2147483647)] = None
    secondary_auth: Annotated[Optional[SecondaryAuth], Field(serialization_alias='secondary-auth', description='Secondary Auth method.')] = None
    primary_mgmt_auth_server: Annotated[Optional[str], Field(serialization_alias='primary-mgmt-auth-server', description='Primary server for management authentication', max_length=63, min_length=1)] = None
    backup_mgmt_auth_server: Annotated[Optional[str], Field(serialization_alias='backup-mgmt-auth-server', description='Backup server for management authentication', max_length=63, min_length=1)] = None


class AuthenticationGroupItem(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    session: Annotated[Optional[SessionType], Field(description='Management user session type')] = None
    access_group: Annotated[Optional[List[AccessGroupItem]], Field(serialization_alias='access-group', description='Management authenticaiton access type', max_length=2147483647)] = None


class DefaultRole(Enum):
    ROOT = 'ROOT'
    GUEST_PROVISIONING = 'GUEST_PROVISIONING'
    NETWORK_OPERATIONS = 'NETWORK_OPERATIONS'
    READ_ONLY = 'READ_ONLY'
    LOCATION_API_MGMT = 'LOCATION_API_MGMT'
    NBAPI_MGMT = 'NBAPI_MGMT'
    AP_PROVISIONING = 'AP_PROVISIONING'
    STANDARD = 'STANDARD'
    LOCAL = 'LOCAL'


class FailToLocal(Enum):
    ALL_FAIL = 'ALL_FAIL'
    TIMEOUT_FAIL = 'TIMEOUT_FAIL'


class Instance7(Instance5):
    pass


class AuthInstance1(AuthInstance):
    pass


class LocalManagementprofileauthenticationauthenticationGroupSchema(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    session: Annotated[Optional[SessionType], Field(description='Management user session type')] = None
    access_group: Annotated[Optional[List[AccessGroupItem]], Field(serialization_alias='access-group', description='Management authenticaiton access type', max_length=2147483647)] = None


class Instance9(Instance5):
    pass


class LocalManagementprofileauthenticationauthenticationGroupaccessGroupauthInstancesSchema(AuthInstance):
    pass


class AccessType5(Enum):
    SSH = 'SSH'
    TELNET = 'TELNET'
    CONSOLE = 'CONSOLE'
    DEFAULT = 'DEFAULT'
    COMMANDS = 'COMMANDS'
    REST_URI = 'REST_URI'


class Instance10(Enum):
    NONE = 'NONE'
    LOCAL = 'LOCAL'
    AUTO = 'AUTO'
    RADIUS = 'RADIUS'
    TACACS = 'TACACS'


class Instance11(Instance1):
    pass


class AuthzInstance(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    seq_id: Annotated[Optional[int], Field(serialization_alias='seq-id', description='The sequence id determines the authorization method order.', ge=0, le=255)] = None
    authorization_method: Annotated[Instance10, Field(serialization_alias='authorization-method', description='Authorization method.')]
    mgmt_server_group: Annotated[Optional[str], Field(serialization_alias='mgmt-server-group', description='Management server group.', max_length=80, min_length=1)] = None


class AuthorizationGroupItem(BaseModel):
    access_type: Annotated[Optional[AccessType5], Field(serialization_alias='access-type', description='Authorization access type.')] = None
    instance: Annotated[Optional[List[Union[Instance10, Instance11]]], Field(max_length=2147483647)] = None
    authz_instances: Annotated[Optional[List[AuthzInstance]], Field(serialization_alias='authz-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local authorization.', max_length=2147483647)] = None


class AccessType6(Enum):
    SSH = 'SSH'
    HTTPS_SERVER = 'HTTPS_SERVER'


class InstanceItem(RootModel[str]):
    model_config = ConfigDict(use_enum_values=True)
    root: Annotated[str, Field(description='Name of server group.', max_length=80, min_length=1)]


class Radiu(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    access_type: Annotated[Optional[AccessType6], Field(serialization_alias='access-type', description='Authorize only access type.')] = None
    instance: Annotated[Optional[List[InstanceItem]], Field(max_length=2147483647)] = None


class AccessLevel(Enum):
    ALL = 'ALL'
    MANAGER = 'MANAGER'


class AuthorizationSchema(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    authorization_group: Annotated[Optional[List[AuthorizationGroupItem]], Field(serialization_alias='authorization-group', description='Specifies the list of server groups and the order in which they will be applied for authorization of management sessions.', max_length=2147483647)] = None
    radius: Annotated[Optional[List[Radiu]], Field(description='Specifies the list of Radius server groups and the order in which they will be applied for authorization of secure mangement sessions(SSH and REST only).', max_length=2147483647)] = None
    failthrough: Annotated[Optional[bool], Field(description='Enable authorization fail-through. This determines whether to access the next remote AAA server in case of failure with the current server, the authorization will be attempted with the next configured server.\nIf true, the next server in line will be accessed.\nIf false, authorization will not be attempted with the next server.')] = None
    access_level: Annotated[Optional[AccessLevel], Field(serialization_alias='access-level', description='Access levels for command authroization.')] = None


class Instance13(Instance1):
    pass


class AuthzInstance1(AuthzInstance):
    pass


class LocalManagementprofileauthorizationauthorizationGroupSchema(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    access_type: Annotated[Optional[AccessType5], Field(serialization_alias='access-type', description='Authorization access type.')] = None
    instance: Annotated[Optional[List[Union[Instance10, Instance13]]], Field(max_length=2147483647)] = None
    authz_instances: Annotated[Optional[List[AuthzInstance1]], Field(serialization_alias='authz-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local authorization.', max_length=2147483647)] = None


class LocalManagementprofileauthorizationauthorizationGroupauthzInstancesSchema(AuthzInstance):
    pass


class LocalManagementprofileauthorizationradiusSchema(Radiu):
    pass


class CipherSuiteEnum(Enum):
    AES128_SHA = 'AES128_SHA'
    AES128_SHA256 = 'AES128_SHA256'
    AES256_SHA = 'AES256_SHA'
    AES256_SHA256 = 'AES256_SHA256'
    ALL = 'ALL'
    DEFAULT = 'DEFAULT'
    ECDHE_ECDSA_AES128_GCM_SHA256 = 'ECDHE_ECDSA_AES128_GCM_SHA256'
    ECDHE_ECDSA_AES128_SHA = 'ECDHE_ECDSA_AES128_SHA'
    ECDHE_ECDSA_AES128_SHA256 = 'ECDHE_ECDSA_AES128_SHA256'
    ECDHE_ECDSA_AES256_GCM_SHA384 = 'ECDHE_ECDSA_AES256_GCM_SHA384'
    ECDHE_ECDSA_AES256_SHA = 'ECDHE_ECDSA_AES256_SHA'
    ECDHE_ECDSA_AES256_SHA384 = 'ECDHE_ECDSA_AES256_SHA384'
    ECDHE_RSA_AES128_GCM_SHA256 = 'ECDHE_RSA_AES128_GCM_SHA256'
    ECDHE_RSA_AES128_SHA = 'ECDHE_RSA_AES128_SHA'
    ECDHE_RSA_AES256_GCM_SHA384 = 'ECDHE_RSA_AES256_GCM_SHA384'
    ECDHE_RSA_AES256_SHA = 'ECDHE_RSA_AES256_SHA'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'


class MgmtAuthEnum(Enum):
    CERTIFICATE = 'CERTIFICATE'
    USERNAME_PASSWORD = 'USERNAME_PASSWORD'


class CertificateAuthorization(Enum):
    RADIUS = 'RADIUS'


class CertificateAuthUsername(Enum):
    COMMON_NAME = 'COMMON_NAME'
    USER_PRINCIPAL_NAME = 'USER_PRINCIPAL_NAME'


class SslProtocolEnum(Enum):
    TLSV1 = 'TLSV1'
    TLSV1_1 = 'TLSV1_1'
    TLSV1_2 = 'TLSV1_2'
    ALL = 'ALL'


class ManagementStyle(Enum):
    TRADITIONAL = 'TRADITIONAL'
    IMPROVED = 'IMPROVED'


class EnabledVrf(RootModel[str]):
    root: Annotated[str, Field(description='VRFs where the webserver is enabled to be accessed. This configuration is AOSCX specific', max_length=9999)]


class AccessMode(Enum):
    READ_ONLY = 'READ_ONLY'
    READ_WRITE = 'READ_WRITE'


class WebserversSchema(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable web user interface access to the system')] = None
    absolute_session_timeout: Annotated[Optional[int], Field(serialization_alias='absolute-session-timeout', description="User's absolute WebUI session timeout <30-3600> (seconds). A value of 0 means no timeout.", ge=0, le=65535)] = '0'
    bypass_cp_landing_page: Annotated[Optional[bool], Field(serialization_alias='bypass-cp-landing-page', description='Enable bypass captive portal landing page')] = None
    captive_portal_cert: Annotated[Optional[str], Field(serialization_alias='captive-portal-cert', description='Configure Server Certificate for Captive Portal', max_length=65, min_length=1)] = None
    cipher_suite: Annotated[Optional[List[CipherSuiteEnum]], Field(serialization_alias='cipher-suite', max_length=2147483647)] = None
    exclude_http_security_headers: Annotated[Optional[bool], Field(serialization_alias='exclude-http-security-headers', description='Exclude security headers from HTTP response')] = None
    idp_cert: Annotated[Optional[str], Field(serialization_alias='idp-cert', description='Configure Server Certificate for IDP', max_length=65, min_length=1)] = None
    mgmt_auth: Annotated[Optional[List[MgmtAuthEnum]], Field(serialization_alias='mgmt-auth', max_length=2147483647)] = None
    certificate_authorization: Annotated[Optional[CertificateAuthorization], Field(serialization_alias='certificate-authorization', description="Authorization source for client-role assignment. Only valid when 'mgm-auth' value is set to 'CERTIFICATE'. This configuration is AOSCX specific")] = 'RADIUS'
    certificate_auth_username: Annotated[Optional[CertificateAuthUsername], Field(serialization_alias='certificate-auth-username', description="Certificate field used to read the username when authenticating an user. Only valid when 'mgm-auth' value is set to 'CERTIFICATE'. This configuration is AOSCX specific")] = 'USER_PRINCIPAL_NAME'
    session_timeout: Annotated[Optional[int], Field(serialization_alias='session-timeout', description="Configure Webserver user's session timeout for inactivity.", ge=0, le=65535)] = '900'
    ssl_protocol: Annotated[Optional[List[SslProtocolEnum]], Field(serialization_alias='ssl-protocol', max_length=2147483647)] = None
    switch_cert: Annotated[Optional[str], Field(serialization_alias='switch-cert', description='Configure Server Certificate for Management WebUI', max_length=65, min_length=1)] = None
    via_client_cert_port: Annotated[Optional[int], Field(serialization_alias='via-client-cert-port', description='Configure Port number used for VIA client-cert based profile download. Valid range is <1025-65535>. Default value is 8085', ge=1025, le=65535)] = '8085'
    https_port_443: Annotated[Optional[bool], Field(serialization_alias='https-port-443', description='Enable WebUI access on HTTPS port (443)')] = None
    max_clients: Annotated[Optional[int], Field(serialization_alias='max-clients', description="Configure Web servers' maximum supported concurrent clients <25-320>", ge=25, le=320)] = None
    max_sessions_per_client: Annotated[Optional[int], Field(serialization_alias='max-sessions-per-client', description="Web servers' maximum supported concurrent sessions per client. Range: 1-8. This configuration is AOSCX specific", ge=1, le=8)] = '6'
    management_style: Annotated[Optional[ManagementStyle], Field(serialization_alias='management-style', description='Web management user interface style. Default is IMPROVED')] = 'IMPROVED'
    listen_port: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='listen-port', description='Port type(s) used for web management. Default is BOTH')] = 'BOTH'
    ssl_port: Annotated[Optional[int], Field(serialization_alias='ssl-port', description='The TCP port for HTTPS', ge=0, le=65535)] = '443'
    management_url: Annotated[Optional[str], Field(serialization_alias='management-url', description='URL for the web interface help page', max_length=256, min_length=1)] = 'http://h17007.www1.hpe.com/device_help'
    support_url: Annotated[Optional[str], Field(serialization_alias='support-url', description='URL for the web interface support page', max_length=256, min_length=1)] = 'https://www.hpe.com/us/en/networking.html'
    idle_timeout: Annotated[Optional[int], Field(serialization_alias='idle-timeout', description='Web management session timeout in seconds.', ge=120, le=7200)] = None
    enabled_vrfs: Annotated[Optional[List[EnabledVrf]], Field(serialization_alias='enabled-vrfs', max_length=2147483647)] = None
    access_mode: Annotated[Optional[AccessMode], Field(serialization_alias='access-mode', description="Web servers' REST API data management configuration. This configuration applies to all users, regardless of their authorization role. Range: read-only, read-write. This configuration is AOSCX specific")] = 'READ_WRITE'


class TwoFactorAuthentication(Enum):
    PASSWORD = 'PASSWORD'
    RADIUS = 'RADIUS'


class EnabledVrf1(RootModel[str]):
    root: Annotated[str, Field(description='VRFs where SSH server is enabled.', max_length=9999)]


class Algorithm(Enum):
    AES128_CBC = 'AES128_CBC'
    AES192_CBC = 'AES192_CBC'
    AES256_CBC = 'AES256_CBC'
    AES128_CTR = 'AES128_CTR'
    AES192_CTR = 'AES192_CTR'
    AES256_CTR = 'AES256_CTR'
    AES128_GCM_OPENSSH_COM = 'AES128_GCM_OPENSSH_COM'
    AES256_GCM_OPENSSH_COM = 'AES256_GCM_OPENSSH_COM'
    CHACHA20_POLY1305_OPENSSH_COM = 'CHACHA20_POLY1305_OPENSSH_COM'
    RIJNDAEL_CBC_LYSTOR_LIU_SE = 'RIJNDAEL_CBC_LYSTOR_LIU_SE'
    field_3DES_CBC = '3DES_CBC'


class Cipher(BaseModel):
    priority: Annotated[Optional[int], Field(description='Priority of the SSH cipher.\nFor CX device: valid range: 1-9.', ge=1, le=11)] = None
    algorithm: Annotated[Optional[Algorithm], Field(description='SSH cipher type.\nFor CX device: rijndael-cbc@lystor.liu.se and 3des-cbc cipher types are not supported.')] = None


class Algorithm1(Enum):
    ECDSA_SHA2_NISTP256 = 'ECDSA_SHA2_NISTP256'
    ECDSA_SHA2_NISTP384 = 'ECDSA_SHA2_NISTP384'
    ECDSA_SHA2_NISTP521 = 'ECDSA_SHA2_NISTP521'
    RSA_SHA2_256 = 'RSA_SHA2_256'
    RSA_SHA2_512 = 'RSA_SHA2_512'
    SSH_ED25519 = 'SSH_ED25519'
    SSH_RSA = 'SSH_RSA'
    X509V3_SSH_RSA = 'X509V3_SSH_RSA'
    X509V3_SIGN_RSA = 'X509V3_SIGN_RSA'
    X509V3_SIGN_RSA2 = 'X509V3_SIGN_RSA2'
    SSH_DSS = 'SSH_DSS'


class HostKeyAlgorithm(BaseModel):
    priority: Annotated[Optional[int], Field(description='Priority of the SSH host key algorithm.\nFor CX device: valid range: 1-7.', ge=1, le=10)] = None
    algorithm: Annotated[Optional[Algorithm1], Field(description='SSH host key algorithm.\nFor CX device: x509v3-ssh-rsa,  x509v3-sign-rsa,  x509v3-sign-rsa2, and ssh-dss\nhost-key algorithm types are not supported.')] = None


class Algorithm2(Enum):
    CURVE25519_SHA256 = 'CURVE25519_SHA256'
    CURVE25519_SHA256_LIBSSH_ORG = 'CURVE25519_SHA256_LIBSSH_ORG'
    DIFFIE_HELLMAN_GROUP_EXCHANGE_SHA1 = 'DIFFIE_HELLMAN_GROUP_EXCHANGE_SHA1'
    DIFFIE_HELLMAN_GROUP_EXCHANGE_SHA256 = 'DIFFIE_HELLMAN_GROUP_EXCHANGE_SHA256'
    DIFFIE_HELLMAN_GROUP14_SHA1 = 'DIFFIE_HELLMAN_GROUP14_SHA1'
    DIFFIE_HELLMAN_GROUP14_SHA256 = 'DIFFIE_HELLMAN_GROUP14_SHA256'
    DIFFIE_HELLMAN_GROUP16_SHA512 = 'DIFFIE_HELLMAN_GROUP16_SHA512'
    DIFFIE_HELLMAN_GROUP18_SHA512 = 'DIFFIE_HELLMAN_GROUP18_SHA512'
    ECDH_SHA2_NISTP256 = 'ECDH_SHA2_NISTP256'
    ECDH_SHA2_NISTP384 = 'ECDH_SHA2_NISTP384'
    ECDH_SHA2_NISTP521 = 'ECDH_SHA2_NISTP521'


class KexAlgorithm(BaseModel):
    priority: Annotated[Optional[int], Field(description='Priority of the SSH key exchange algorithm.', ge=1, le=11)] = None
    algorithm: Annotated[Optional[Algorithm2], Field(description='SSH key exchange algorithm.')] = None


class Algorithm3(Enum):
    HMAC_SHA1 = 'HMAC_SHA1'
    HMAC_SHA1_96 = 'HMAC_SHA1_96'
    HMAC_SHA1_ETM_OPENSSH_COM = 'HMAC_SHA1_ETM_OPENSSH_COM'
    HMAC_SHA2_256 = 'HMAC_SHA2_256'
    HMAC_SHA2_512 = 'HMAC_SHA2_512'
    HMAC_SHA2_256_ETM_OPENSSH_COM = 'HMAC_SHA2_256_ETM_OPENSSH_COM'
    HMAC_SHA2_512_ETM_OPENSSH_COM = 'HMAC_SHA2_512_ETM_OPENSSH_COM'
    HMAC_MD5 = 'HMAC_MD5'
    HMAC_MD5_96 = 'HMAC_MD5_96'


class Mac(BaseModel):
    priority: Annotated[Optional[int], Field(description='Priority of the SSH MAC.\nFor CX device: valid range: 1-7.', ge=1, le=8)] = None
    algorithm: Annotated[Optional[Algorithm3], Field(description='SSH MAC alogorithm.\nFor CX device: hmac-md5 and hmac-md5-96 mac algorithms are not supported.')] = None


class Algorithm4(Enum):
    ECDSA_SHA2_NISTP256 = 'ECDSA_SHA2_NISTP256'
    ECDSA_SHA2_NISTP384 = 'ECDSA_SHA2_NISTP384'
    ECDSA_SHA2_NISTP521 = 'ECDSA_SHA2_NISTP521'
    SSH_ED25519 = 'SSH_ED25519'
    SSH_RSA = 'SSH_RSA'
    RSA_SHA2_256 = 'RSA_SHA2_256'
    RSA_SHA2_512 = 'RSA_SHA2_512'
    X509V3_ECDSA_SHA2_NISTP256 = 'X509V3_ECDSA_SHA2_NISTP256'
    X509V3_ECDSA_SHA2_NISTP384 = 'X509V3_ECDSA_SHA2_NISTP384'
    X509V3_ECDSA_SHA2_NISTP521 = 'X509V3_ECDSA_SHA2_NISTP521'
    X509V3_RSA2048_SHA256 = 'X509V3_RSA2048_SHA256'
    X509V3_SIGN_RSA = 'X509V3_SIGN_RSA'
    X509V3_SSH_RSA = 'X509V3_SSH_RSA'


class PubkeyAlgorithm(BaseModel):
    priority: Annotated[Optional[int], Field(description='Priority of the SSH public key algorithm.', ge=1, le=13)] = None
    algorithm: Annotated[Optional[Algorithm4], Field(description='SSH public key algorithm.')] = None


class Ipv4AllowList(RootModel[str]):
    root: Annotated[str, Field(description='List of ipv4 hosts that are allowed to connect to the server.', max_length=9999)]


class Ipv6AllowList(RootModel[str]):
    root: Annotated[str, Field(description='List of ipv6 hosts that are allowed to connect to the server.', max_length=9999)]


class AllowList(BaseModel):
    ipv4_allow_list: Annotated[Optional[List[Ipv4AllowList]], Field(serialization_alias='ipv4-allow-list', max_length=2147483647)] = None
    ipv6_allow_list: Annotated[Optional[List[Ipv6AllowList]], Field(serialization_alias='ipv6-allow-list', max_length=2147483647)] = None
    allow_list_enable: Annotated[Optional[bool], Field(serialization_alias='allow-list-enable', description='Enable the SSH allow list.')] = None


class SshServerGlobalConfigsSchema(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable SSH Authentication.')] = None
    password_authentication: Annotated[Optional[bool], Field(serialization_alias='password-authentication', description='Enable SSH password authentication.')] = None
    pubkey_authentication: Annotated[Optional[bool], Field(serialization_alias='pubkey-authentication', description='Enable SSH public key authentication.')] = None
    two_factor_authentication: Annotated[Optional[TwoFactorAuthentication], Field(serialization_alias='two-factor-authentication', description='Require a certificate and a password for authentication.')] = None
    certificate_as_authorized_key: Annotated[Optional[bool], Field(serialization_alias='certificate-as-authorized-key', description='Check authenticating certificate for login username instead of local authorized-keys.')] = None
    enabled_vrfs: Annotated[Optional[List[EnabledVrf1]], Field(serialization_alias='enabled-vrfs', max_length=2147483647)] = None
    ciphers: Annotated[Optional[List[Cipher]], Field(description='SSH ciphers.', max_length=2147483647)] = None
    host_key_algorithms: Annotated[Optional[List[HostKeyAlgorithm]], Field(serialization_alias='host-key-algorithms', description='SSH host key algorithms.', max_length=2147483647)] = None
    kex_algorithms: Annotated[Optional[List[KexAlgorithm]], Field(serialization_alias='kex-algorithms', description='SSH key exchange algorithms.', max_length=2147483647)] = None
    macs: Annotated[Optional[List[Mac]], Field(description='SSH MACs.', max_length=2147483647)] = None
    pubkey_algorithms: Annotated[Optional[List[PubkeyAlgorithm]], Field(serialization_alias='pubkey-algorithms', description='SSH public key algorithms.', max_length=2147483647)] = None
    allow_list: Annotated[Optional[AllowList], Field(serialization_alias='allow-list', description='SSH host allow list configuration.\nFor CX device, maximum of 20 entries in allow-list is supported.')] = None
    server_port: Annotated[Optional[int], Field(serialization_alias='server-port', description='TCP port where the SSH server will listen on.', ge=1, le=65535)] = '22'
    timeout: Annotated[Optional[int], Field(description='Number of seconds before the authentication times out.', ge=1, le=600)] = None
    max_auth_attempts: Annotated[Optional[int], Field(serialization_alias='max-auth-attempts', description='Maximum number of retries during the SSH login.', ge=1, le=10)] = '6'
    rekey_time: Annotated[Optional[int], Field(serialization_alias='rekey-time', description='Time in minutes before an SSH rekey is initiated.', ge=10, le=60)] = '10'
    rekey_volume: Annotated[Optional[int], Field(serialization_alias='rekey-volume', description='Amount of traffic in KB before an SSH rekey is initiated.', ge=100, le=1048576)] = '1048576'
    listen_interface: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='listen-interface', description='The type of interface that the SSH server is available.')] = 'BOTH'
    file_transfer: Annotated[Optional[bool], Field(serialization_alias='file-transfer', description='Enable the SSH file transfer server.')] = None


class LocalManagementprofilesshServerGlobalConfigsciphersSchema(Cipher):
    pass


class LocalManagementprofilesshServerGlobalConfigshostKeyAlgorithmsSchema(HostKeyAlgorithm):
    pass


class LocalManagementprofilesshServerGlobalConfigskexAlgorithmsSchema(KexAlgorithm):
    pass


class LocalManagementprofilesshServerGlobalConfigsmacsSchema(Mac):
    pass


class LocalManagementprofilesshServerGlobalConfigspubkeyAlgorithmsSchema(PubkeyAlgorithm):
    pass


class AllowListSchema(AllowList):
    pass


class ConsoleSchema(Console):
    pass


class HashMgmtPasswordSchema(HashMgmtPassword):
    pass


class ManagedModeProfileSchema(ManagedModeProfile):
    pass


class UserLockoutItem2(UserLockoutItem):
    pass


class LoginSchema(BaseModel):
    user_lockout: Annotated[Optional[List[UserLockoutItem2]], Field(serialization_alias='user-lockout', description='User lockout configuration for management interfaces.', max_length=2147483647)] = None


class LocalManagementprofileloginuserLockoutSchema(UserLockoutItem):
    pass


class PasswordComplexitySchema(PasswordComplexity):
    pass


class TelnetServerSchema(TelnetServer):
    pass


class TftpServerSchema(TftpServer):
    pass


class TftpClientSchema(TftpClient):
    pass


class BannerMessageSchema(BannerMessage):
    pass


class BannerExecSchema(BannerExec):
    pass


class NaeSchema(Nae):
    pass


class Successful200(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['200'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Success code.', examples=['SUCC_001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of successful response.\n', examples=['Success.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error400(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['400'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_AP001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Bad request. Invalid values supplied in request.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error401(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['401'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_R001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Unauthorized. Failed in RBAC Authorization.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error403(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['403'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_CN001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Forbidden. Capability Rule fail.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error404(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['404'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_CN003'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Not found. Yang / Corresponding Rule is missing.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error406(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['406'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_AP003'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Not Acceptable. Invalid data format.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error408(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['408'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_K001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Request Timeout.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error412(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['412'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_LY002'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Precondition Failed.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Error500(BaseModel):
    httpStatusCode: Annotated[int, Field(description='HTTP response status codes.', examples=['500'], ge=0, le=599)]
    errorCode: Annotated[str, Field(description='Error code.', examples=['ERR_C001'], max_length=64, min_length=1)]
    message: Annotated[str, Field(description='Description of error.\n', examples=['Internal server error. Invalid scope.'], max_length=512)]
    debugId: Annotated[str, Field(description='Debug ID.', examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'], max_length=64, min_length=1)]


class Console2(Console):
    pass


class ManagedModeProfile2(ManagedModeProfile):
    pass


class UserLockoutItem3(UserLockoutItem):
    pass


class Login2(BaseModel):
    user_lockout: Annotated[Optional[List[UserLockoutItem3]], Field(serialization_alias='user-lockout', description='User lockout configuration for management interfaces.', max_length=2147483647)] = None


class TelnetServer2(TelnetServer):
    pass


class TftpServer2(TftpServer):
    pass


class ArubaVrfAccessListPolicies(BaseModel):
    access_list: Annotated[Optional[str], Field(serialization_alias='access-list', description='ACL Policy for traffic applied to a Control Plane VRF.', max_length=144, min_length=1)] = None


class MultipathHashIpv4(Enum):
    SRC_HASH = 'SRC_HASH'
    SRC_GRP_HASH = 'SRC_GRP_HASH'


class EvpnImportRouteTarget(RootModel[str]):
    root: Annotated[str, Field(description='EVPN VRF Import Route Targets.', max_length=9999)]


class EvpnExportRouteTarget(RootModel[str]):
    root: Annotated[str, Field(description='EVPN VRF Export Route Targets.', max_length=9999)]


class AddressFamily(Enum):
    IPV4_UNICAST = 'IPV4_UNICAST'
    IPV6_UNICAST = 'IPV6_UNICAST'
    VPNV4 = 'VPNV4'


class ImportRouteTarget(RootModel[str]):
    root: Annotated[str, Field(description='VRF Import Route Targets.', max_length=9999)]


class ExportRouteTarget(RootModel[str]):
    root: Annotated[str, Field(description='VRF Export Route Targets.', max_length=9999)]


class AfiSafiConfig(BaseModel):
    address_family: Annotated[Optional[AddressFamily], Field(serialization_alias='address-family', description='Address Family')] = None
    import_route_targets: Annotated[Optional[List[ImportRouteTarget]], Field(serialization_alias='import-route-targets', max_length=2147483647)] = None
    export_route_targets: Annotated[Optional[List[ExportRouteTarget]], Field(serialization_alias='export-route-targets', max_length=2147483647)] = None
    export_route_map: Annotated[Optional[str], Field(serialization_alias='export-route-map', description='Route-map to applied while exporting the routes from the VRF.', max_length=9999)] = None


class L3RouteVrf(BaseModel):
    recursive_lookup_ipv4: Annotated[Optional[bool], Field(serialization_alias='recursive-lookup-ipv4', description='Configure route recursive lookup using default route for IPV4.')] = None
    recursive_lookup_ipv6: Annotated[Optional[bool], Field(serialization_alias='recursive-lookup-ipv6', description='Configure route recursive lookup using default route for IPV6.')] = None


class ArubaL3RouteL3RouteVrfCfg(BaseModel):
    l3_route_vrf: Annotated[Optional[L3RouteVrf], Field(serialization_alias='l3-route-vrf', description='L3 route for VRF context')] = None


class ProfileItem2(BaseModel):
    name: Annotated[Optional[str], Field(description='L3 route profile name', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='L3 route profile description.', max_length=256, min_length=1)] = None
    route_redistribute: Annotated[Optional[bool], Field(serialization_alias='route-redistribute', description='Enable active routes. Only filter while redistributing routes\ninto target protocol.')] = None
    graceful_restart: Annotated[Optional[bool], Field(serialization_alias='graceful-restart', description='Graceful restart enable')] = None


class L3Route(BaseModel):
    profile: Annotated[Optional[List[ProfileItem2]], Field(description='L3 route profiles.', max_length=2147483647)] = None


class ArubaL3RouteL3RouteTop(BaseModel):
    l3_route: Annotated[Optional[L3Route], Field(serialization_alias='l3-route', description='L3 route')] = None


class Type(Enum):
    CONDITION_DEFAULT = 'CONDITION_DEFAULT'
    CONDITION_NAMED = 'CONDITION_NAMED'


class RuleType(Enum):
    RULE_ANY = 'RULE_ANY'
    RULE_ETHERNET = 'RULE_ETHERNET'
    RULE_TCP = 'RULE_TCP'
    RULE_UDP = 'RULE_UDP'
    RULE_WEB_CATEGORY = 'RULE_WEB_CATEGORY'
    RULE_WEB_REPUTATION = 'RULE_WEB_REPUTATION'
    RULE_APP_CATEGORY = 'RULE_APP_CATEGORY'
    RULE_WEB_CAT_REP = 'RULE_WEB_CAT_REP'
    RULE_APPLICATION = 'RULE_APPLICATION'
    RULE_NET_SERVICE = 'RULE_NET_SERVICE'
    RULE_ACL_IP = 'RULE_ACL_IP'
    RULE_ACL_IPV6 = 'RULE_ACL_IPV6'
    RULE_ACL_MAC = 'RULE_ACL_MAC'
    RULE_PROTOCOL = 'RULE_PROTOCOL'
    RULE_APPTAG = 'RULE_APPTAG'


class ArubaPolicyNamedConditionGroup(RootModel[Any]):
    root: Annotated[Any, Field(description='Named Condition grouping.')]


class Type1(Enum):
    ACTION_ALLOW = 'ACTION_ALLOW'
    ACTION_DENY = 'ACTION_DENY'
    ACTION_SOURCE_NAT = 'ACTION_SOURCE_NAT'
    ACTION_DESTINATION_NAT = 'ACTION_DESTINATION_NAT'
    ACTION_SOURCE_ROUTE_NAT = 'ACTION_SOURCE_ROUTE_NAT'
    ACTION_DESTINATION_ROUTE_NAT = 'ACTION_DESTINATION_ROUTE_NAT'
    ACTION_REDIRECT = 'ACTION_REDIRECT'
    ACTION_FORWARD_IPSEC_MAP = 'ACTION_FORWARD_IPSEC_MAP'
    ACTION_FORWARD_IPSEC_VPNC = 'ACTION_FORWARD_IPSEC_VPNC'
    ACTION_FORWARD_NEXT_HOP = 'ACTION_FORWARD_NEXT_HOP'
    ACTION_PACKET_MARKING = 'ACTION_PACKET_MARKING'
    ACTION_TRAFFIC_POLICING = 'ACTION_TRAFFIC_POLICING'
    ACTION_QOS = 'ACTION_QOS'
    ACTION_MIRROR = 'ACTION_MIRROR'
    ACTION_REFLECT = 'ACTION_REFLECT'
    ACTION_ROUTE = 'ACTION_ROUTE'


class LocalQueuePriority(RootModel[int]):
    root: Annotated[int, Field(description='Local queue priority value.', ge=0, le=7)]


class LocalQueuePriority1(Enum):
    NONE = 'NONE'
    HIGH = 'HIGH'
    LOW = 'LOW'


class AppendMirrorSessionItem(RootModel[int]):
    root: Annotated[int, Field(description='Mirroring action to session number.', ge=1, le=4)]


class SecondaryActions(BaseModel):
    local_queue_priority: Annotated[Optional[Union[LocalQueuePriority, LocalQueuePriority1]], Field(serialization_alias='local-queue-priority', description='Local queue priority value.')] = None
    dscp: Annotated[Optional[int], Field(description='Set Differentiated Services (diffserv) Code Point (DSCP).', ge=0, le=63)] = None
    ip_precedence: Annotated[Optional[int], Field(serialization_alias='ip-precedence', description='Set packet IP precedence value.', ge=0, le=7)] = None
    rate_limit: Annotated[Optional[int], Field(serialization_alias='rate-limit', description='Rate limit action.', ge=1, le=4294967295)] = None
    log: Annotated[Optional[bool], Field(description='Enable logging action.')] = None
    denylist: Annotated[Optional[bool], Field(description='Enable deny list action.')] = None
    mirror: Annotated[Optional[bool], Field(description='Enable mirror action.')] = None
    mirror_session: Annotated[Optional[int], Field(serialization_alias='mirror-session', description='Mirroring action to session number.', ge=1, le=4)] = None
    append_mirror_session: Annotated[Optional[List[AppendMirrorSessionItem]], Field(serialization_alias='append-mirror-session', max_length=2147483647)] = None
    count: Annotated[Optional[bool], Field(description='Enable packet counting action.')] = None
    disable_scanning: Annotated[Optional[bool], Field(serialization_alias='disable-scanning', description='Disable scanning action.')] = None
    vxlan_encap: Annotated[Optional[bool], Field(serialization_alias='vxlan-encap', description='VxLAN encapsulation action.')] = None
    dot1p_priority: Annotated[Optional[int], Field(serialization_alias='dot1p-priority', description='Layer 2 802.1Q Priority Code Point (PCP) value.', ge=0, le=7)] = None
    cos: Annotated[Optional[int], Field(description='Layer 2 802.1Q Class of Service (CoS) value.', ge=0, le=7)] = None
    throttle_downstream: Annotated[Optional[int], Field(serialization_alias='throttle-downstream', description='Downstream bandwidth limit.', ge=1, le=4294966)] = None
    throttle_upstream: Annotated[Optional[int], Field(serialization_alias='throttle-upstream', description='Upstream bandwidth limit.', ge=1, le=4294966)] = None


class Destination(Enum):
    REDIRECT_TUNNEL_GROUP = 'REDIRECT_TUNNEL_GROUP'
    REDIRECT_TUNNEL = 'REDIRECT_TUNNEL'
    REDIRECT_SLB = 'REDIRECT_SLB'
    REDIRECT_ESI = 'REDIRECT_ESI'
    REDIRECT_CAPTIVE_PORT = 'REDIRECT_CAPTIVE_PORT'


class EsiDirection(Enum):
    FORWARD = 'FORWARD'
    REVERSE = 'REVERSE'
    BOTH = 'BOTH'


class Redirect(BaseModel):
    destination: Annotated[Optional[Destination], Field(description='Redirection destination.')] = None
    tunnel_group: Annotated[Optional[str], Field(serialization_alias='tunnel-group', description='Tunnel group name.', max_length=20, min_length=1)] = None
    tunnel: Annotated[Optional[int], Field(description='Tunnel ID.', ge=1, le=16777215)] = None
    esi_group: Annotated[Optional[str], Field(serialization_alias='esi-group', description='ESI name.', max_length=256, min_length=1)] = None
    esi_direction: Annotated[Optional[EsiDirection], Field(serialization_alias='esi-direction', description='ESI direction.')] = None


class ArubaPolicyRedirectConfig(BaseModel):
    redirect: Annotated[Optional[Redirect], Field(description='Redirect configuration.')] = None


class IpAddress(RootModel[str]):
    root: Annotated[str, Field(description='IP address.', max_length=9999)]


class DestinationNat(BaseModel):
    ip_address: Annotated[Optional[IpAddress], Field(serialization_alias='ip-address', description='IP address.')] = None
    port: Annotated[Optional[int], Field(description='Port number.', ge=0, le=65535)] = None
    name: Annotated[Optional[str], Field(description='Name of network in fqdn format', max_length=64, min_length=1)] = None


class ArubaPolicyDestinationNatConfig(BaseModel):
    destination_nat: Annotated[Optional[DestinationNat], Field(serialization_alias='destination-nat', description='Destination NAT configuration.')] = None


class DestinationRouteNat(BaseModel):
    ip_address: Annotated[Optional[IpAddress], Field(serialization_alias='ip-address', description='IP address.')] = None
    port: Annotated[Optional[int], Field(description='Port number.', ge=0, le=65535)] = None
    name: Annotated[Optional[str], Field(description='Host name.', max_length=256, min_length=1)] = None


class ArubaPolicyDestinationRouteNatConfig(BaseModel):
    destination_route_nat: Annotated[Optional[DestinationRouteNat], Field(serialization_alias='destination-route-nat', description='Destination Route NAT configuration.')] = None


class SourceNat(BaseModel):
    pool: Annotated[Optional[str], Field(description='Pool name.', max_length=63, min_length=1)] = None
    vlan: Annotated[Optional[int], Field(description='VLAN ID.', ge=1, le=4094)] = None


class ArubaPolicySourceNatConfig(BaseModel):
    source_nat: Annotated[Optional[SourceNat], Field(serialization_alias='source-nat', description='Source NAT configuration.')] = None


class Route(ArubaPolicyDestinationNatConfig, ArubaPolicySourceNatConfig):
    pass


class ArubaPolicyRouteConfig(BaseModel):
    route: Annotated[Optional[Route], Field(description='Route Config.')] = None


class Aggregator(BaseModel):
    group_type: Annotated[Optional[str], Field(serialization_alias='group-type', description='The group-type can be src or dest.', max_length=9999)] = None
    aggregator_uuid: Annotated[Optional[str], Field(serialization_alias='aggregator-uuid', description='Unique Identifier.', max_length=9999)] = None


class ArubaPolicyRuleAggregator(BaseModel):
    aggregator: Annotated[Optional[Aggregator], Field(description='Aggregates the policy rules.')] = None


class Type2(Enum):
    POLICY_TYPE_SECURITY = 'POLICY_TYPE_SECURITY'
    POLICY_QOS = 'POLICY_QOS'
    POLICY_NETWORK_ACL = 'POLICY_NETWORK_ACL'
    POLICY_PBR = 'POLICY_PBR'
    POLICY_MIRROR = 'POLICY_MIRROR'


class Association(Enum):
    ASSOCIATION_ROLE = 'ASSOCIATION_ROLE'
    ASSOCIATION_INTERFACE = 'ASSOCIATION_INTERFACE'


class Type3(Enum):
    SECURITY_POLICY_TYPE_DEFAULT = 'SECURITY_POLICY_TYPE_DEFAULT'
    SECURITY_POLICY_TYPE_NETWORK_ENCAP = 'SECURITY_POLICY_TYPE_NETWORK_ENCAP'
    SECURITY_POLICY_TYPE_GROUP = 'SECURITY_POLICY_TYPE_GROUP'
    SECURITY_POLICY_TYPE_PA = 'SECURITY_POLICY_TYPE_PA'
    SECURITY_POLICY_TYPE_APP = 'SECURITY_POLICY_TYPE_APP'


class PacketMarking(BaseModel):
    dscp: Annotated[Optional[int], Field(description='Mark packet DSCP value.', ge=0, le=63)] = None
    ip_precedence: Annotated[Optional[int], Field(serialization_alias='ip-precedence', description='Mark packet IP precedence value.', ge=0, le=7)] = None


class ArubaPolicyPacketMarkingGroup(BaseModel):
    packet_marking: Annotated[Optional[PacketMarking], Field(serialization_alias='packet-marking', description='Packet-marking QoS policy.')] = None


class Type4(Enum):
    POLICING_SR_TCM = 'POLICING_SR_TCM'
    POLICING_TR_TCM = 'POLICING_TR_TCM'


class ExceedAction(Enum):
    ACTION_ALLOW = 'ACTION_ALLOW'
    ACTION_DROP = 'ACTION_DROP'
    ACTION_DSCP = 'ACTION_DSCP'


class Policing(BaseModel):
    type: Annotated[Optional[Type4], Field(description='Type of policing action.')] = None
    committed_info_rate: Annotated[Optional[int], Field(serialization_alias='committed-info-rate', description='Committed Information Rate (CIR).', ge=1, le=4294967295)] = None
    committed_burst_size: Annotated[Optional[int], Field(serialization_alias='committed-burst-size', description='Committed Burst Size (CBS).', ge=1, le=4294967295)] = None
    peak_info_rate: Annotated[Optional[int], Field(serialization_alias='peak-info-rate', description='Peak Information Rate (PIR).', ge=1, le=4294967295)] = None
    peak_burst_size: Annotated[Optional[int], Field(serialization_alias='peak-burst-size', description='Peak Burst Size (PBS).', ge=1, le=4294967295)] = None
    exceed_cir_dscp: Annotated[Optional[int], Field(serialization_alias='exceed-cir-dscp', description='Exceed CIR packet DSCP value. Used for two-rate TCM when CIR is exceeded', ge=0, le=63)] = None
    exceed_action: Annotated[Optional[ExceedAction], Field(serialization_alias='exceed-action', description='Exceed action. Used for single-rate TCM when CIR is excceded\nand two-rate TCM when PIR is exceeded')] = None
    exceed_pir_dscp: Annotated[Optional[int], Field(serialization_alias='exceed-pir-dscp', description='Exceed PIR packet DSCP value. Used for two-rate TCM when PIR is exceeded', ge=0, le=63)] = None


class ArubaPolicyPolicingActionGroup(BaseModel):
    policing: Annotated[Optional[Policing], Field(description='QoS traffic policing policy.')] = None


class WebCategory(Enum):
    ABUSED_DRUGS = 'ABUSED-DRUGS'
    ADULT_AND_PORNOGRAPHY = 'ADULT-AND-PORNOGRAPHY'
    ALCOHOL_AND_TOBACCO = 'ALCOHOL-AND-TOBACCO'
    AUCTIONS = 'AUCTIONS'
    BOT_NETS = 'BOT-NETS'
    BUSINESS_ECONOMY = 'BUSINESS-ECONOMY'
    CHEATING = 'CHEATING'
    COMPUTER_AND_INTERNET_INFO = 'COMPUTER-AND-INTERNET-INFO'
    COMPUTER_AND_INTERNET_SECURITY = 'COMPUTER-AND-INTERNET-SECURITY'
    CONTENT_DELIVERY_NETWORKS = 'CONTENT-DELIVERY-NETWORKS'
    CULT_AND_OCCULT = 'CULT-AND-OCCULT'
    DATING = 'DATING'
    DEAD_SITES = 'DEAD-SITES'
    DYNAMICALLY_GENERATED_CONTENT = 'DYNAMICALLY-GENERATED-CONTENT'
    EDUCATIONAL_INSTITUTIONS = 'EDUCATIONAL-INSTITUTIONS'
    ENTERTAINMENT_AND_ARTS = 'ENTERTAINMENT-AND-ARTS'
    FASHION_AND_BEAUTY = 'FASHION-AND-BEAUTY'
    FINANCIAL_SERVICES = 'FINANCIAL-SERVICES'
    GAMES = 'GAMES'
    GAMBLING = 'GAMBLING'
    GOVERNMENT = 'GOVERNMENT'
    GROSS = 'GROSS'
    HACKING = 'HACKING'
    HATE_AND_RACISM = 'HATE-AND-RACISM'
    HEALTH_AND_MEDICINE = 'HEALTH-AND-MEDICINE'
    HOME_AND_GARDEN = 'HOME-AND-GARDEN'
    HUNTING_AND_FISHING = 'HUNTING-AND-FISHING'
    ILLEGAL = 'ILLEGAL'
    IMAGE_AND_VIDEO_SEARCH = 'IMAGE-AND-VIDEO-SEARCH'
    INDV_STOCK_ADVICE_TOOLS = 'INDV-STOCK-ADVICE-TOOLS'
    INTERNET_COMMUNICATIONS = 'INTERNET-COMMUNICATIONS'
    INTERNET_PORTALS = 'INTERNET-PORTALS'
    JOB_SEARCH = 'JOB-SEARCH'
    KEYLOGGERS_AND_MONITORING = 'KEYLOGGERS-AND-MONITORING'
    KIDS = 'KIDS'
    LEGAL = 'LEGAL'
    LOCAL_INFO = 'LOCAL-INFO'
    MALWARE_SITES = 'MALWARE-SITES'
    MARIJUANA = 'MARIJUANA'
    MILITARY = 'MILITARY'
    MOTOR_VEHICLES = 'MOTOR-VEHICLES'
    MUSIC = 'MUSIC'
    NEWS_AND_MEDIA = 'NEWS-AND-MEDIA'
    NUDITY = 'NUDITY'
    ONLINE_GREETING_CARDS = 'ONLINE-GREETING-CARDS'
    PARKED_DOMAINS = 'PARKED-DOMAINS'
    PAY_TO_SURF = 'PAY-TO-SURF'
    PEER_TO_PEER = 'PEER-TO-PEER'
    PERSONAL_SITES_AND_BLOGS = 'PERSONAL-SITES-AND-BLOGS'
    PERSONAL_STORAGE = 'PERSONAL-STORAGE'
    PHILOSOPHY_AND_POLITICAL_ADVOCACY = 'PHILOSOPHY-AND-POLITICAL-ADVOCACY'
    PHISHING = 'PHISHING'
    PROXY_AVOIDANCE_AND_ANONYMIZERS = 'PROXY-AVOIDANCE-AND-ANONYMIZERS'
    PRIVATE_IP_ADDRESSES = 'PRIVATE-IP-ADDRESSES'
    QUESTIONABLE = 'QUESTIONABLE'
    REAL_ESTATE = 'REAL-ESTATE'
    RECREATION_AND_HOBBIES = 'RECREATION-AND-HOBBIES'
    REFERENCE_AND_RESEARCH = 'REFERENCE-AND-RESEARCH'
    RELIGION = 'RELIGION'
    SEARCH_ENGINES = 'SEARCH-ENGINES'
    SEX_EDUCATION = 'SEX-EDUCATION'
    SHAREWARE_AND_FREEWARE = 'SHAREWARE-AND-FREEWARE'
    SHOPPING = 'SHOPPING'
    SOCIAL_NETWORKING = 'SOCIAL-NETWORKING'
    SOCIETY = 'SOCIETY'
    SPAM_URLS = 'SPAM-URLS'
    SPORTS = 'SPORTS'
    SPYWARE_AND_ADWARE = 'SPYWARE-AND-ADWARE'
    STREAMING_MEDIA = 'STREAMING-MEDIA'
    SWIMSUITS_AND_INTIMATE_APPARELS = 'SWIMSUITS-AND-INTIMATE-APPARELS'
    TRAINING_TOOLS = 'TRAINING-TOOLS'
    TRANSLATION = 'TRANSLATION'
    TRAVEL = 'TRAVEL'
    UNCATEGORIZED = 'UNCATEGORIZED'
    VIOLENCE = 'VIOLENCE'
    WEAPONS = 'WEAPONS'
    WEB_ADVERTISEMENTS = 'WEB-ADVERTISEMENTS'
    WEB_BASED_EMAIL = 'WEB-BASED-EMAIL'
    WEB_HOSTING = 'WEB-HOSTING'
    ABORTION = 'ABORTION'
    FOOD_DINING = 'FOOD-DINING'
    SELF_HARM = 'SELF-HARM'
    DNS_OVER_HTTPS = 'DNS-OVER-HTTPS'
    LOW_THC_CANNABIS_PRODUCTS = 'LOW-THC-CANNABIS-PRODUCTS'
    GENERATIVE_AI = 'GENERATIVE-AI'


class WebReputation(Enum):
    TRUSTWORTHY = 'TRUSTWORTHY'
    LOW_RISK = 'LOW_RISK'
    MODERATE_RISK = 'MODERATE_RISK'
    SUSPICIOUS = 'SUSPICIOUS'
    HIGH_RISK = 'HIGH_RISK'


class AppCategory(Enum):
    ANTIVIRUS = 'ANTIVIRUS'
    AUTHENTICATION = 'AUTHENTICATION'
    BEHAVIORAL = 'BEHAVIORAL'
    CLOUD_FILE_STORAGE = 'CLOUD-FILE-STORAGE'
    COLLABORATION = 'COLLABORATION'
    CUSTOM = 'CUSTOM'
    ENCRYPTED = 'ENCRYPTED'
    ENTERPRISE_APPS = 'ENTERPRISE-APPS'
    GAMING = 'GAMING'
    IM_FILE_TRANSFER = 'IM-FILE-TRANSFER'
    INSTANT_MESSAGING = 'INSTANT-MESSAGING'
    MAIL_PROTOCOLS = 'MAIL-PROTOCOLS'
    MOBILE = 'MOBILE'
    MOBILE_APP_STORE = 'MOBILE-APP-STORE'
    NETWORK_SERVICE = 'NETWORK-SERVICE'
    PEER_TO_PEER = 'PEER-TO-PEER'
    SOCIAL_NETWORKING = 'SOCIAL-NETWORKING'
    STANDARD = 'STANDARD'
    STREAMING = 'STREAMING'
    THIN_CLIENT = 'THIN-CLIENT'
    TUNNELING = 'TUNNELING'
    UNIFIED_COMMUNICATIONS = 'UNIFIED-COMMUNICATIONS'
    WEB = 'WEB'
    WEBMAIL = 'WEBMAIL'


class Application(Enum):
    field_01net = '01net'
    field_050plus = '050plus'
    field_0zz0 = '0zz0'
    field_10050net = '10050net'
    field_10086cn = '10086cn'
    field_104com = '104com'
    field_1111tw = '1111tw'
    field_114la = '114la'
    field_115com = '115com'
    field_118114cn = '118114cn'
    field_11st = '11st'
    field_1337x = '1337x'
    field_139mail = '139mail'
    field_15min = '15min'
    field_163com = '163com'
    field_17173com = '17173com'
    field_17u = '17u'
    field_20min = '20min'
    field_24h = '24h'
    field_24ora = '24ora'
    field_24sata = '24sata'
    field_24ur = '24ur'
    field_2ch = '2ch'
    field_2shared = '2shared'
    field_3366_com = '3366-com'
    field_360cn = '360cn'
    field_3gpp_li = '3gpp-li'
    field_3pc = '3pc'
    field_4399com = '4399com'
    field_4chan = '4chan'
    field_4shared = '4shared'
    field_4tube = '4tube'
    field_51_com = '51-com'
    field_51_com_bbs = '51-com-bbs'
    field_51_com_music = '51-com-music'
    field_51_com_posting = '51-com-posting'
    field_51job = '51job'
    field_51la = '51la'
    field_56com = '56com'
    field_58com = '58com'
    field_591tw = '591tw'
    field_5pmweb = '5pmweb'
    field_6alabat = '6alabat'
    field_6play = '6play'
    field_7k7k = '7k7k'
    field_802_11 = '802-11'
    field_8021ad = '8021ad'
    field_8021q = '8021q'
    field_8tracks = '8tracks'
    field_91com = '91com'
    field_999_md = '999-md'
    field_99acres = '99acres'
    field_9gag = '9gag'
    field_9game = '9game'
    field_9p = '9p'
    a_dakar = 'a-dakar'
    aajtak = 'aajtak'
    aastocks = 'aastocks'
    abc = 'abc'
    abc_au = 'abc-au'
    abc_news = 'abc-news'
    abcnews = 'abcnews'
    abidjan = 'abidjan'
    abn_amro_bankieren = 'abn-amro-bankieren'
    abola = 'abola'
    abs_cbn = 'abs-cbn'
    abs_cbnnews = 'abs-cbnnews'
    abv = 'abv'
    ac_reunion = 'ac-reunion'
    acbar = 'acbar'
    accuweather = 'accuweather'
    aceproject = 'aceproject'
    acer = 'acer'
    acrobat = 'acrobat'
    acse = 'acse'
    activenet = 'activenet'
    activesync = 'activesync'
    actuniger = 'actuniger'
    adaderana = 'adaderana'
    adc = 'adc'
    adcash = 'adcash'
    adcolony = 'adcolony'
    addictinggames = 'addictinggames'
    addthis = 'addthis'
    adf = 'adf'
    adform = 'adform'
    adjara = 'adjara'
    adjaranet = 'adjaranet'
    adjust = 'adjust'
    adk2 = 'adk2'
    adnetworkperformance = 'adnetworkperformance'
    adnstream = 'adnstream'
    adobe = 'adobe'
    adobe_connect = 'adobe-connect'
    adobe_meeting_rc = 'adobe-meeting-rc'
    adobe_update = 'adobe-update'
    adp = 'adp'
    adplex_media = 'adplex-media'
    adrive = 'adrive'
    adsafeprotected = 'adsafeprotected'
    adserverplus = 'adserverplus'
    adtech = 'adtech'
    adtelligent = 'adtelligent'
    adultadworld = 'adultadworld'
    adultfriendfinder = 'adultfriendfinder'
    advection = 'advection'
    adventori = 'adventori'
    advertising_com = 'advertising-com'
    advogato = 'advogato'
    aerserv = 'aerserv'
    afl = 'afl'
    afp = 'afp'
    afreeca = 'afreeca'
    africaguinee = 'africaguinee'
    afrikmag = 'afrikmag'
    aftenposten = 'aftenposten'
    aftonbladet = 'aftonbladet'
    agame = 'agame'
    aiaigame = 'aiaigame'
    aib = 'aib'
    aiccu_tic = 'aiccu-tic'
    aili = 'aili'
    aim = 'aim'
    aim_transfer = 'aim-transfer'
    aimini = 'aimini'
    aims = 'aims'
    air_video = 'air-video'
    airaim = 'airaim'
    airkast = 'airkast'
    aizhan = 'aizhan'
    akamai = 'akamai'
    akamai_video = 'akamai-video'
    akinator = 'akinator'
    akipress = 'akipress'
    akoam = 'akoam'
    aktuality = 'aktuality'
    alakhbar = 'alakhbar'
    alaraby = 'alaraby'
    alayam24 = 'alayam24'
    albawabhnews = 'albawabhnews'
    alexa = 'alexa'
    alfajertv = 'alfajertv'
    alg_dhcp = 'alg-dhcp'
    alg_facetime = 'alg-facetime'
    alg_facetime_audio = 'alg-facetime-audio'
    alg_ftp = 'alg-ftp'
    alg_h323 = 'alg-h323'
    alg_jabber_audio = 'alg-jabber-audio'
    alg_jabber_desktop_sharing = 'alg-jabber-desktop-sharing'
    alg_jabber_mc = 'alg-jabber-mc'
    alg_jabber_video = 'alg-jabber-video'
    alg_noe = 'alg-noe'
    alg_rtp = 'alg-rtp'
    alg_rtsp = 'alg-rtsp'
    alg_sccp = 'alg-sccp'
    alg_sip = 'alg-sip'
    alg_sip_audio = 'alg-sip-audio'
    alg_sip_video = 'alg-sip-video'
    alg_skype4b_app_sharing = 'alg-skype4b-app-sharing'
    alg_skype4b_audio = 'alg-skype4b-audio'
    alg_skype4b_desktop_sharing = 'alg-skype4b-desktop-sharing'
    alg_skype4b_file_transfer = 'alg-skype4b-file-transfer'
    alg_skype4b_secure = 'alg-skype4b-secure'
    alg_skype4b_video = 'alg-skype4b-video'
    alg_svp = 'alg-svp'
    alg_vocera = 'alg-vocera'
    alg_wifi_calling = 'alg-wifi-calling'
    alibaba = 'alibaba'
    alicall = 'alicall'
    aliexpress = 'aliexpress'
    alimama = 'alimama'
    alipay = 'alipay'
    aljaras = 'aljaras'
    aljarida = 'aljarida'
    aljazeera = 'aljazeera'
    alkawnnews = 'alkawnnews'
    all_slots_casino = 'all-slots-casino'
    allegro = 'allegro'
    allmusic = 'allmusic'
    allocine = 'allocine'
    almanar = 'almanar'
    almashhad = 'almashhad'
    almasryalyoum = 'almasryalyoum'
    alnilin = 'alnilin'
    alquds = 'alquds'
    alrakoba = 'alrakoba'
    alsjl = 'alsjl'
    altiris = 'altiris'
    alwafd = 'alwafd'
    alwakeelnews = 'alwakeelnews'
    alwasatnews = 'alwasatnews'
    alwatanvoice = 'alwatanvoice'
    alyamanalaraby = 'alyamanalaraby'
    alyaoum24 = 'alyaoum24'
    amazon = 'amazon'
    amazon_adsystem = 'amazon-adsystem'
    amazon_aws = 'amazon-aws'
    amazon_chime = 'amazon-chime'
    amazon_cloud_drive = 'amazon-cloud-drive'
    amazon_music = 'amazon-music'
    amazon_video = 'amazon-video'
    ambebi = 'ambebi'
    ameba = 'ameba'
    americanexpress = 'americanexpress'
    ami = 'ami'
    amjilt = 'amjilt'
    ammonnews = 'ammonnews'
    ammyy_admin = 'ammyy-admin'
    amoebaos = 'amoebaos'
    amplitude = 'amplitude'
    amqp = 'amqp'
    andornet = 'andornet'
    android_cnxmgr = 'android-cnxmgr'
    angry_birds = 'angry-birds'
    animebw = 'animebw'
    animoto = 'animoto'
    anipang = 'anipang'
    annapurnapost = 'annapurnapost'
    annonces = 'annonces'
    anobii = 'anobii'
    anspress = 'anspress'
    answers = 'answers'
    ant1iwo = 'ant1iwo'
    ants_p2p = 'ants-p2p'
    any = 'any'
    any_0hop = 'any-0hop'
    anydesk = 'anydesk'
    anz = 'anz'
    anzhi = 'anzhi'
    aol = 'aol'
    aol_on = 'aol-on'
    aol_one = 'aol-one'
    apa = 'apa'
    aparat = 'aparat'
    apns = 'apns'
    apollo = 'apollo'
    apollo_lv = 'apollo-lv'
    appbot = 'appbot'
    appchina = 'appchina'
    apple = 'apple'
    apple_airplay = 'apple-airplay'
    apple_airport = 'apple-airport'
    apple_airprint = 'apple-airprint'
    apple_hls = 'apple-hls'
    apple_location = 'apple-location'
    apple_maps = 'apple-maps'
    apple_music = 'apple-music'
    apple_siri = 'apple-siri'
    apple_update = 'apple-update'
    appledaily = 'appledaily'
    applejuice = 'applejuice'
    applovin = 'applovin'
    appnext = 'appnext'
    appnexus = 'appnexus'
    appsflyer = 'appsflyer'
    appshopper = 'appshopper'
    appstore = 'appstore'
    apptimize = 'apptimize'
    apsalar = 'apsalar'
    aptoide = 'aptoide'
    aqlame = 'aqlame'
    arabiaweather = 'arabiaweather'
    archive = 'archive'
    arenabg = 'arenabg'
    ares = 'ares'
    areyouahuman = 'areyouahuman'
    argaam = 'argaam'
    argus = 'argus'
    aris = 'aris'
    armorgames = 'armorgames'
    armorgames_play = 'armorgames-play'
    arp = 'arp'
    asana = 'asana'
    asiae = 'asiae'
    asiandvdclub = 'asiandvdclub'
    ask = 'ask'
    ask_fm = 'ask-fm'
    askcom = 'askcom'
    asmallworld = 'asmallworld'
    asproxy = 'asproxy'
    atalk = 'atalk'
    athlinks = 'athlinks'
    atlasinfo = 'atlasinfo'
    atlassian = 'atlassian'
    atlassolutions = 'atlassolutions'
    att = 'att'
    atwiki = 'atwiki'
    auction = 'auction'
    audible = 'audible'
    aufeminin = 'aufeminin'
    aumix = 'aumix'
    auone = 'auone'
    auto24 = 'auto24'
    autodesk = 'autodesk'
    avas = 'avas'
    avast = 'avast'
    avaz = 'avaz'
    avg = 'avg'
    avg_update = 'avg-update'
    avira_update = 'avira-update'
    avito_ma = 'avito-ma'
    avito_ru = 'avito-ru'
    avoidr = 'avoidr'
    avto = 'avto'
    awempire = 'awempire'
    ax25 = 'ax25'
    azet = 'azet'
    azetone = 'azetone'
    b92 = 'b92'
    babycenter = 'babycenter'
    babyhome = 'babyhome'
    babylon = 'babylon'
    backpackers = 'backpackers'
    bacnet_app = 'bacnet-app'
    bacnet_net = 'bacnet-net'
    bacnet_vlc = 'bacnet-vlc'
    badongo = 'badongo'
    badoo = 'badoo'
    baganmart = 'baganmart'
    baidu = 'baidu'
    baidu_hi_games = 'baidu-hi-games'
    baidu_maps = 'baidu-maps'
    baidu_player = 'baidu-player'
    baidu_wallet = 'baidu-wallet'
    baike = 'baike'
    balkanweb = 'balkanweb'
    banco_industrial = 'banco-industrial'
    bancoestado = 'bancoestado'
    bancopopular = 'bancopopular'
    banesc_online = 'banesc-online'
    banglanews24 = 'banglanews24'
    bankmellat = 'bankmellat'
    banvenez = 'banvenez'
    baofeng = 'baofeng'
    base = 'base'
    battlenet = 'battlenet'
    bazaarvoice = 'bazaarvoice'
    bazos = 'bazos'
    bbc = 'bbc'
    bbc_player = 'bbc-player'
    bbm = 'bbm'
    bbm_audio = 'bbm-audio'
    bbm_video = 'bbm-video'
    bbn_rcc_mon = 'bbn-rcc-mon'
    bbs = 'bbs'
    bca_co = 'bca-co'
    bd24live = 'bd24live'
    bdjobs = 'bdjobs'
    bdnews24 = 'bdnews24'
    beanfun = 'beanfun'
    beatport = 'beatport'
    bebo = 'bebo'
    bebo_mail = 'bebo-mail'
    beetalk = 'beetalk'
    beforward = 'beforward'
    beirutpress = 'beirutpress'
    bemaniso = 'bemaniso'
    bernews = 'bernews'
    bet365 = 'bet365'
    bet9ja = 'bet9ja'
    bf1 = 'bf1'
    bf4 = 'bf4'
    bgp = 'bgp'
    bidorbuy = 'bidorbuy'
    bidswitch = 'bidswitch'
    big5_sporting_goods = 'big5-sporting-goods'
    bigbigchannel = 'bigbigchannel'
    bigeye = 'bigeye'
    biglobe_ne = 'biglobe-ne'
    bigpond_movies = 'bigpond-movies'
    bigtent = 'bigtent'
    bigupload = 'bigupload'
    biip = 'biip'
    bikhir = 'bikhir'
    bild = 'bild'
    bing = 'bing'
    bint_jbeil = 'bint-jbeil'
    biobiochile = 'biobiochile'
    bitbucket = 'bitbucket'
    bitcoin = 'bitcoin'
    bitcomet_pex = 'bitcomet-pex'
    bitdefender_update = 'bitdefender-update'
    bitenova = 'bitenova'
    bitlord = 'bitlord'
    bitme = 'bitme'
    bitmedianetwork = 'bitmedianetwork'
    bitmetv = 'bitmetv'
    bits = 'bits'
    bitseduce = 'bitseduce'
    bitshock = 'bitshock'
    bitsoup = 'bitsoup'
    bitstrips = 'bitstrips'
    bittorrent = 'bittorrent'
    bittorrent_application = 'bittorrent-application'
    bittorrent_bundle = 'bittorrent-bundle'
    bitvaulttorrent = 'bitvaulttorrent'
    bitworld = 'bitworld'
    bizographics = 'bizographics'
    bjnp = 'bjnp'
    blackberry = 'blackberry'
    blackberry_locate = 'blackberry-locate'
    blackberry_update = 'blackberry-update'
    blackplanet = 'blackplanet'
    blastingnews = 'blastingnews'
    bleacherreport = 'bleacherreport'
    bleep = 'bleep'
    blic = 'blic'
    blick = 'blick'
    blocket = 'blocket'
    blog = 'blog'
    blogfa = 'blogfa'
    blogger = 'blogger'
    blogimg = 'blogimg'
    blogphongthuy = 'blogphongthuy'
    blogster = 'blogster'
    blokus = 'blokus'
    bloomberg = 'bloomberg'
    blubster = 'blubster'
    bluejayfilms = 'bluejayfilms'
    bluewin = 'bluewin'
    bmff = 'bmff'
    bna = 'bna'
    bodet_time = 'bodet-time'
    bofa = 'bofa'
    boldchat = 'boldchat'
    bolha = 'bolha'
    bolt = 'bolt'
    bomb01 = 'bomb01'
    bondisk = 'bondisk'
    bongacams = 'bongacams'
    bonmarche = 'bonmarche'
    booking = 'booking'
    books = 'books'
    bootstrapcdn = 'bootstrapcdn'
    bootytape = 'bootytape'
    box_net = 'box-net'
    boxopus = 'boxopus'
    br_sat_mon = 'br-sat-mon'
    braintree = 'braintree'
    branch = 'branch'
    brazzers = 'brazzers'
    brightcove = 'brightcove'
    brightroll = 'brightroll'
    brighttalk = 'brighttalk'
    browntracker = 'browntracker'
    bsp = 'bsp'
    bssap = 'bssap'
    bt_bt = 'bt-bt'
    bt_dk = 'bt-dk'
    bt_wrzru = 'bt-wrzru'
    btjunkie = 'btjunkie'
    bugs = 'bugs'
    bugsnag = 'bugsnag'
    bujumbura = 'bujumbura'
    bukalapak = 'bukalapak'
    bulawayo24 = 'bulawayo24'
    burt = 'burt'
    businessweekly = 'businessweekly'
    buzzfeed = 'buzzfeed'
    buzzhand = 'buzzhand'
    buzznet = 'buzznet'
    buzzsenegal = 'buzzsenegal'
    bwiza = 'bwiza'
    bxml = 'bxml'
    bypassthat = 'bypassthat'
    caak = 'caak'
    caasimadda = 'caasimadda'
    cabify = 'cabify'
    caf = 'caf'
    cafemom = 'cafemom'
    caliente = 'caliente'
    cam4 = 'cam4'
    cameroon_info = 'cameroon-info'
    campfire = 'campfire'
    canalrcn = 'canalrcn'
    candy_crush_saga = 'candy-crush-saga'
    canvas = 'canvas'
    capitalone = 'capitalone'
    capwap = 'capwap'
    carbonite = 'carbonite'
    care2 = 'care2'
    cari = 'cari'
    carsales = 'carsales'
    cartoonnetwork = 'cartoonnetwork'
    cas = 'cas'
    catchoftheday = 'catchoftheday'
    caymannewsservice = 'caymannewsservice'
    cbs_video = 'cbs-video'
    cbt = 'cbt'
    ccp = 'ccp'
    ccproxy = 'ccproxy'
    cctv_vod = 'cctv-vod'
    cdiscount = 'cdiscount'
    cdm = 'cdm'
    cdnetworks = 'cdnetworks'
    cdp = 'cdp'
    cedexis = 'cedexis'
    cellufun = 'cellufun'
    central_torrent = 'central-torrent'
    centrum_cz = 'centrum-cz'
    centrum_sk = 'centrum-sk'
    cft = 'cft'
    cftp = 'cftp'
    cgiproxy = 'cgiproxy'
    cgmp = 'cgmp'
    champion_football = 'champion-football'
    channel4 = 'channel4'
    channelmyanmar = 'channelmyanmar'
    chaos = 'chaos'
    chap = 'chap'
    chatroulette = 'chatroulette'
    cheetah_mobile = 'cheetah-mobile'
    china_airlines = 'china-airlines'
    china_youth_league = 'china-youth-league'
    chinacom = 'chinacom'
    chinacomcn = 'chinacomcn'
    chinadaily = 'chinadaily'
    chinanetcenter = 'chinanetcenter'
    chinanews = 'chinanews'
    chinaren = 'chinaren'
    chinatimes = 'chinatimes'
    chinaz = 'chinaz'
    chosun = 'chosun'
    chouftv = 'chouftv'
    chrome_remote_desktop = 'chrome-remote-desktop'
    chrome_update = 'chrome-update'
    chunghwa_telecom = 'chunghwa-telecom'
    cibercuba = 'cibercuba'
    cip = 'cip'
    cisco = 'cisco'
    citizentv = 'citizentv'
    citrix_cloud = 'citrix-cloud'
    citrix_online = 'citrix-online'
    citrix_pvs = 'citrix-pvs'
    cj_mall = 'cj-mall'
    ck101 = 'ck101'
    clarin = 'clarin'
    clash_of_clans = 'clash-of-clans'
    clash_royale = 'clash-royale'
    clasificadosonline = 'clasificadosonline'
    classmates = 'classmates'
    clearcase = 'clearcase'
    clearspace = 'clearspace'
    clicanoo = 'clicanoo'
    clicktale = 'clicktale'
    clickyab = 'clickyab'
    clien = 'clien'
    clip = 'clip'
    clip2net = 'clip2net'
    cloob = 'cloob'
    cloudflare = 'cloudflare'
    cloudinary = 'cloudinary'
    cloudme = 'cloudme'
    clubbox = 'clubbox'
    clubic = 'clubic'
    clumsy_ninja = 'clumsy-ninja'
    cmore = 'cmore'
    cnet = 'cnet'
    cnet_tv = 'cnet-tv'
    cnm = 'cnm'
    cnn = 'cnn'
    cntv = 'cntv'
    cnyes = 'cnyes'
    cnzz = 'cnzz'
    coap = 'coap'
    coccoc = 'coccoc'
    coco = 'coco'
    cocolog_nifty = 'cocolog-nifty'
    college_blender = 'college-blender'
    comcast = 'comcast'
    comm = 'comm'
    commbank = 'commbank'
    commentcamarche = 'commentcamarche'
    comp = 'comp'
    compaq_peer = 'compaq-peer'
    concur = 'concur'
    conduit = 'conduit'
    constantcontact = 'constantcontact'
    contentabc = 'contentabc'
    conversant = 'conversant'
    conviva = 'conviva'
    corotos = 'corotos'
    corriere = 'corriere'
    cotp = 'cotp'
    couch_surfing = 'couch-surfing'
    coupang = 'coupang'
    cpasbien = 'cpasbien'
    cphb = 'cphb'
    cpmstar = 'cpmstar'
    cpnx = 'cpnx'
    crackle = 'crackle'
    craigslist = 'craigslist'
    crashlytics = 'crashlytics'
    crhoy = 'crhoy'
    criteo = 'criteo'
    crittercism = 'crittercism'
    crnobelo = 'crnobelo'
    crocko = 'crocko'
    crtp = 'crtp'
    crudp = 'crudp'
    cryptoheaven = 'cryptoheaven'
    cryptospout = 'cryptospout'
    crystalbet = 'crystalbet'
    csdn = 'csdn'
    csp_abethernet = 'csp-abethernet'
    cstrike = 'cstrike'
    ctrip = 'ctrip'
    cubadebate = 'cubadebate'
    cups = 'cups'
    curapelanatureza = 'curapelanatureza'
    curse = 'curse'
    cv_online = 'cv-online'
    cvbankas = 'cvbankas'
    cvs = 'cvs'
    cwseychelles = 'cwseychelles'
    cyber12 = 'cyber12'
    cyberctm = 'cyberctm'
    cyworld = 'cyworld'
    da7ye = 'da7ye'
    dagbladet = 'dagbladet'
    daikynguyen = 'daikynguyen'
    daily_pakistan = 'daily-pakistan'
    daily_strength = 'daily-strength'
    dailymail = 'dailymail'
    dailymotion = 'dailymotion'
    dakaractu = 'dakaractu'
    dameware = 'dameware'
    dangdang = 'dangdang'
    danishbits = 'danishbits'
    dantri = 'dantri'
    dap_news = 'dap-news'
    daraz = 'daraz'
    data_hu = 'data-hu'
    data_saver = 'data-saver'
    daum = 'daum'
    daummail = 'daummail'
    davidov = 'davidov'
    day = 'day'
    db2 = 'db2'
    dba = 'dba'
    dbs = 'dbs'
    dcard = 'dcard'
    dccp = 'dccp'
    dcerpc = 'dcerpc'
    dcinside = 'dcinside'
    dcn_meas = 'dcn-meas'
    ddp = 'ddp'
    ddx = 'ddx'
    dealdey = 'dealdey'
    debian = 'debian'
    debian_update = 'debian-update'
    dec = 'dec'
    decayenne = 'decayenne'
    deepseek = 'deepseek'
    deer_hunter_2014 = 'deer-hunter-2014'
    deezer = 'deezer'
    defimedia = 'defimedia'
    delfi = 'delfi'
    delicious = 'delicious'
    delta_search = 'delta-search'
    deltav = 'deltav'
    demonware = 'demonware'
    depositfiles = 'depositfiles'
    derstandard = 'derstandard'
    deskaway = 'deskaway'
    destiny = 'destiny'
    detik = 'detik'
    detiknews = 'detiknews'
    deviant_art = 'deviant-art'
    dfs = 'dfs'
    dgp = 'dgp'
    dhcp6 = 'dhcp6'
    diablo3 = 'diablo3'
    diameter = 'diameter'
    dianping = 'dianping'
    dict = 'dict'
    digg = 'digg'
    digikala = 'digikala'
    digioh = 'digioh'
    digitalriver = 'digitalriver'
    digitalverse = 'digitalverse'
    diino = 'diino'
    dimp = 'dimp'
    diodeo = 'diodeo'
    diop = 'diop'
    diply = 'diply'
    dir = 'dir'
    directconnect = 'directconnect'
    directrev = 'directrev'
    directv = 'directv'
    diretube = 'diretube'
    disaboom = 'disaboom'
    discuss = 'discuss'
    disney_channel = 'disney-channel'
    disney_junior = 'disney-junior'
    disney_xd = 'disney-xd'
    disqus = 'disqus'
    distcc = 'distcc'
    divar = 'divar'
    divshare = 'divshare'
    dmm_co = 'dmm-co'
    dnevnik = 'dnevnik'
    dnp3 = 'dnp3'
    dns_crypt = 'dns-crypt'
    dns2tcp = 'dns2tcp'
    dnshop = 'dnshop'
    dnxlive = 'dnxlive'
    docstoc = 'docstoc'
    docusign = 'docusign'
    doisongphapluat = 'doisongphapluat'
    dol2day = 'dol2day'
    domain = 'domain'
    donedeal = 'donedeal'
    donga = 'donga'
    dontstayin = 'dontstayin'
    doodle_jump = 'doodle-jump'
    doorblog = 'doorblog'
    dorgio = 'dorgio'
    dostor = 'dostor'
    dota2 = 'dota2'
    douban = 'douban'
    doubleverify = 'doubleverify'
    douyu = 'douyu'
    dr = 'dr'
    draugas = 'draugas'
    draugiem = 'draugiem'
    drda = 'drda'
    dreamora = 'dreamora'
    dreamwiz = 'dreamwiz'
    dropbox = 'dropbox'
    dropbox_download = 'dropbox-download'
    dropbox_upload = 'dropbox-upload'
    dropshots = 'dropshots'
    druknet = 'druknet'
    drupal = 'drupal'
    dsi = 'dsi'
    dsr = 'dsr'
    dstv = 'dstv'
    dtls = 'dtls'
    dtp = 'dtp'
    dubizzle = 'dubizzle'
    duodecad_its = 'duodecad-its'
    duowan = 'duowan'
    dv = 'dv'
    dwarozh = 'dwarozh'
    dwtonline = 'dwtonline'
    dwu = 'dwu'
    dynamicintranet = 'dynamicintranet'
    e_boks = 'e-boks'
    earthcam = 'earthcam'
    earthlinktele = 'earthlinktele'
    eastmoney = 'eastmoney'
    easytravel = 'easytravel'
    ebay = 'ebay'
    ebay_classifieds = 'ebay-classifieds'
    ebuddy = 'ebuddy'
    ecaytrade = 'ecaytrade'
    echo = 'echo'
    echo360 = 'echo360'
    echoroukonline = 'echoroukonline'
    ecuavisa = 'ecuavisa'
    edgecast = 'edgecast'
    edonkey = 'edonkey'
    edu365 = 'edu365'
    educarriere = 'educarriere'
    egloos = 'egloos'
    egnyte = 'egnyte'
    egp = 'egp'
    eigrp = 'eigrp'
    ekantipur = 'ekantipur'
    eksisozluk = 'eksisozluk'
    ekskluziva = 'ekskluziva'
    ekstrabladet = 'ekstrabladet'
    el_balad = 'el-balad'
    el_nacional = 'el-nacional'
    elasticsearch = 'elasticsearch'
    elblog = 'elblog'
    elbotola = 'elbotola'
    elcat = 'elcat'
    elcomercio = 'elcomercio'
    eldeber = 'eldeber'
    electronic_arts = 'electronic-arts'
    elfagr = 'elfagr'
    elftown = 'elftown'
    elhawd = 'elhawd'
    elheddaf = 'elheddaf'
    elheraldo = 'elheraldo'
    elhourriya = 'elhourriya'
    elkhadra = 'elkhadra'
    elle_tw = 'elle-tw'
    elluminate = 'elluminate'
    elmogaz = 'elmogaz'
    elmundo = 'elmundo'
    elnashra = 'elnashra'
    elnoticiero = 'elnoticiero'
    elnuevodia = 'elnuevodia'
    elnuevodiario = 'elnuevodiario'
    elnuevoherald = 'elnuevoherald'
    elpais = 'elpais'
    elsalvador = 'elsalvador'
    eltiempo = 'eltiempo'
    eluniverso = 'eluniverso'
    elwatannews = 'elwatannews'
    emag = 'emag'
    emansion_lr = 'emansion-lr'
    emcon = 'emcon'
    emisoras_unidas = 'emisoras-unidas'
    emol = 'emol'
    emoo = 'emoo'
    empire_four_kingdoms = 'empire-four-kingdoms'
    encap = 'encap'
    encuentra24 = 'encuentra24'
    energy_torrent = 'energy-torrent'
    enip = 'enip'
    ensighten = 'ensighten'
    ensonhaber = 'ensonhaber'
    eons = 'eons'
    epa = 'epa'
    epernicus = 'epernicus'
    epic_games = 'epic-games'
    epl = 'epl'
    epm = 'epm'
    epom = 'epom'
    eroom_net = 'eroom-net'
    eskimi = 'eskimi'
    esnips = 'esnips'
    espn = 'espn'
    espncricinfo = 'espncricinfo'
    essada = 'essada'
    essaha = 'essaha'
    essahraa = 'essahraa'
    essirage = 'essirage'
    established = 'established'
    estadio = 'estadio'
    etajakhabar = 'etajakhabar'
    etao = 'etao'
    etecsa = 'etecsa'
    eth = 'eth'
    etherip = 'etherip'
    ethiojobs = 'ethiojobs'
    ethiotube = 'ethiotube'
    etisalat_c_me = 'etisalat-c-me'
    etsi_li = 'etsi-li'
    ettoday = 'ettoday'
    eve_online = 'eve-online'
    everest_tech = 'everest-tech'
    evernote = 'evernote'
    everquest = 'everquest'
    evony = 'evony'
    exacqvision = 'exacqvision'
    exblog = 'exblog'
    excel_online = 'excel-online'
    exelate = 'exelate'
    expatriates = 'expatriates'
    expedia = 'expedia'
    experience_project = 'experience-project'
    experion = 'experion'
    exploroo = 'exploroo'
    expressen = 'expressen'
    extremebits = 'extremebits'
    extremenova = 'extremenova'
    eyejot = 'eyejot'
    eyny = 'eyny'
    ezfly = 'ezfly'
    ezpeer = 'ezpeer'
    eztravel = 'eztravel'
    facebook = 'facebook'
    facebook_apps = 'facebook-apps'
    facebook_lite = 'facebook-lite'
    facebook_live = 'facebook-live'
    facebook_messenger = 'facebook-messenger'
    facebook_video = 'facebook-video'
    facebook_workplace = 'facebook-workplace'
    facenama = 'facenama'
    faceparty = 'faceparty'
    faces = 'faces'
    fanpage = 'fanpage'
    farmville = 'farmville'
    farsnews = 'farsnews'
    fashionguide = 'fashionguide'
    fasp = 'fasp'
    fastly = 'fastly'
    fatakat = 'fatakat'
    fatunetwork = 'fatunetwork'
    fbcdn = 'fbcdn'
    fc2 = 'fc2'
    fcm = 'fcm'
    feiliao = 'feiliao'
    femina = 'femina'
    fenopy = 'fenopy'
    fetchtv = 'fetchtv'
    fetion = 'fetion'
    fetlife = 'fetlife'
    fibre_channel = 'fibre-channel'
    fijitimes = 'fijitimes'
    fijivillage = 'fijivillage'
    file_dropper = 'file-dropper'
    file_host = 'file-host'
    filefactory_com = 'filefactory-com'
    fileflyer = 'fileflyer'
    fileguri = 'fileguri'
    filei = 'filei'
    filelist = 'filelist'
    filemail = 'filemail'
    filemaker_pro = 'filemaker-pro'
    filepost_ru = 'filepost-ru'
    filer_net = 'filer-net'
    filerio = 'filerio'
    filesanywhere = 'filesanywhere'
    fileserve = 'fileserve'
    filesharepro = 'filesharepro'
    filesovermiles = 'filesovermiles'
    filetopia = 'filetopia'
    fillos_de_galicia = 'fillos-de-galicia'
    filmaffinity = 'filmaffinity'
    find_my_iphone = 'find-my-iphone'
    finn = 'finn'
    fire = 'fire'
    firefox_update = 'firefox-update'
    fix = 'fix'
    flash = 'flash'
    flashplugin_update = 'flashplugin-update'
    flashtalking = 'flashtalking'
    flickr = 'flickr'
    flipagram = 'flipagram'
    flipboard = 'flipboard'
    flipkart = 'flipkart'
    flixster = 'flixster'
    flumotion = 'flumotion'
    flurry = 'flurry'
    fluxiom = 'fluxiom'
    fly_proxy = 'fly-proxy'
    flycell_ec = 'flycell-ec'
    flycell_pe = 'flycell-pe'
    fnb = 'fnb'
    fnu = 'fnu'
    fogbugz = 'fogbugz'
    fortnite = 'fortnite'
    fortunechina = 'fortunechina'
    forum = 'forum'
    fotki = 'fotki'
    fotolog = 'fotolog'
    fotoweb = 'fotoweb'
    foursquare = 'foursquare'
    foxbusiness = 'foxbusiness'
    foxmovies = 'foxmovies'
    foxnetworks = 'foxnetworks'
    foxnews = 'foxnews'
    foxplus = 'foxplus'
    foxsports = 'foxsports'
    foxsports_au = 'foxsports-au'
    foxtel = 'foxtel'
    foxy = 'foxy'
    free = 'free'
    free_music_download = 'free-music-download'
    freebsd_update = 'freebsd-update'
    freedomnewspaper = 'freedomnewspaper'
    freeetv = 'freeetv'
    freeloader = 'freeloader'
    freemail = 'freemail'
    freenet = 'freenet'
    freeproxies = 'freeproxies'
    freetorrent = 'freetorrent'
    freewheel = 'freewheel'
    freshnewsasia = 'freshnewsasia'
    friends_reunited = 'friends-reunited'
    friendvox = 'friendvox'
    fring = 'fring'
    frostwire = 'frostwire'
    fruhstuckstreff = 'fruhstuckstreff'
    fruit_ninja = 'fruit-ninja'
    fsecure = 'fsecure'
    fsecure_update = 'fsecure-update'
    ftp_data = 'ftp-data'
    ftps = 'ftps'
    fubar = 'fubar'
    funcaptcha = 'funcaptcha'
    funshion = 'funshion'
    furk_net = 'furk-net'
    fuze_meeting = 'fuze-meeting'
    gabonreview = 'gabonreview'
    gadugadu = 'gadugadu'
    gaiaonline = 'gaiaonline'
    game_center = 'game-center'
    gamebase_tw = 'gamebase-tw'
    gameloft = 'gameloft'
    gamer_tw = 'gamer-tw'
    games_co = 'games-co'
    gamesmomo = 'gamesmomo'
    ganji = 'ganji'
    garaanews = 'garaanews'
    garena = 'garena'
    garp = 'garp'
    gather = 'gather'
    gatherplace = 'gatherplace'
    gays = 'gays'
    gazeta = 'gazeta'
    gazetablic = 'gazetablic'
    gazetaexpress = 'gazetaexpress'
    gazzetta = 'gazzetta'
    gbridge = 'gbridge'
    gcm = 'gcm'
    gcp = 'gcp'
    gcs = 'gcs'
    gdb_remote = 'gdb-remote'
    geni = 'geni'
    gerasanews = 'gerasanews'
    gettyimages = 'gettyimages'
    gfan = 'gfan'
    gfycat = 'gfycat'
    ggp = 'ggp'
    ghanaweb = 'ghanaweb'
    ghostsurf = 'ghostsurf'
    gigacircle = 'gigacircle'
    gigasize_com = 'gigasize-com'
    gigatribe = 'gigatribe'
    giop = 'giop'
    giops = 'giops'
    giphy = 'giphy'
    github = 'github'
    glide = 'glide'
    globalpublishers = 'globalpublishers'
    globo = 'globo'
    glympse = 'glympse'
    gmail = 'gmail'
    gmail_basic = 'gmail-basic'
    gmail_chat = 'gmail-chat'
    gmail_drive = 'gmail-drive'
    gmail_mobile = 'gmail-mobile'
    gmanetwork = 'gmanetwork'
    gmarket = 'gmarket'
    gmtp = 'gmtp'
    gmw = 'gmw'
    gmx = 'gmx'
    gnunet = 'gnunet'
    gnutella = 'gnutella'
    go90 = 'go90'
    goal = 'goal'
    gob = 'gob'
    goboogy = 'goboogy'
    godtube = 'godtube'
    gogo = 'gogo'
    gogobox = 'gogobox'
    gohappy = 'gohappy'
    golden_village = 'golden-village'
    goldenfrog = 'goldenfrog'
    gomeetnow = 'gomeetnow'
    gomtv_vod = 'gomtv-vod'
    goo_ne = 'goo-ne'
    goodnight = 'goodnight'
    goodreads = 'goodreads'
    google = 'google'
    google_accounts = 'google-accounts'
    google_ads = 'google-ads'
    google_analytics = 'google-analytics'
    google_appengine = 'google-appengine'
    google_cache = 'google-cache'
    google_calendar = 'google-calendar'
    google_classroom = 'google-classroom'
    google_code = 'google-code'
    google_docs = 'google-docs'
    google_earth = 'google-earth'
    google_gen = 'google-gen'
    google_groups = 'google-groups'
    google_inbox = 'google-inbox'
    google_localguides = 'google-localguides'
    google_maps = 'google-maps'
    google_photos = 'google-photos'
    google_play = 'google-play'
    google_play_music = 'google-play-music'
    google_plus = 'google-plus'
    google_safebrowsing = 'google-safebrowsing'
    google_skymap = 'google-skymap'
    google_spaces = 'google-spaces'
    google_sprayscape = 'google-sprayscape'
    google_supl = 'google-supl'
    google_tags = 'google-tags'
    google_toolbar = 'google-toolbar'
    google_translate = 'google-translate'
    google_trusted_store = 'google-trusted-store'
    google_weblight = 'google-weblight'
    googlebot = 'googlebot'
    goose = 'goose'
    goplan = 'goplan'
    gossiplankanews = 'gossiplankanews'
    gotodevice = 'gotodevice'
    gotomeeting = 'gotomeeting'
    gotomypc = 'gotomypc'
    gougou = 'gougou'
    gozambiajobs = 'gozambiajobs'
    grammarly = 'grammarly'
    granma = 'granma'
    gratisindo = 'gratisindo'
    gravatar = 'gravatar'
    gre = 'gre'
    gree = 'gree'
    greenarea = 'greenarea'
    grid = 'grid'
    grono = 'grono'
    groove = 'groove'
    groupon = 'groupon'
    groupwise = 'groupwise'
    gsshop = 'gsshop'
    gstatic = 'gstatic'
    gt_racing_2 = 'gt-racing-2'
    gtalk = 'gtalk'
    gtp = 'gtp'
    gtpv2 = 'gtpv2'
    guampdn = 'guampdn'
    guatevision = 'guatevision'
    gudanglagu = 'gudanglagu'
    guineenews = 'guineenews'
    gulfup = 'gulfup'
    gumtree = 'gumtree'
    gyao = 'gyao'
    h225 = 'h225'
    h245 = 'h245'
    h248_binary = 'h248-binary'
    h248_text = 'h248-text'
    habbo = 'habbo'
    haber7 = 'haber7'
    halflife = 'halflife'
    hamachi = 'hamachi'
    hamariweb = 'hamariweb'
    hambastagi = 'hambastagi'
    hami_book = 'hami-book'
    hami_cloud = 'hami-cloud'
    hami_music = 'hami-music'
    handycafe = 'handycafe'
    hangame = 'hangame'
    hankooki = 'hankooki'
    hankyung = 'hankyung'
    hao123 = 'hao123'
    haproxy = 'haproxy'
    haqqin = 'haqqin'
    hardsextube = 'hardsextube'
    hardwarezone = 'hardwarezone'
    hatena_ne = 'hatena-ne'
    haveeru = 'haveeru'
    hbo_go = 'hbo-go'
    hbonordic = 'hbonordic'
    heap = 'heap'
    heavy = 'heavy'
    helpshift = 'helpshift'
    heraldm = 'heraldm'
    here = 'here'
    heroku = 'heroku'
    hespress = 'hespress'
    heureka = 'heureka'
    hexatech = 'hexatech'
    hexun = 'hexun'
    hgtv = 'hgtv'
    hi5 = 'hi5'
    hibapress = 'hibapress'
    hidemyass = 'hidemyass'
    high_entropy = 'high-entropy'
    highwinds = 'highwinds'
    hihi2 = 'hihi2'
    hike_messenger = 'hike-messenger'
    hinet_games = 'hinet-games'
    hip = 'hip'
    hir24 = 'hir24'
    hirufm = 'hirufm'
    hirunews = 'hirunews'
    hk_observatory = 'hk-observatory'
    hkgolden = 'hkgolden'
    hln = 'hln'
    hmp = 'hmp'
    hockeyapp = 'hockeyapp'
    hockeycurve = 'hockeycurve'
    hola = 'hola'
    hola_webproxy = 'hola-webproxy'
    honeywell_phd = 'honeywell-phd'
    hootsuite = 'hootsuite'
    hopopt = 'hopopt'
    horizon_go = 'horizon-go'
    hospitality_club = 'hospitality-club'
    host = 'host'
    hotfile = 'hotfile'
    hotjar = 'hotjar'
    hotline = 'hotline'
    hotspot_shield = 'hotspot-shield'
    hovrs = 'hovrs'
    howcast = 'howcast'
    howstuffworks = 'howstuffworks'
    hoxx_vpn = 'hoxx-vpn'
    hpe_opagent = 'hpe-opagent'
    hpe_opbridge = 'hpe-opbridge'
    hpellc = 'hpellc'
    hs = 'hs'
    hsbc = 'hsbc'
    hsrp = 'hsrp'
    http = 'http'
    http_proxy = 'http-proxy'
    http_tunnel = 'http-tunnel'
    http2 = 'http2'
    https = 'https'
    huawei = 'huawei'
    huawei_update = 'huawei-update'
    huffington_post = 'huffington-post'
    hulkshare = 'hulkshare'
    hulu = 'hulu'
    hungrygowhere = 'hungrygowhere'
    huomao = 'huomao'
    hurriyet = 'hurriyet'
    hvg_hu = 'hvg-hu'
    hypers = 'hypers'
    hyves = 'hyves'
    i_gamer = 'i-gamer'
    i_nlsp = 'i-nlsp'
    i_part = 'i-part'
    i2p = 'i2p'
    iapp = 'iapp'
    iatp = 'iatp'
    iax = 'iax'
    ibackup = 'ibackup'
    ibay = 'ibay'
    ibibo = 'ibibo'
    ibm = 'ibm'
    ibm_tealeaf = 'ibm-tealeaf'
    ica = 'ica'
    icall = 'icall'
    icap = 'icap'
    iccp = 'iccp'
    icecast = 'icecast'
    icloud = 'icloud'
    icmp = 'icmp'
    icmp6 = 'icmp6'
    icq2go = 'icq2go'
    icrt = 'icrt'
    icy = 'icy'
    id_net = 'id-net'
    ident = 'ident'
    idnes = 'idnes'
    idokep = 'idokep'
    idpr = 'idpr'
    idpr_cmtp = 'idpr-cmtp'
    idrp = 'idrp'
    iec104 = 'iec104'
    ifeng = 'ifeng'
    ifeng_finance = 'ifeng-finance'
    ifile_it = 'ifile-it'
    ifilmtv = 'ifilmtv'
    ifix = 'ifix'
    ifmp = 'ifmp'
    ifolder_ru = 'ifolder-ru'
    igihe = 'igihe'
    igmp = 'igmp'
    igp = 'igp'
    iheartradio = 'iheartradio'
    iiop = 'iiop'
    ikea = 'ikea'
    ikman = 'ikman'
    ikon = 'ikon'
    ikub = 'ikub'
    il = 'il'
    ilivid = 'ilivid'
    iloveim = 'iloveim'
    iltalehti = 'iltalehti'
    iltasanomat = 'iltasanomat'
    imageshack = 'imageshack'
    imap = 'imap'
    imaps = 'imaps'
    imdb = 'imdb'
    imeem = 'imeem'
    imeet = 'imeet'
    imesh = 'imesh'
    imessage_file_download = 'imessage-file-download'
    imgur = 'imgur'
    iminent = 'iminent'
    imo = 'imo'
    imp = 'imp'
    impress = 'impress'
    imvu = 'imvu'
    imyanmarhouse = 'imyanmarhouse'
    inbox = 'inbox'
    incomplete = 'incomplete'
    indaba_music = 'indaba-music'
    indeksonline = 'indeksonline'
    independent = 'independent'
    index_hr = 'index-hr'
    index_hu = 'index-hu'
    indexexchange = 'indexexchange'
    indiatimes = 'indiatimes'
    indonetwork = 'indonetwork'
    indowebster = 'indowebster'
    inewsmalta = 'inewsmalta'
    infinity_blade_ii = 'infinity-blade-ii'
    infobae = 'infobae'
    informix = 'informix'
    ing = 'ing'
    inilah = 'inilah'
    inmobi = 'inmobi'
    inneractive = 'inneractive'
    innfrad = 'innfrad'
    innovid = 'innovid'
    inquirer = 'inquirer'
    instagram = 'instagram'
    instructure = 'instructure'
    intalking = 'intalking'
    interia = 'interia'
    internations = 'internations'
    internet_org = 'internet-org'
    interpark = 'interpark'
    intuit = 'intuit'
    inwi = 'inwi'
    inyarwanda = 'inyarwanda'
    iodine = 'iodine'
    ios_ota_update = 'ios-ota-update'
    ip = 'ip'
    ip_exp_1 = 'ip-exp-1'
    ip_exp_2 = 'ip-exp-2'
    ip_in_ip = 'ip-in-ip'
    ip_rdp = 'ip-rdp'
    ip_reserved = 'ip-reserved'
    ip6 = 'ip6'
    ipcomp = 'ipcomp'
    ipcp = 'ipcp'
    ipcv = 'ipcv'
    iperf = 'iperf'
    iplt = 'iplt'
    ipp = 'ipp'
    ippc = 'ippc'
    ipsec = 'ipsec'
    iptm = 'iptm'
    ipv6cp = 'ipv6cp'
    ipx = 'ipx'
    ipx_in_ip = 'ipx-in-ip'
    ipxrip = 'ipxrip'
    ipxsap = 'ipxsap'
    iqiyi = 'iqiyi'
    irc = 'irc'
    irc_galleria = 'irc-galleria'
    irc_transfer = 'irc-transfer'
    ircs = 'ircs'
    irctc = 'irctc'
    irods = 'irods'
    ironsource = 'ironsource'
    irtp = 'irtp'
    isakmp = 'isakmp'
    iscsi = 'iscsi'
    isis = 'isis'
    isl = 'isl'
    iso_ip = 'iso-ip'
    iso_tp4 = 'iso-tp4'
    issuu = 'issuu'
    isup = 'isup'
    italki = 'italki'
    itsmy = 'itsmy'
    itsup = 'itsup'
    itunes = 'itunes'
    itv_player = 'itv-player'
    iwarp = 'iwarp'
    iwiw = 'iwiw'
    ja = 'ja'
    jabber_transfer = 'jabber-transfer'
    jaiku = 'jaiku'
    jamaica_gleaner = 'jamaica-gleaner'
    jamaicaobserver = 'jamaicaobserver'
    jamiiforums = 'jamiiforums'
    jammerdirect = 'jammerdirect'
    jango = 'jango'
    jap = 'jap'
    jasmin = 'jasmin'
    java_rmi = 'java-rmi'
    java_update = 'java-update'
    javedch = 'javedch'
    javhd = 'javhd'
    jawabkom = 'jawabkom'
    jawharafm = 'jawharafm'
    jedi = 'jedi'
    jetaoshqef = 'jetaoshqef'
    jetdirect = 'jetdirect'
    jfranews = 'jfranews'
    jibe = 'jibe'
    jibe_cloud = 'jibe-cloud'
    jibjab = 'jibjab'
    jingdong = 'jingdong'
    jira = 'jira'
    jne = 'jne'
    jobs_af = 'jobs-af'
    jobs_bg = 'jobs-bg'
    jobsdb = 'jobsdb'
    jobstreet = 'jobstreet'
    jofogas = 'jofogas'
    join_me = 'join-me'
    joongang_daily = 'joongang-daily'
    jquery = 'jquery'
    jubii = 'jubii'
    jumia = 'jumia'
    junkmail = 'junkmail'
    jutarnji = 'jutarnji'
    jxta = 'jxta'
    kafka = 'kafka'
    kahoot = 'kahoot'
    kaieteurnewsonline = 'kaieteurnewsonline'
    kaioo = 'kaioo'
    kaixin_chat = 'kaixin-chat'
    kajgana = 'kajgana'
    kakaku = 'kakaku'
    kakao = 'kakao'
    kakaocdn = 'kakaocdn'
    kakaostory = 'kakaostory'
    kakaotalk = 'kakaotalk'
    kalerkantho = 'kalerkantho'
    kankan = 'kankan'
    kapanlagi = 'kapanlagi'
    kapook = 'kapook'
    karosgame = 'karosgame'
    kaskus = 'kaskus'
    kaspersky = 'kaspersky'
    kaspersky_update = 'kaspersky-update'
    kasvyksta = 'kasvyksta'
    kazaa = 'kazaa'
    kb_bank = 'kb-bank'
    kbn_live = 'kbn-live'
    kbs = 'kbs'
    keezmovies = 'keezmovies'
    keku = 'keku'
    kemenkumham = 'kemenkumham'
    khaberni = 'khaberni'
    khan = 'khan'
    khmer_news = 'khmer-news'
    khmer_note = 'khmer-note'
    khmer_press = 'khmer-press'
    khmeread = 'khmeread'
    khmerload = 'khmerload'
    kickasstorrents = 'kickasstorrents'
    kigalitoday = 'kigalitoday'
    kijiji = 'kijiji'
    kik = 'kik'
    king = 'king'
    kingdomxxx = 'kingdomxxx'
    kinogo = 'kinogo'
    kiwibox = 'kiwibox'
    kkbox = 'kkbox'
    klikbca = 'klikbca'
    klix = 'klix'
    koha = 'koha'
    kohsantepheapdaily = 'kohsantepheapdaily'
    kolektiv = 'kolektiv'
    kompas = 'kompas'
    kompasiana = 'kompasiana'
    konaminet = 'konaminet'
    konga = 'konga'
    koolim = 'koolim'
    kooora = 'kooora'
    kpasswd = 'kpasswd'
    kproxy = 'kproxy'
    krb5 = 'krb5'
    krcom = 'krcom'
    krux = 'krux'
    kryptolan = 'kryptolan'
    kstna = 'kstna'
    ku6 = 'ku6'
    kuenselonline = 'kuenselonline'
    kugou = 'kugou'
    kundo = 'kundo'
    kupujemprodajem = 'kupujemprodajem'
    kurir = 'kurir'
    kurir_info = 'kurir-info'
    kuxun = 'kuxun'
    kwejk = 'kwejk'
    l2tp = 'l2tp'
    laacibnet = 'laacibnet'
    labanquepostale = 'labanquepostale'
    lady8844 = 'lady8844'
    lajmi = 'lajmi'
    lan = 'lan'
    lanacion = 'lanacion'
    lankadeepa = 'lankadeepa'
    lanshark = 'lanshark'
    lapagina = 'lapagina'
    lapatilla = 'lapatilla'
    laposte_webmail = 'laposte-webmail'
    laprensa = 'laprensa'
    laprensagrafica = 'laprensagrafica'
    laredoute = 'laredoute'
    larp = 'larp'
    lastfm = 'lastfm'
    lastpass = 'lastpass'
    lativ = 'lativ'
    lava_lava = 'lava-lava'
    lazada = 'lazada'
    lcp = 'lcp'
    ldap = 'ldap'
    ldaps = 'ldaps'
    ldblog = 'ldblog'
    le360 = 'le360'
    leaf_1 = 'leaf-1'
    leaf_2 = 'leaf-2'
    leapfile = 'leapfile'
    learninganalytics = 'learninganalytics'
    leboncoin = 'leboncoin'
    lefaso = 'lefaso'
    lent = 'lent'
    leral = 'leral'
    leteckaposta_cz = 'leteckaposta-cz'
    letv = 'letv'
    level3 = 'level3'
    lexpress = 'lexpress'
    lg_eshop = 'lg-eshop'
    libero_video = 'libero-video'
    libjingle_pseudotcp = 'libjingle-pseudotcp'
    libon = 'libon'
    librarything = 'librarything'
    lider_bet = 'lider-bet'
    life = 'life'
    lifeknot = 'lifeknot'
    liftoff = 'liftoff'
    ligatus = 'ligatus'
    lightstreamer = 'lightstreamer'
    line = 'line'
    line_games = 'line-games'
    line_wind_runner = 'line-wind-runner'
    line2_com = 'line2-com'
    lineage2 = 'lineage2'
    linio = 'linio'
    linkedin = 'linkedin'
    lintasberita = 'lintasberita'
    lionair = 'lionair'
    liontravel = 'liontravel'
    liputan6 = 'liputan6'
    list_am = 'list-am'
    listindiario = 'listindiario'
    listografy = 'listografy'
    live_groups = 'live-groups'
    live_hotmail = 'live-hotmail'
    live_meeting = 'live-meeting'
    live_mesh = 'live-mesh'
    live_storage = 'live-storage'
    livechat = 'livechat'
    livedoor = 'livedoor'
    liveinternet = 'liveinternet'
    livejournal = 'livejournal'
    livemail_attach = 'livemail-attach'
    livemail_mobile = 'livemail-mobile'
    liveperson = 'liveperson'
    liverail = 'liverail'
    livescore = 'livescore'
    livingsocial = 'livingsocial'
    lkqd = 'lkqd'
    llc = 'llc'
    llnwd = 'llnwd'
    llp = 'llp'
    load_to = 'load-to'
    loadbalan = 'loadbalan'
    localytics = 'localytics'
    logmein = 'logmein'
    logmein_rescue = 'logmein-rescue'
    lokalisten = 'lokalisten'
    lookout_ms = 'lookout-ms'
    loop = 'loop'
    looppng = 'looppng'
    lotame = 'lotame'
    lotour = 'lotour'
    lotro = 'lotro'
    lotte = 'lotte'
    lotterypost = 'lotterypost'
    lotus_live = 'lotus-live'
    lotus_sametime = 'lotus-sametime'
    lotusnotes = 'lotusnotes'
    lpr = 'lpr'
    lqr = 'lqr'
    lrytas = 'lrytas'
    ltn = 'ltn'
    ltt = 'ltt'
    luke = 'luke'
    lun = 'lun'
    lunarstorm = 'lunarstorm'
    lusakatimes = 'lusakatimes'
    lvping = 'lvping'
    lync = 'lync'
    lync_online = 'lync-online'
    lynda = 'lynda'
    m2pa = 'm2pa'
    m2ua = 'm2ua'
    m3ua = 'm3ua'
    m800 = 'm800'
    maaii = 'maaii'
    maannews = 'maannews'
    magicjack = 'magicjack'
    magumagu = 'magumagu'
    mail_189 = 'mail-189'
    mail_com = 'mail-com'
    mail_ru_games = 'mail-ru-games'
    mail_ru_love = 'mail-ru-love'
    mail_ru_moimir = 'mail-ru-moimir'
    mail2000 = 'mail2000'
    mailru = 'mailru'
    mailru_agent = 'mailru-agent'
    mako = 'mako'
    maktoob = 'maktoob'
    malformed = 'malformed'
    malijet = 'malijet'
    maliweb = 'maliweb'
    maltapark = 'maltapark'
    maltatoday = 'maltatoday'
    mana = 'mana'
    mandriva_update = 'mandriva-update'
    manet = 'manet'
    mangocity = 'mangocity'
    mangvieclam = 'mangvieclam'
    manolito = 'manolito'
    manoramaonline = 'manoramaonline'
    manx = 'manx'
    mapbox = 'mapbox'
    mapi = 'mapi'
    mapquest = 'mapquest'
    mapy = 'mapy'
    marca = 'marca'
    marebpress = 'marebpress'
    marktplaats = 'marktplaats'
    mashable = 'mashable'
    match = 'match'
    maxcdn = 'maxcdn'
    maybank2u = 'maybank2u'
    mbc = 'mbc'
    mbl = 'mbl'
    mbn = 'mbn'
    mcafee = 'mcafee'
    mcb_home = 'mcb-home'
    mcs = 'mcs'
    mebc = 'mebc'
    media_innovation_group = 'media-innovation-group'
    mediacongo = 'mediacongo'
    mediafire = 'mediafire'
    mediamath = 'mediamath'
    mediascope = 'mediascope'
    meetin = 'meetin'
    meetingplace = 'meetingplace'
    meetme = 'meetme'
    meettheboss = 'meettheboss'
    meetup = 'meetup'
    mega = 'mega'
    megaproxy = 'megaproxy'
    megashares_com = 'megashares-com'
    meitu = 'meitu'
    meituan = 'meituan'
    mekusharim = 'mekusharim'
    mendeley = 'mendeley'
    menstylefashion = 'menstylefashion'
    mercadolibre = 'mercadolibre'
    merit_inp = 'merit-inp'
    merojax = 'merojax'
    merrjep = 'merrjep'
    messengerfx = 'messengerfx'
    metacafe = 'metacafe'
    mf_ucmdb = 'mf-ucmdb'
    mfe_nsp = 'mfe-nsp'
    mgcp = 'mgcp'
    mgid = 'mgid'
    mgoon = 'mgoon'
    miaopai = 'miaopai'
    mibbit = 'mibbit'
    micp = 'micp'
    microsoft = 'microsoft'
    mihaaru = 'mihaaru'
    mihanblog = 'mihanblog'
    mihanwebads = 'mihanwebads'
    mikogo = 'mikogo'
    milad = 'milad'
    milanuncios = 'milanuncios'
    millardayo = 'millardayo'
    milli = 'milli'
    milliyet = 'milliyet'
    mimp = 'mimp'
    minecraft_pocket = 'minecraft-pocket'
    mingpao = 'mingpao'
    minuto30 = 'minuto30'
    mipv6 = 'mipv6'
    miro = 'miro'
    mistreci = 'mistreci'
    mitalk = 'mitalk'
    mixi = 'mixi'
    mixpanel = 'mixpanel'
    mk = 'mk'
    mmm_nigeria = 'mmm-nigeria'
    mms = 'mms'
    mms_iso = 'mms-iso'
    mmse = 'mmse'
    moat = 'moat'
    mobage = 'mobage'
    mobfox = 'mobfox'
    mobile = 'mobile'
    mobile_ip = 'mobile-ip'
    mobile01 = 'mobile01'
    mobilehdr = 'mobilehdr'
    mobilemarket = 'mobilemarket'
    mobilink = 'mobilink'
    mocean = 'mocean'
    mocospace = 'mocospace'
    modbus = 'modbus'
    moe_gov = 'moe-gov'
    mog = 'mog'
    mogulus = 'mogulus'
    moi_qatar = 'moi-qatar'
    momoshop = 'momoshop'
    monex = 'monex'
    money_163 = 'money-163'
    moneydj = 'moneydj'
    mongodb = 'mongodb'
    monitor = 'monitor'
    monster = 'monster'
    moov = 'moov'
    mop = 'mop'
    mopub = 'mopub'
    morefreecamsecrets = 'morefreecamsecrets'
    mosaiquefm = 'mosaiquefm'
    motika = 'motika'
    motinews = 'motinews'
    mount = 'mount'
    mouthshut = 'mouthshut'
    mover = 'mover'
    movie2free = 'movie2free'
    movitel = 'movitel'
    mozilla = 'mozilla'
    mozzi = 'mozzi'
    mp3_rocket = 'mp3-rocket'
    mp3teca = 'mp3teca'
    mpegts = 'mpegts'
    mpls = 'mpls'
    mpls_in_ip = 'mpls-in-ip'
    mplus_messenger = 'mplus-messenger'
    mq = 'mq'
    mqtt = 'mqtt'
    ms_communicator = 'ms-communicator'
    ms_hyperv = 'ms-hyperv'
    ms_kms = 'ms-kms'
    ms_mq = 'ms-mq'
    ms_onenote = 'ms-onenote'
    ms_planner = 'ms-planner'
    ms_psrp = 'ms-psrp'
    ms_sway = 'ms-sway'
    ms_teams = 'ms-teams'
    ms_translator = 'ms-translator'
    msnp = 'msnp'
    msrp = 'msrp'
    msrpc = 'msrpc'
    mt = 'mt'
    mtalk = 'mtalk'
    mtn = 'mtn'
    mtp = 'mtp'
    mtv = 'mtv'
    mubi = 'mubi'
    mudah = 'mudah'
    multiply = 'multiply'
    mumble = 'mumble'
    musica = 'musica'
    musicchoice = 'musicchoice'
    mute = 'mute'
    mux = 'mux'
    my_com = 'my-com'
    my_talking_tom = 'my-talking-tom'
    my_yahoo = 'my-yahoo'
    myanimelist = 'myanimelist'
    myanmarload = 'myanmarload'
    myauto = 'myauto'
    mychurch = 'mychurch'
    mydiv = 'mydiv'
    mydownloader = 'mydownloader'
    mydrive = 'mydrive'
    myheritage = 'myheritage'
    myjoyonline = 'myjoyonline'
    mylife = 'mylife'
    mymarket = 'mymarket'
    myoptus = 'myoptus'
    mypeople_messenger = 'mypeople-messenger'
    mypocket = 'mypocket'
    myspace = 'myspace'
    myspace_video = 'myspace-video'
    mysql = 'mysql'
    mystart = 'mystart'
    mytv_super = 'mytv-super'
    myvideo = 'myvideo'
    myway = 'myway'
    mywebsearch = 'mywebsearch'
    nablustv = 'nablustv'
    nacion = 'nacion'
    nagariknews = 'nagariknews'
    naij = 'naij'
    nairaland = 'nairaland'
    namba = 'namba'
    namibian = 'namibian'
    namu = 'namu'
    napster = 'napster'
    narp = 'narp'
    nasa = 'nasa'
    nasza_klasa = 'nasza-klasa'
    nat_pmp = 'nat-pmp'
    nate_mail = 'nate-mail'
    natecyworld = 'natecyworld'
    nation = 'nation'
    nationalgeographic = 'nationalgeographic'
    nationallottery = 'nationallottery'
    nationnews = 'nationnews'
    nauta = 'nauta'
    naver = 'naver'
    naver_blog = 'naver-blog'
    naver_mobile = 'naver-mobile'
    naverdrive = 'naverdrive'
    navermail = 'navermail'
    nba = 'nba'
    nba_china = 'nba-china'
    nbc = 'nbc'
    nbns = 'nbns'
    ncaa = 'ncaa'
    ncore = 'ncore'
    ncp = 'ncp'
    ndmp = 'ndmp'
    nduoa = 'nduoa'
    nefsis = 'nefsis'
    nend = 'nend'
    neobux = 'neobux'
    nepworldwide = 'nepworldwide'
    net = 'net'
    net_proxy = 'net-proxy'
    netbios = 'netbios'
    netblt = 'netblt'
    netbsd_update = 'netbsd-update'
    netflix = 'netflix'
    netflow = 'netflow'
    neti = 'neti'
    netload = 'netload'
    netmarble = 'netmarble'
    netmeeting_ils = 'netmeeting-ils'
    netperform = 'netperform'
    nettby = 'nettby'
    netvelocity = 'netvelocity'
    network_radar = 'network-radar'
    neulion = 'neulion'
    new_relic = 'new-relic'
    news_am = 'news-am'
    news_au = 'news-au'
    news_mn = 'news-mn'
    news24 = 'news24'
    news24nepal = 'news24nepal'
    news784 = 'news784'
    newsbook = 'newsbook'
    newsday = 'newsday'
    newsit = 'newsit'
    newvision = 'newvision'
    nexian = 'nexian'
    nexon = 'nexon'
    nexopia = 'nexopia'
    nextmedia = 'nextmedia'
    nfl = 'nfl'
    nfs = 'nfs'
    nfs4 = 'nfs4'
    ngo_post = 'ngo-post'
    ngrok = 'ngrok'
    nhadatso = 'nhadatso'
    niantic = 'niantic'
    niconico_douga = 'niconico-douga'
    nielsen = 'nielsen'
    nieuwsblad = 'nieuwsblad'
    nifty = 'nifty'
    nigeremploi = 'nigeremploi'
    nike = 'nike'
    nikkei = 'nikkei'
    nimbuzz_web = 'nimbuzz-web'
    ning = 'ning'
    nintendo = 'nintendo'
    njuskalo = 'njuskalo'
    nlockmgr = 'nlockmgr'
    nlsp = 'nlsp'
    nntp = 'nntp'
    nntps = 'nntps'
    noa = 'noa'
    nod32_update = 'nod32-update'
    nokia = 'nokia'
    nonghyup_bank = 'nonghyup-bank'
    nordea = 'nordea'
    norton_update = 'norton-update'
    noticias24 = 'noticias24'
    novinky = 'novinky'
    nownews = 'nownews'
    nrdp = 'nrdp'
    nrk = 'nrk'
    nrl = 'nrl'
    nrpe = 'nrpe'
    nrttv = 'nrttv'
    nsfnet_igp = 'nsfnet-igp'
    nsh = 'nsh'
    nspi = 'nspi'
    ntd = 'ntd'
    ntp = 'ntp'
    ntv = 'ntv'
    ntvbd = 'ntvbd'
    nu = 'nu'
    nuomi = 'nuomi'
    nur = 'nur'
    nust = 'nust'
    nvp_ii = 'nvp-ii'
    nyasatimes = 'nyasatimes'
    nydailynews = 'nydailynews'
    nytimes = 'nytimes'
    nzherald = 'nzherald'
    ocs = 'ocs'
    ocsp = 'ocsp'
    octopz = 'octopz'
    octoshape = 'octoshape'
    odnoklassniki = 'odnoklassniki'
    odsiebie_najlepsze_net = 'odsiebie-najlepsze-net'
    office_docs = 'office-docs'
    office365 = 'office365'
    officedepot = 'officedepot'
    offnews = 'offnews'
    oicq = 'oicq'
    okcupid = 'okcupid'
    okezone = 'okezone'
    okta = 'okta'
    okwave = 'okwave'
    olark = 'olark'
    olx = 'olx'
    onclickads = 'onclickads'
    onedio = 'onedio'
    onedrive = 'onedrive'
    onef_bf = 'onef-bf'
    onehub = 'onehub'
    onelife = 'onelife'
    onet = 'onet'
    oneworld_org = 'oneworld-org'
    onlinedown = 'onlinedown'
    onlinekhabar = 'onlinekhabar'
    onliner = 'onliner'
    onlive = 'onlive'
    ontests = 'ontests'
    oovoo = 'oovoo'
    ooyala = 'ooyala'
    opc_classic = 'opc-classic'
    opcua = 'opcua'
    open_diary = 'open-diary'
    openbsd_update = 'openbsd-update'
    openft = 'openft'
    opengw = 'opengw'
    openrice = 'openrice'
    openrtb = 'openrtb'
    opensooq = 'opensooq'
    openstreetmap = 'openstreetmap'
    openvpn = 'openvpn'
    openx = 'openx'
    opera_mobile_store = 'opera-mobile-store'
    opera_turbo = 'opera-turbo'
    opera_update = 'opera-update'
    oppetarkiv = 'oppetarkiv'
    optimicdn = 'optimicdn'
    optimizely = 'optimizely'
    optus = 'optus'
    oracle = 'oracle'
    oracle_oem = 'oracle-oem'
    oracle_rac = 'oracle-rac'
    orange = 'orange'
    orangemail = 'orangemail'
    orb = 'orb'
    orf = 'orf'
    oriental_daily = 'oriental-daily'
    origin = 'origin'
    origjinale = 'origjinale'
    origo = 'origo'
    orkut = 'orkut'
    osinl = 'osinl'
    ospf = 'ospf'
    oto_global = 'oto-global'
    ouedkniss = 'ouedkniss'
    outbrain = 'outbrain'
    outeverywhere = 'outeverywhere'
    outlook = 'outlook'
    ovaciondigital = 'ovaciondigital'
    over_blog = 'over-blog'
    owa = 'owa'
    ows = 'ows'
    oxu = 'oxu'
    padabum = 'padabum'
    paipai = 'paipai'
    paltalk = 'paltalk'
    paltalk_audio = 'paltalk-audio'
    paltalk_transfer = 'paltalk-transfer'
    paltalk_video = 'paltalk-video'
    palweather = 'palweather'
    panda_update = 'panda-update'
    pandora = 'pandora'
    pandora_tv = 'pandora-tv'
    panet = 'panet'
    panoramio = 'panoramio'
    pantip = 'pantip'
    pap = 'pap'
    paraguay = 'paraguay'
    parse = 'parse'
    partis = 'partis'
    partnerup = 'partnerup'
    party_poker = 'party-poker'
    passportstamp = 'passportstamp'
    pastebin = 'pastebin'
    pastebin_posting = 'pastebin-posting'
    path = 'path'
    payeasy = 'payeasy'
    paypal = 'paypal'
    pazar3 = 'pazar3'
    pbx = 'pbx'
    pcanywhere = 'pcanywhere'
    pccc = 'pccc'
    pcgames = 'pcgames'
    pchome = 'pchome'
    pclady = 'pclady'
    pcloud = 'pcloud'
    pconline = 'pconline'
    pd_proxy = 'pd-proxy'
    peacefmonline = 'peacefmonline'
    pearsonvue = 'pearsonvue'
    peercast = 'peercast'
    peerguardian = 'peerguardian'
    pengyou = 'pengyou'
    people = 'people'
    perfect_dark = 'perfect-dark'
    perfect_world_ent = 'perfect-world-ent'
    perforce = 'perforce'
    perform = 'perform'
    perfspot = 'perfspot'
    periscope = 'periscope'
    persianblog = 'persianblog'
    petitesannonces = 'petitesannonces'
    peyvandha = 'peyvandha'
    pgm = 'pgm'
    philenews = 'philenews'
    photobucket = 'photobucket'
    phproxy = 'phproxy'
    phweet = 'phweet'
    pi_af = 'pi-af'
    pi_data = 'pi-data'
    pichat = 'pichat'
    pik = 'pik'
    pim = 'pim'
    pimang = 'pimang'
    pingsta = 'pingsta'
    pinterest = 'pinterest'
    piolet = 'piolet'
    pipe = 'pipe'
    pixiv = 'pixiv'
    pixnet = 'pixnet'
    plants_vs_zombies = 'plants-vs-zombies'
    plaxo = 'plaxo'
    playstation = 'playstation'
    plentyoffish = 'plentyoffish'
    plius = 'plius'
    plurk = 'plurk'
    pmhotnews = 'pmhotnews'
    pnni = 'pnni'
    poco = 'poco'
    pogo = 'pogo'
    point = 'point'
    pokemon_go = 'pokemon-go'
    poker_stars = 'poker-stars'
    pole_emploi = 'pole-emploi'
    politis_news = 'politis-news'
    pop3 = 'pop3'
    pop3s = 'pop3s'
    popads = 'popads'
    porn555 = 'porn555'
    pornhub = 'pornhub'
    pornhub_network = 'pornhub-network'
    pornsurvey = 'pornsurvey'
    portalanalitika = 'portalanalitika'
    portmap = 'portmap'
    postgres = 'postgres'
    postimees = 'postimees'
    pou = 'pou'
    power_bi = 'power-bi'
    powerpoint_online = 'powerpoint-online'
    pp = 'pp'
    ppfilm = 'ppfilm'
    pplive = 'pplive'
    ppomppu = 'ppomppu'
    ppp = 'ppp'
    pppoe = 'pppoe'
    ppstream = 'ppstream'
    pptv = 'pptv'
    prensa = 'prensa'
    prensalibre = 'prensalibre'
    press24 = 'press24'
    pressan = 'pressan'
    priceminister = 'priceminister'
    pricerunner = 'pricerunner'
    primewire = 'primewire'
    print_io = 'print-io'
    private_enc = 'private-enc'
    privax = 'privax'
    prm = 'prm'
    profinet = 'profinet'
    pronto = 'pronto'
    propertyguru = 'propertyguru'
    prothom_alo = 'prothom-alo'
    protothema = 'protothema'
    proxeasy = 'proxeasy'
    proxono = 'proxono'
    psiphon = 'psiphon'
    psn = 'psn'
    psyonix = 'psyonix'
    ptp = 'ptp'
    ptt = 'ptt'
    public_lu = 'public-lu'
    publinews = 'publinews'
    pubmatic = 'pubmatic'
    puls24 = 'puls24'
    pulse_com_gh = 'pulse-com-gh'
    pulsepoint = 'pulsepoint'
    punyumunyu = 'punyumunyu'
    pup = 'pup'
    putlocker = 'putlocker'
    puzzle_and_dragon = 'puzzle-and-dragon'
    pvp = 'pvp'
    pwe = 'pwe'
    pwi = 'pwi'
    q931 = 'q931'
    qatarairways = 'qatarairways'
    qatarliving = 'qatarliving'
    qik_video = 'qik-video'
    qiniu = 'qiniu'
    qnx = 'qnx'
    qoo10 = 'qoo10'
    qq = 'qq'
    qq_blog = 'qq-blog'
    qq_dancer = 'qq-dancer'
    qq_finance = 'qq-finance'
    qq_games = 'qq-games'
    qq_lady = 'qq-lady'
    qq_mail = 'qq-mail'
    qq_news = 'qq-news'
    qq_r2 = 'qq-r2'
    qq_speed = 'qq-speed'
    qq_web = 'qq-web'
    qq_weibo = 'qq-weibo'
    qqdownload = 'qqdownload'
    qqlive = 'qqlive'
    qqmusic = 'qqmusic'
    qqstream = 'qqstream'
    qqvideo = 'qqvideo'
    qtrax = 'qtrax'
    quake = 'quake'
    quantcast = 'quantcast'
    quantum_dxi_ost = 'quantum-dxi-ost'
    quarterlife = 'quarterlife'
    quic = 'quic'
    quickflix = 'quickflix'
    quizup = 'quizup'
    qunar = 'qunar'
    qvod = 'qvod'
    qzone = 'qzone'
    r10 = 'r10'
    rabo_bankieren = 'rabo-bankieren'
    rackspace = 'rackspace'
    radiko = 'radiko'
    radio_bethlehem_2000 = 'radio-bethlehem-2000'
    radio1 = 'radio1'
    radiookapi = 'radiookapi'
    radiumone = 'radiumone'
    radius = 'radius'
    radiusim = 'radiusim'
    radmin = 'radmin'
    rainbow = 'rainbow'
    rakuten = 'rakuten'
    ramallah = 'ramallah'
    rambler = 'rambler'
    rambler_webmail = 'rambler-webmail'
    ranap = 'ranap'
    rapidshare = 'rapidshare'
    rappler = 'rappler'
    ratopati = 'ratopati'
    raulken = 'raulken'
    ravelry = 'ravelry'
    raya = 'raya'
    rayfile = 'rayfile'
    rcsc = 'rcsc'
    rdp = 'rdp'
    rdt = 'rdt'
    realestate = 'realestate'
    realtor = 'realtor'
    realvnc = 'realvnc'
    reddit = 'reddit'
    redhat_update = 'redhat-update'
    redtube = 'redtube'
    reflected_networks = 'reflected-networks'
    reklama5 = 'reklama5'
    renren = 'renren'
    repubblica = 'repubblica'
    republika = 'republika'
    republika_slovenija = 'republika-slovenija'
    researchgate = 'researchgate'
    retroshare = 'retroshare'
    reuters = 'reuters'
    revcontent = 'revcontent'
    reverbnation = 'reverbnation'
    reverso = 'reverso'
    revolico = 'revolico'
    rfb = 'rfb'
    rhapsody = 'rhapsody'
    ricardo = 'ricardo'
    riffsy = 'riffsy'
    rimnow = 'rimnow'
    ringring = 'ringring'
    rip1 = 'rip1'
    rip2 = 'rip2'
    ripng1 = 'ripng1'
    rlcdn = 'rlcdn'
    rlogin = 'rlogin'
    rlp = 'rlp'
    rmi_iiop = 'rmi-iiop'
    rmix = 'rmix'
    rmvbusters = 'rmvbusters'
    roboform = 'roboform'
    rocket_league = 'rocket-league'
    rockyou = 'rockyou'
    rogers = 'rogers'
    rohc = 'rohc'
    rolloid = 'rolloid'
    rollout = 'rollout'
    rovi = 'rovi'
    rovio = 'rovio'
    royalgazette = 'royalgazette'
    royanews = 'royanews'
    rozetka = 'rozetka'
    rpc = 'rpc'
    rpl = 'rpl'
    rquota = 'rquota'
    rsh = 'rsh'
    rss = 'rss'
    rstat = 'rstat'
    rsvp = 'rsvp'
    rsvp_e2e_ignore = 'rsvp-e2e-ignore'
    rsync = 'rsync'
    rt = 'rt'
    rtcp = 'rtcp'
    rtl = 'rtl'
    rtmp = 'rtmp'
    rtvslo = 'rtvslo'
    rubiconproject = 'rubiconproject'
    rudaw = 'rudaw'
    runescape = 'runescape'
    rusers = 'rusers'
    ruten = 'ruten'
    rutracker = 'rutracker'
    ruv = 'ruv'
    rvd = 'rvd'
    ryanair = 'ryanair'
    ryze = 'ryze'
    s_oman = 's-oman'
    s1ap = 's1ap'
    s7comm = 's7comm'
    saavn_music = 'saavn-music'
    sabah = 'sabah'
    sabameeting = 'sabameeting'
    sabay = 'sabay'
    saberindo = 'saberindo'
    sabq = 'sabq'
    safaricom = 'safaricom'
    safewebonline = 'safewebonline'
    sahafah = 'sahafah'
    saharamedias = 'saharamedias'
    sahibinden = 'sahibinden'
    saitebi = 'saitebi'
    sakura_ne = 'sakura-ne'
    salamnews = 'salamnews'
    salesforce = 'salesforce'
    salesforce_chatter = 'salesforce-chatter'
    samanews = 'samanews'
    sameerbook = 'sameerbook'
    samsung = 'samsung'
    samsung_apps = 'samsung-apps'
    samsung_update = 'samsung-update'
    sana = 'sana'
    sanjesh = 'sanjesh'
    sanook = 'sanook'
    sap = 'sap'
    sapo = 'sapo'
    sarahanews = 'sarahanews'
    sarayanews = 'sarayanews'
    sat_expak = 'sat-expak'
    sat_mon = 'sat-mon'
    savefile_com = 'savefile-com'
    savefrom = 'savefrom'
    sayclub = 'sayclub'
    sbs = 'sbs'
    sbs_au = 'sbs-au'
    scc_sp = 'scc-sp'
    sccm = 'sccm'
    sccp_ss7 = 'sccp-ss7'
    scenehd = 'scenehd'
    scheduled_tp = 'scheduled-tp'
    sciencestage = 'sciencestage'
    scispace = 'scispace'
    scorecardresearch = 'scorecardresearch'
    scotiabank = 'scotiabank'
    scps = 'scps'
    scribd = 'scribd'
    sctp = 'sctp'
    sde = 'sde'
    sdo = 'sdo'
    sdrp = 'sdrp'
    searchnu = 'searchnu'
    secondlife = 'secondlife'
    secure_vmtp = 'secure-vmtp'
    seeqpod = 'seeqpod'
    seesaa = 'seesaa'
    segye = 'segye'
    sekindo = 'sekindo'
    sendspace = 'sendspace'
    senego = 'senego'
    seneweb = 'seneweb'
    seoul_news = 'seoul-news'
    setopati = 'setopati'
    seznam = 'seznam'
    sfr = 'sfr'
    sgcarmart = 'sgcarmart'
    shabiba = 'shabiba'
    shaparak = 'shaparak'
    share = 'share'
    sharebee_com = 'sharebee-com'
    sharebox = 'sharebox'
    sharefile_com = 'sharefile-com'
    shareman = 'shareman'
    sharepoint = 'sharepoint'
    sharepoint_admin = 'sharepoint-admin'
    sharepoint_blog = 'sharepoint-blog'
    sharepoint_calendar = 'sharepoint-calendar'
    sharepoint_document = 'sharepoint-document'
    sharepoint_online = 'sharepoint-online'
    sharereactor = 'sharereactor'
    sharethrough = 'sharethrough'
    shasha = 'shasha'
    shazam = 'shazam'
    shekulli = 'shekulli'
    shelfari = 'shelfari'
    shim6 = 'shim6'
    shinhan = 'shinhan'
    shobiddak = 'shobiddak'
    shop_com_mm = 'shop-com-mm'
    shopee = 'shopee'
    shoutcast = 'shoutcast'
    showmypc = 'showmypc'
    showtime_anytime = 'showtime-anytime'
    shqiperiaime = 'shqiperiaime'
    shutterfly = 'shutterfly'
    shutterstock = 'shutterstock'
    siebel_crm = 'siebel-crm'
    sigmalive = 'sigmalive'
    signal = 'signal'
    signal_private_messenger = 'signal-private-messenger'
    silverlight = 'silverlight'
    simperium = 'simperium'
    simple_msg_p = 'simple-msg-p'
    simple_speedtest = 'simple-speedtest'
    sina = 'sina'
    sina_blog = 'sina-blog'
    sina_finance = 'sina-finance'
    sina_news = 'sina-news'
    sina_video = 'sina-video'
    sina_webmail = 'sina-webmail'
    sina_weibo = 'sina-weibo'
    sinoptik = 'sinoptik'
    siol = 'siol'
    sip_soap = 'sip-soap'
    sistic = 'sistic'
    sitel = 'sitel'
    sizmek = 'sizmek'
    skee_ball_arcade = 'skee-ball-arcade'
    skelbiu = 'skelbiu'
    skip = 'skip'
    skroutz = 'skroutz'
    sky = 'sky'
    sky_player = 'sky-player'
    skyblog = 'skyblog'
    skycn = 'skycn'
    skynewsarabia = 'skynewsarabia'
    skype = 'skype'
    slack = 'slack'
    slacker = 'slacker'
    sld = 'sld'
    slideshare = 'slideshare'
    slingbox = 'slingbox'
    slsk = 'slsk'
    sm = 'sm'
    smaato = 'smaato'
    smartadserver = 'smartadserver'
    smartalk = 'smartalk'
    smashcast = 'smashcast'
    smb = 'smb'
    smb_direct = 'smb-direct'
    sme = 'sme'
    smh = 'smh'
    smpp = 'smpp'
    smtp = 'smtp'
    smtps = 'smtps'
    sna = 'sna'
    snap = 'snap'
    snap_vpn = 'snap-vpn'
    snapchat = 'snapchat'
    snmp = 'snmp'
    snow = 'snow'
    snp = 'snp'
    snpp = 'snpp'
    soap = 'soap'
    socialtv = 'socialtv'
    socks2http = 'socks2http'
    socks4 = 'socks4'
    socks5 = 'socks5'
    soft4fun = 'soft4fun'
    softbank = 'softbank'
    softonic = 'softonic'
    softros_messenger = 'softros-messenger'
    sogou = 'sogou'
    sohu = 'sohu'
    sohu_blog = 'sohu-blog'
    soku = 'soku'
    solarwinds = 'solarwinds'
    somalijobs = 'somalijobs'
    somon = 'somon'
    somud = 'somud'
    sonet_ne = 'sonet-ne'
    sonico = 'sonico'
    sonmp = 'sonmp'
    sonobi = 'sonobi'
    sopcast = 'sopcast'
    sophos_update = 'sophos-update'
    soribada = 'soribada'
    soso = 'soso'
    soufun = 'soufun'
    soundcloud = 'soundcloud'
    souq = 'souq'
    sourceforge = 'sourceforge'
    southwest = 'southwest'
    soy502 = 'soy502'
    sp = 'sp'
    spdy = 'spdy'
    speedcheck_internet = 'speedcheck-internet'
    speedtest = 'speedtest'
    spid = 'spid'
    spiegel = 'spiegel'
    splunk = 'splunk'
    splunk_cloud = 'splunk-cloud'
    splunk_ufwd = 'splunk-ufwd'
    sportal = 'sportal'
    sportchosun = 'sportchosun'
    sportpesa = 'sportpesa'
    sportradar = 'sportradar'
    sportsillustrated = 'sportsillustrated'
    sportsseoul = 'sportsseoul'
    spotflux = 'spotflux'
    spotify = 'spotify'
    spotxchange = 'spotxchange'
    spredfast = 'spredfast'
    sprint = 'sprint'
    sprite_rpc = 'sprite-rpc'
    sps = 'sps'
    spynet = 'spynet'
    sqli = 'sqli'
    square = 'square'
    squirrelmail = 'squirrelmail'
    squirrelsystems = 'squirrelsystems'
    srp = 'srp'
    srvloc = 'srvloc'
    ss = 'ss'
    sscopmce = 'sscopmce'
    ssdp = 'ssdp'
    ssh = 'ssh'
    ssl = 'ssl'
    st = 'st'
    st_lucia_news_online = 'st-lucia-news-online'
    stackexchange = 'stackexchange'
    stackoverflow = 'stackoverflow'
    stafaband = 'stafaband'
    stagevu = 'stagevu'
    standardmedia = 'standardmedia'
    starcraft2 = 'starcraft2'
    starnieuws = 'starnieuws'
    startimes = 'startimes'
    state_bank_of_india = 'state-bank-of-india'
    stayfriends = 'stayfriends'
    stealthnet = 'stealthnet'
    steam = 'steam'
    stick_cricket = 'stick-cricket'
    stickam = 'stickam'
    stickyads = 'stickyads'
    stockq = 'stockq'
    storytel = 'storytel'
    stp = 'stp'
    streamaudio = 'streamaudio'
    streamrail = 'streamrail'
    streamroot = 'streamroot'
    studivz = 'studivz'
    stuff = 'stuff'
    stumbleupon = 'stumbleupon'
    stun = 'stun'
    stupid_videos = 'stupid-videos'
    sua = 'sua'
    subway_surfers = 'subway-surfers'
    sugar_crm = 'sugar-crm'
    sugar_sync = 'sugar-sync'
    sugklonistiko = 'sugklonistiko'
    sun_nd = 'sun-nd'
    sun_online = 'sun-online'
    suning = 'suning'
    super = 'super'
    super_mario_run = 'super-mario-run'
    supercell = 'supercell'
    suppersoccer = 'suppersoccer'
    suresome = 'suresome'
    surrogafier = 'surrogafier'
    surveymonkey = 'surveymonkey'
    svcctl = 'svcctl'
    svn = 'svn'
    svtplay = 'svtplay'
    swedbank = 'swedbank'
    swepiracy = 'swepiracy'
    swipe = 'swipe'
    switch_concepts = 'switch-concepts'
    sybase = 'sybase'
    symantec = 'symantec'
    symantec_sep = 'symantec-sep'
    sync = 'sync'
    syri = 'syri'
    syslog = 'syslog'
    t_mobile_app = 't-mobile-app'
    t_mobile_cloud = 't-mobile-cloud'
    t_online = 't-online'
    t38 = 't38'
    tabelog = 'tabelog'
    taboola = 'taboola'
    tacacs_plus = 'tacacs-plus'
    tagged = 'tagged'
    tagoo = 'tagoo'
    tahiti_infos = 'tahiti-infos'
    taiwanlottery = 'taiwanlottery'
    tajfile = 'tajfile'
    takealot = 'takealot'
    taku_file_bin = 'taku-file-bin'
    talabat = 'talabat'
    talenttrove = 'talenttrove'
    talkbiznow = 'talkbiznow'
    talkbox = 'talkbox'
    talkray = 'talkray'
    taltopia = 'taltopia'
    tamilthunder_com = 'tamilthunder-com'
    tamtaminfo = 'tamtaminfo'
    tango = 'tango'
    tanium = 'tanium'
    tanx = 'tanx'
    taobao = 'taobao'
    tapatalk = 'tapatalk'
    tapchisao = 'tapchisao'
    taqadoumi = 'taqadoumi'
    taringa = 'taringa'
    tasweernews = 'tasweernews'
    tawary = 'tawary'
    tayara = 'tayara'
    tayyar = 'tayyar'
    tbs = 'tbs'
    tcf = 'tcf'
    tchatche = 'tchatche'
    tcp = 'tcp'
    tcp_over_dns = 'tcp-over-dns'
    tds = 'tds'
    teachertube = 'teachertube'
    teachstreet = 'teachstreet'
    teads = 'teads'
    tealium = 'tealium'
    teamspeak = 'teamspeak'
    teamspeak_v3 = 'teamspeak-v3'
    teamviewer = 'teamviewer'
    tebyan = 'tebyan'
    techinline = 'techinline'
    telegraaf = 'telegraaf'
    telegraf = 'telegraf'
    telegrafi = 'telegrafi'
    telegram = 'telegram'
    telestream = 'telestream'
    teletica = 'teletica'
    telnet = 'telnet'
    telnets = 'telnets'
    teltel = 'teltel'
    temasys = 'temasys'
    tempointeraktif = 'tempointeraktif'
    tencent = 'tencent'
    tenor = 'tenor'
    teredo = 'teredo'
    textme = 'textme'
    textplus = 'textplus'
    tf1 = 'tf1'
    tftp = 'tftp'
    tgbus = 'tgbus'
    thadinatin = 'thadinatin'
    the_simpsons_tapped_out = 'the-simpsons-tapped-out'
    the_star = 'the-star'
    theladbible = 'theladbible'
    themasports = 'themasports'
    thepiratebay = 'thepiratebay'
    thethao247 = 'thethao247'
    thevideos = 'thevideos'
    think = 'think'
    thithtoolwin = 'thithtoolwin'
    three = 'three'
    threema = 'threema'
    thrift = 'thrift'
    thunder = 'thunder'
    ti_les_twra = 'ti-les-twra'
    tiange_9158 = 'tiange-9158'
    tianya = 'tianya'
    tibcordv = 'tibcordv'
    ticketmonster = 'ticketmonster'
    tidal = 'tidal'
    tidaltv = 'tidaltv'
    tiempo = 'tiempo'
    tigerair = 'tigerair'
    tikl = 'tikl'
    time = 'time'
    timesofmalta = 'timesofmalta'
    timesofoman = 'timesofoman'
    tinder = 'tinder'
    tistory = 'tistory'
    tlsp = 'tlsp'
    tmall = 'tmall'
    tn8 = 'tn8'
    tns = 'tns'
    tntdrama = 'tntdrama'
    tnvip = 'tnvip'
    to_mati = 'to-mati'
    tocmai = 'tocmai'
    toggle = 'toggle'
    tokbox = 'tokbox'
    tokobagus = 'tokobagus'
    tokopedia = 'tokopedia'
    tonaton = 'tonaton'
    top_channel = 'top-channel'
    topfmradio = 'topfmradio'
    topky = 'topky'
    topvideo = 'topvideo'
    topvldeo = 'topvldeo'
    tor = 'tor'
    tor2web = 'tor2web'
    torg = 'torg'
    tori = 'tori'
    torrent9 = 'torrent9'
    torrentdownloads = 'torrentdownloads'
    torrentkim5 = 'torrentkim5'
    torrentz = 'torrentz'
    tothemaonline = 'tothemaonline'
    touch = 'touch'
    tower_of_saviors = 'tower-of-saviors'
    tp_plus_plus = 'tp-plus-plus'
    trackingclick = 'trackingclick'
    trademe = 'trademe'
    trafficfactory = 'trafficfactory'
    trafficjunky = 'trafficjunky'
    trai_myspeed = 'trai-myspeed'
    transferbigfiles_com = 'transferbigfiles-com'
    travbuddy = 'travbuddy'
    travellerspoint = 'travellerspoint'
    travelocity = 'travelocity'
    travian = 'travian'
    trend = 'trend'
    trendmicro_update = 'trendmicro-update'
    tribair = 'tribair'
    tribe = 'tribe'
    tribunnews = 'tribunnews'
    trinidadexpress = 'trinidadexpress'
    trinituner = 'trinituner'
    trippy = 'trippy'
    trombi = 'trombi'
    trunk_1 = 'trunk-1'
    trunk_2 = 'trunk-2'
    truste = 'truste'
    ts = 'ts'
    tu = 'tu'
    tube8 = 'tube8'
    tubemogul = 'tubemogul'
    tuberel = 'tuberel'
    tudou = 'tudou'
    tuenti = 'tuenti'
    tukif = 'tukif'
    tuko = 'tuko'
    tumblr = 'tumblr'
    tune = 'tune'
    tune_inc = 'tune-inc'
    tunein = 'tunein'
    tunewiki = 'tunewiki'
    tunigate = 'tunigate'
    tunisia_sat = 'tunisia-sat'
    turbo = 'turbo'
    turbo_vpn = 'turbo-vpn'
    turbobit = 'turbobit'
    turn = 'turn'
    turner = 'turner'
    tut = 'tut'
    tv = 'tv'
    tv2 = 'tv2'
    tv3 = 'tv3'
    tv4play = 'tv4play'
    tvants = 'tvants'
    tvb = 'tvb'
    tvcatchup = 'tvcatchup'
    tvking = 'tvking'
    tvm = 'tvm'
    tvn_noticias = 'tvn-noticias'
    tvnet = 'tvnet'
    tvuplayer = 'tvuplayer'
    twipple = 'twipple'
    twitch = 'twitch'
    twitpic = 'twitpic'
    twitter = 'twitter'
    twoo = 'twoo'
    txxx = 'txxx'
    uaudp = 'uaudp'
    uaudp_rtp = 'uaudp-rtp'
    uber = 'uber'
    ubuntu = 'ubuntu'
    uc_browser = 'uc-browser'
    ucoz = 'ucoz'
    ucp = 'ucp'
    udn = 'udn'
    udp = 'udp'
    udplite = 'udplite'
    ukr = 'ukr'
    ukwezi = 'ukwezi'
    ulp = 'ulp'
    ultimahora = 'ultimahora'
    ultrashare_net = 'ultrashare-net'
    ultrasurf = 'ultrasurf'
    umac = 'umac'
    umeng = 'umeng'
    umuryango = 'umuryango'
    umuseke = 'umuseke'
    unameeexico = 'unameeexico'
    unamibia = 'unamibia'
    unassigned_ip_prot_143 = 'unassigned-ip-prot-143'
    unassigned_ip_prot_144 = 'unassigned-ip-prot-144'
    unassigned_ip_prot_145 = 'unassigned-ip-prot-145'
    unassigned_ip_prot_146 = 'unassigned-ip-prot-146'
    unassigned_ip_prot_147 = 'unassigned-ip-prot-147'
    unassigned_ip_prot_148 = 'unassigned-ip-prot-148'
    unassigned_ip_prot_149 = 'unassigned-ip-prot-149'
    unassigned_ip_prot_150 = 'unassigned-ip-prot-150'
    unassigned_ip_prot_151 = 'unassigned-ip-prot-151'
    unassigned_ip_prot_152 = 'unassigned-ip-prot-152'
    unassigned_ip_prot_153 = 'unassigned-ip-prot-153'
    unassigned_ip_prot_154 = 'unassigned-ip-prot-154'
    unassigned_ip_prot_155 = 'unassigned-ip-prot-155'
    unassigned_ip_prot_156 = 'unassigned-ip-prot-156'
    unassigned_ip_prot_157 = 'unassigned-ip-prot-157'
    unassigned_ip_prot_158 = 'unassigned-ip-prot-158'
    unassigned_ip_prot_159 = 'unassigned-ip-prot-159'
    unassigned_ip_prot_160 = 'unassigned-ip-prot-160'
    unassigned_ip_prot_161 = 'unassigned-ip-prot-161'
    unassigned_ip_prot_162 = 'unassigned-ip-prot-162'
    unassigned_ip_prot_163 = 'unassigned-ip-prot-163'
    unassigned_ip_prot_164 = 'unassigned-ip-prot-164'
    unassigned_ip_prot_165 = 'unassigned-ip-prot-165'
    unassigned_ip_prot_166 = 'unassigned-ip-prot-166'
    unassigned_ip_prot_167 = 'unassigned-ip-prot-167'
    unassigned_ip_prot_168 = 'unassigned-ip-prot-168'
    unassigned_ip_prot_169 = 'unassigned-ip-prot-169'
    unassigned_ip_prot_170 = 'unassigned-ip-prot-170'
    unassigned_ip_prot_171 = 'unassigned-ip-prot-171'
    unassigned_ip_prot_172 = 'unassigned-ip-prot-172'
    unassigned_ip_prot_173 = 'unassigned-ip-prot-173'
    unassigned_ip_prot_174 = 'unassigned-ip-prot-174'
    unassigned_ip_prot_175 = 'unassigned-ip-prot-175'
    unassigned_ip_prot_176 = 'unassigned-ip-prot-176'
    unassigned_ip_prot_177 = 'unassigned-ip-prot-177'
    unassigned_ip_prot_178 = 'unassigned-ip-prot-178'
    unassigned_ip_prot_179 = 'unassigned-ip-prot-179'
    unassigned_ip_prot_180 = 'unassigned-ip-prot-180'
    unassigned_ip_prot_181 = 'unassigned-ip-prot-181'
    unassigned_ip_prot_182 = 'unassigned-ip-prot-182'
    unassigned_ip_prot_183 = 'unassigned-ip-prot-183'
    unassigned_ip_prot_184 = 'unassigned-ip-prot-184'
    unassigned_ip_prot_185 = 'unassigned-ip-prot-185'
    unassigned_ip_prot_186 = 'unassigned-ip-prot-186'
    unassigned_ip_prot_187 = 'unassigned-ip-prot-187'
    unassigned_ip_prot_188 = 'unassigned-ip-prot-188'
    unassigned_ip_prot_189 = 'unassigned-ip-prot-189'
    unassigned_ip_prot_190 = 'unassigned-ip-prot-190'
    unassigned_ip_prot_191 = 'unassigned-ip-prot-191'
    unassigned_ip_prot_192 = 'unassigned-ip-prot-192'
    unassigned_ip_prot_193 = 'unassigned-ip-prot-193'
    unassigned_ip_prot_194 = 'unassigned-ip-prot-194'
    unassigned_ip_prot_195 = 'unassigned-ip-prot-195'
    unassigned_ip_prot_196 = 'unassigned-ip-prot-196'
    unassigned_ip_prot_197 = 'unassigned-ip-prot-197'
    unassigned_ip_prot_198 = 'unassigned-ip-prot-198'
    unassigned_ip_prot_199 = 'unassigned-ip-prot-199'
    unassigned_ip_prot_200 = 'unassigned-ip-prot-200'
    unassigned_ip_prot_201 = 'unassigned-ip-prot-201'
    unassigned_ip_prot_202 = 'unassigned-ip-prot-202'
    unassigned_ip_prot_203 = 'unassigned-ip-prot-203'
    unassigned_ip_prot_204 = 'unassigned-ip-prot-204'
    unassigned_ip_prot_205 = 'unassigned-ip-prot-205'
    unassigned_ip_prot_206 = 'unassigned-ip-prot-206'
    unassigned_ip_prot_207 = 'unassigned-ip-prot-207'
    unassigned_ip_prot_208 = 'unassigned-ip-prot-208'
    unassigned_ip_prot_209 = 'unassigned-ip-prot-209'
    unassigned_ip_prot_210 = 'unassigned-ip-prot-210'
    unassigned_ip_prot_211 = 'unassigned-ip-prot-211'
    unassigned_ip_prot_212 = 'unassigned-ip-prot-212'
    unassigned_ip_prot_213 = 'unassigned-ip-prot-213'
    unassigned_ip_prot_214 = 'unassigned-ip-prot-214'
    unassigned_ip_prot_215 = 'unassigned-ip-prot-215'
    unassigned_ip_prot_216 = 'unassigned-ip-prot-216'
    unassigned_ip_prot_217 = 'unassigned-ip-prot-217'
    unassigned_ip_prot_218 = 'unassigned-ip-prot-218'
    unassigned_ip_prot_219 = 'unassigned-ip-prot-219'
    unassigned_ip_prot_220 = 'unassigned-ip-prot-220'
    unassigned_ip_prot_221 = 'unassigned-ip-prot-221'
    unassigned_ip_prot_222 = 'unassigned-ip-prot-222'
    unassigned_ip_prot_223 = 'unassigned-ip-prot-223'
    unassigned_ip_prot_224 = 'unassigned-ip-prot-224'
    unassigned_ip_prot_225 = 'unassigned-ip-prot-225'
    unassigned_ip_prot_226 = 'unassigned-ip-prot-226'
    unassigned_ip_prot_227 = 'unassigned-ip-prot-227'
    unassigned_ip_prot_228 = 'unassigned-ip-prot-228'
    unassigned_ip_prot_229 = 'unassigned-ip-prot-229'
    unassigned_ip_prot_230 = 'unassigned-ip-prot-230'
    unassigned_ip_prot_231 = 'unassigned-ip-prot-231'
    unassigned_ip_prot_232 = 'unassigned-ip-prot-232'
    unassigned_ip_prot_233 = 'unassigned-ip-prot-233'
    unassigned_ip_prot_234 = 'unassigned-ip-prot-234'
    unassigned_ip_prot_235 = 'unassigned-ip-prot-235'
    unassigned_ip_prot_236 = 'unassigned-ip-prot-236'
    unassigned_ip_prot_237 = 'unassigned-ip-prot-237'
    unassigned_ip_prot_238 = 'unassigned-ip-prot-238'
    unassigned_ip_prot_239 = 'unassigned-ip-prot-239'
    unassigned_ip_prot_240 = 'unassigned-ip-prot-240'
    unassigned_ip_prot_241 = 'unassigned-ip-prot-241'
    unassigned_ip_prot_242 = 'unassigned-ip-prot-242'
    unassigned_ip_prot_243 = 'unassigned-ip-prot-243'
    unassigned_ip_prot_244 = 'unassigned-ip-prot-244'
    unassigned_ip_prot_245 = 'unassigned-ip-prot-245'
    unassigned_ip_prot_246 = 'unassigned-ip-prot-246'
    unassigned_ip_prot_247 = 'unassigned-ip-prot-247'
    unassigned_ip_prot_248 = 'unassigned-ip-prot-248'
    unassigned_ip_prot_249 = 'unassigned-ip-prot-249'
    unassigned_ip_prot_250 = 'unassigned-ip-prot-250'
    unassigned_ip_prot_251 = 'unassigned-ip-prot-251'
    unassigned_ip_prot_252 = 'unassigned-ip-prot-252'
    unegui = 'unegui'
    united_internet = 'united-internet'
    universiti_brunei_darussalam = 'universiti-brunei-darussalam'
    university_of_botswana = 'university-of-botswana'
    univision = 'univision'
    unknown = 'unknown'
    unreal_engine = 'unreal-engine'
    unruly = 'unruly'
    uol = 'uol'
    uplive = 'uplive'
    upload_com = 'upload-com'
    uploaded_net = 'uploaded-net'
    uploading = 'uploading'
    uploadingit_com = 'uploadingit-com'
    uplynk = 'uplynk'
    upnp = 'upnp'
    uptobox = 'uptobox'
    uptodown = 'uptodown'
    urbanairship = 'urbanairship'
    urdupoint = 'urdupoint'
    usabit_com = 'usabit-com'
    usatoday = 'usatoday'
    usbmux = 'usbmux'
    usejump = 'usejump'
    usp = 'usp'
    ustream = 'ustream'
    uti = 'uti'
    utorrent = 'utorrent'
    utp = 'utp'
    uusee = 'uusee'
    uwi = 'uwi'
    uz_ac = 'uz-ac'
    v5ua = 'v5ua'
    vaguthu = 'vaguthu'
    vakaka = 'vakaka'
    vampirefreaks = 'vampirefreaks'
    vanguardngr = 'vanguardngr'
    varzesh3 = 'varzesh3'
    vbox7 = 'vbox7'
    vecer = 'vecer'
    vecernji = 'vecernji'
    vector = 'vector'
    veetle = 'veetle'
    ventrilo = 'ventrilo'
    veohtv = 'veohtv'
    verizon = 'verizon'
    vero = 'vero'
    vestniktm = 'vestniktm'
    vetogate = 'vetogate'
    vevo = 'vevo'
    vg = 'vg'
    viadeo = 'viadeo'
    viaplay = 'viaplay'
    viber = 'viber'
    videobash = 'videobash'
    videojug = 'videojug'
    videoland = 'videoland'
    videoplaza = 'videoplaza'
    videosurf = 'videosurf'
    videosz = 'videosz'
    vidmax = 'vidmax'
    vidme = 'vidme'
    vidyard = 'vidyard'
    vietbao = 'vietbao'
    viewpath = 'viewpath'
    viewster = 'viewster'
    vijesti = 'vijesti'
    vimeo = 'vimeo'
    vine = 'vine'
    vines = 'vines'
    visa = 'visa'
    visa_checkout = 'visa-checkout'
    visadd = 'visadd'
    visir = 'visir'
    vivanews = 'vivanews'
    vivox = 'vivox'
    vjc_comp = 'vjc-comp'
    vjc_uncomp = 'vjc-uncomp'
    vk_live = 'vk-live'
    vkontakte = 'vkontakte'
    vmotion = 'vmotion'
    vmtp = 'vmtp'
    vmware = 'vmware'
    vmware_horizon_view = 'vmware-horizon-view'
    vnetip = 'vnetip'
    vnexpress = 'vnexpress'
    voddler = 'voddler'
    vonage_mobile = 'vonage-mobile'
    vox = 'vox'
    voxer = 'voxer'
    vpn1_com = 'vpn1-com'
    vpnoverdns = 'vpnoverdns'
    vrrp = 'vrrp'
    vsee = 'vsee'
    vtun = 'vtun'
    vtunnel = 'vtunnel'
    vtv = 'vtv'
    vube = 'vube'
    vuiviet = 'vuiviet'
    vuze = 'vuze'
    vxlan = 'vxlan'
    vyew = 'vyew'
    vyke = 'vyke'
    vz_lt = 'vz-lt'
    wada = 'wada'
    wakoopa = 'wakoopa'
    walla = 'walla'
    wallstreetjournal = 'wallstreetjournal'
    wallstreetjournal_china = 'wallstreetjournal-china'
    walmart = 'walmart'
    wamba = 'wamba'
    wandoujia = 'wandoujia'
    wapa = 'wapa'
    wasabi = 'wasabi'
    washingtonpost = 'washingtonpost'
    wat = 'wat'
    wattan = 'wattan'
    wayn = 'wayn'
    waze = 'waze'
    wb_expak = 'wb-expak'
    wb_mon = 'wb-mon'
    wccp = 'wccp'
    weather = 'weather'
    weather2umbrella = 'weather2umbrella'
    weather4all = 'weather4all'
    web_crawler = 'web-crawler'
    web_de = 'web-de'
    webbiographies = 'webbiographies'
    webex = 'webex'
    webex_weboffice = 'webex-weboffice'
    weborama = 'weborama'
    websocket = 'websocket'
    webtretho = 'webtretho'
    wechat = 'wechat'
    weiphone = 'weiphone'
    wellsfargo = 'wellsfargo'
    weourfamily = 'weourfamily'
    werkenntwen = 'werkenntwen'
    wesp = 'wesp'
    westpac = 'westpac'
    wetransfer = 'wetransfer'
    wfc = 'wfc'
    whatsapp = 'whatsapp'
    whois = 'whois'
    wiiconnect24 = 'wiiconnect24'
    wikia = 'wikia'
    wikipedia = 'wikipedia'
    willhaben = 'willhaben'
    wimp = 'wimp'
    winamax = 'winamax'
    windows_azure = 'windows-azure'
    windows_marketplace = 'windows-marketplace'
    windows_update = 'windows-update'
    windowslive = 'windowslive'
    windowslivespace = 'windowslivespace'
    windowsmedia = 'windowsmedia'
    winmx = 'winmx'
    winny = 'winny'
    wins = 'wins'
    wix = 'wix'
    wixi = 'wixi'
    wmi = 'wmi'
    wooribank = 'wooribank'
    word_online = 'word-online'
    wordpress = 'wordpress'
    worksite = 'worksite'
    world_of_tanks = 'world-of-tanks'
    wow = 'wow'
    wp = 'wp'
    wretch = 'wretch'
    wrike = 'wrike'
    wsman = 'wsman'
    wsn = 'wsn'
    wsop = 'wsop'
    wsp = 'wsp'
    wtls = 'wtls'
    wtp = 'wtp'
    wtv = 'wtv'
    x_vpn = 'x-vpn'
    x11 = 'x11'
    x25 = 'x25'
    xanga = 'xanga'
    xbox = 'xbox'
    xbox_music = 'xbox-music'
    xbox_video = 'xbox-video'
    xboxlive = 'xboxlive'
    xboxlive_marketplace = 'xboxlive-marketplace'
    xcams = 'xcams'
    xcap = 'xcap'
    xdmcp = 'xdmcp'
    xendan = 'xendan'
    xfs = 'xfs'
    xhamster = 'xhamster'
    xiami = 'xiami'
    xiaomi = 'xiaomi'
    xing = 'xing'
    xinhuanet = 'xinhuanet'
    xinnet = 'xinnet'
    xiph = 'xiph'
    xl = 'xl'
    xl_nonton = 'xl-nonton'
    xl_wap = 'xl-wap'
    xl_webmail = 'xl-webmail'
    xl_webportal = 'xl-webportal'
    xlnet = 'xlnet'
    xlovecam = 'xlovecam'
    xm_radio = 'xm-radio'
    xmcp = 'xmcp'
    xmlrpc = 'xmlrpc'
    xnet = 'xnet'
    xns = 'xns'
    xns_idp = 'xns-idp'
    xnxx = 'xnxx'
    xopom = 'xopom'
    xot = 'xot'
    xrea = 'xrea'
    xt3 = 'xt3'
    xtp = 'xtp'
    xuite = 'xuite'
    xvideos = 'xvideos'
    xvideoslive = 'xvideoslive'
    xyplex = 'xyplex'
    y8 = 'y8'
    yadro = 'yadro'
    yahoo = 'yahoo'
    yahoo_answers = 'yahoo-answers'
    yahoo_buy = 'yahoo-buy'
    yahoo_douga = 'yahoo-douga'
    yahoo_games = 'yahoo-games'
    yahoo_geocities = 'yahoo-geocities'
    yahoo_groups = 'yahoo-groups'
    yahoo_korea = 'yahoo-korea'
    yahoo_maps = 'yahoo-maps'
    yahoo_realestate = 'yahoo-realestate'
    yahoo_screen = 'yahoo-screen'
    yahoo_search = 'yahoo-search'
    yahoo_stock_tw = 'yahoo-stock-tw'
    yahoo_travel = 'yahoo-travel'
    yahoo360plusvietnam = 'yahoo360plusvietnam'
    yallakora = 'yallakora'
    yam = 'yam'
    yammer = 'yammer'
    yandex = 'yandex'
    yandex_disk = 'yandex-disk'
    yandex_fotki = 'yandex-fotki'
    yandex_maps = 'yandex-maps'
    yandex_music = 'yandex-music'
    yandex_video = 'yandex-video'
    yandex_webmail = 'yandex-webmail'
    yapo = 'yapo'
    yasour = 'yasour'
    yelp = 'yelp'
    yemen_net = 'yemen-net'
    yemennow = 'yemennow'
    yen = 'yen'
    yesky = 'yesky'
    yieldmanager = 'yieldmanager'
    yieldmo = 'yieldmo'
    yihaodian = 'yihaodian'
    yle = 'yle'
    ymail_classic = 'ymail-classic'
    ymail_mobile_new = 'ymail-mobile-new'
    ymail2 = 'ymail2'
    ymsg = 'ymsg'
    ymsg_conf = 'ymsg-conf'
    ymsg_transfer = 'ymsg-transfer'
    ymsg_video = 'ymsg-video'
    ymsg_webmessenger = 'ymsg-webmessenger'
    ynet = 'ynet'
    yodiz = 'yodiz'
    yoka = 'yoka'
    yomiuri = 'yomiuri'
    yoono = 'yoono'
    youdao = 'youdao'
    youku = 'youku'
    youm7 = 'youm7'
    youmeo = 'youmeo'
    youni = 'youni'
    younow = 'younow'
    youporn = 'youporn'
    your_freedom = 'your-freedom'
    yourfiles_biz = 'yourfiles-biz'
    youseemore = 'youseemore'
    yousendit = 'yousendit'
    youtube = 'youtube'
    youtube_kids = 'youtube-kids'
    youtube_music = 'youtube-music'
    youtubeeducation = 'youtubeeducation'
    ypbind = 'ypbind'
    yppasswd = 'yppasswd'
    ypserv = 'ypserv'
    ypupdate = 'ypupdate'
    yr = 'yr'
    yugma = 'yugma'
    yuuguu = 'yuuguu'
    zabbix_agent = 'zabbix-agent'
    zahraa = 'zahraa'
    zalo = 'zalo'
    zaluu = 'zaluu'
    zambiawatchdog = 'zambiawatchdog'
    zamunda = 'zamunda'
    zattoo = 'zattoo'
    zedo = 'zedo'
    zelune = 'zelune'
    zendesk = 'zendesk'
    zenmate = 'zenmate'
    zeri = 'zeri'
    zhihu = 'zhihu'
    ziddu = 'ziddu'
    zimbra = 'zimbra'
    zimbra_standard = 'zimbra-standard'
    zimeye = 'zimeye'
    zing = 'zing'
    zippyshare = 'zippyshare'
    zoho = 'zoho'
    zoho_crm = 'zoho-crm'
    zoho_db = 'zoho-db'
    zoho_im = 'zoho-im'
    zoho_meeting = 'zoho-meeting'
    zoho_notebook = 'zoho-notebook'
    zoho_people = 'zoho-people'
    zoho_planner = 'zoho-planner'
    zoho_share = 'zoho-share'
    zoho_sheet = 'zoho-sheet'
    zoho_show = 'zoho-show'
    zol = 'zol'
    zombie_tsunami = 'zombie-tsunami'
    zone_telechargement = 'zone-telechargement'
    zonealarm = 'zonealarm'
    zonealarm_update = 'zonealarm-update'
    zoo = 'zoo'
    zoom = 'zoom'
    zoomtanzania = 'zoomtanzania'
    zopim = 'zopim'
    zougla = 'zougla'
    zoznam = 'zoznam'
    zshare = 'zshare'
    zuji = 'zuji'
    zum = 'zum'
    zumodrive = 'zumodrive'
    zwherald = 'zwherald'
    zynga = 'zynga'


class Services(BaseModel):
    web_category: Annotated[Optional[WebCategory], Field(serialization_alias='web-category', description='Web category.')] = None
    web_reputation: Annotated[Optional[WebReputation], Field(serialization_alias='web-reputation', description='Web reputation.')] = None
    app_category: Annotated[Optional[AppCategory], Field(serialization_alias='app-category', description='Application category.')] = None
    application: Annotated[Optional[Application], Field(description='Application.')] = None
    net_service: Annotated[Optional[str], Field(serialization_alias='net-service', description='Net Service.', max_length=63, min_length=1)] = None
    apptag_name: Annotated[Optional[str], Field(serialization_alias='apptag-name', description='Aruba Application Name.', max_length=9999)] = None


class ArubaPolicyConditionServiceConfig(BaseModel):
    services: Annotated[Optional[Services], Field(description='Services container.')] = None


class Operator(Enum):
    COMPARISON_EQ = 'COMPARISON_EQ'
    COMPARISON_NE = 'COMPARISON_NE'
    COMPARISON_LT = 'COMPARISON_LT'
    COMPARISON_GT = 'COMPARISON_GT'
    COMPARISON_RANGE = 'COMPARISON_RANGE'
    PORT_GROUP = 'PORT_GROUP'


class ArubaPolicyConditionPortConfig(BaseModel):
    operator: Annotated[Optional[Operator], Field(description='Comparison operator.')] = None
    min: Annotated[Optional[int], Field(description='Port value or lower bound of port range.', ge=0, le=65535)] = None
    max: Annotated[Optional[int], Field(description='Upper bound of port range.', ge=0, le=65535)] = None
    group: Annotated[Optional[str], Field(description='Reference to group of ports, using object-group', max_length=9999)] = None


class TcpFlag(Enum):
    TCP_SYN = 'TCP_SYN'
    TCP_FIN = 'TCP_FIN'
    TCP_RST = 'TCP_RST'
    TCP_PSH = 'TCP_PSH'
    TCP_ACK = 'TCP_ACK'
    TCP_URG = 'TCP_URG'
    TCP_ECE = 'TCP_ECE'
    TCP_CWR = 'TCP_CWR'


class TransportFields(BaseModel):
    source_port: Annotated[Optional[ArubaPolicyConditionPortConfig], Field(serialization_alias='source-port', description='Source port or range')] = None
    destination_port: Annotated[Optional[ArubaPolicyConditionPortConfig], Field(serialization_alias='destination-port', description='Destination port or range')] = None
    source_port_net_group: Annotated[Optional[str], Field(serialization_alias='source-port-net-group', description='Name of Source port net group', max_length=63, min_length=1)] = None
    destination_port_net_group: Annotated[Optional[str], Field(serialization_alias='destination-port-net-group', description='Name of Destination port net group', max_length=63, min_length=1)] = None
    tcp_flags: Annotated[Optional[List[TcpFlag]], Field(serialization_alias='tcp-flags', max_length=2147483647)] = None
    established: Annotated[Optional[bool], Field(description='Match an established TCP connection. Used to allow packets in the\nreverse direction for an established connection.')] = None


class ArubaPolicyConditionTransportFieldsConfig(BaseModel):
    transport_fields: Annotated[Optional[TransportFields], Field(serialization_alias='transport-fields', description='Transport-layer packet fields')] = None


class Ethertype(RootModel[int]):
    root: Annotated[int, Field(description='Ethertype field to match in Ethernet packets', ge=1536, le=65535)]


class Ethertype1(Enum):
    ETHERTYPE_IPV4 = 'ETHERTYPE_IPV4'
    ETHERTYPE_ARP = 'ETHERTYPE_ARP'
    ETHERTYPE_AARP = 'ETHERTYPE_AARP'
    ETHERTYPE_APPLETALK = 'ETHERTYPE_APPLETALK'
    ETHERTYPE_FCOE = 'ETHERTYPE_FCOE'
    ETHERTYPE_FCOE_INIT = 'ETHERTYPE_FCOE_INIT'
    ETHERTYPE_IPX_ARPA = 'ETHERTYPE_IPX_ARPA'
    ETHERTYPE_IPX_NON_ARPA = 'ETHERTYPE_IPX_NON_ARPA'
    ETHERTYPE_IS_IS = 'ETHERTYPE_IS_IS'
    ETHERTYPE_MPLS_MULTICAST = 'ETHERTYPE_MPLS_MULTICAST'
    ETHERTYPE_Q_IN_Q = 'ETHERTYPE_Q_IN_Q'
    ETHERTYPE_RBRIDGE = 'ETHERTYPE_RBRIDGE'
    ETHERTYPE_TRILL = 'ETHERTYPE_TRILL'
    ETHERTYPE_WAKE_ON_LAN = 'ETHERTYPE_WAKE_ON_LAN'
    ETHERTYPE_VLAN = 'ETHERTYPE_VLAN'
    ETHERTYPE_IPV6 = 'ETHERTYPE_IPV6'
    ETHERTYPE_MPLS = 'ETHERTYPE_MPLS'
    ETHERTYPE_LLDP = 'ETHERTYPE_LLDP'
    ETHERTYPE_ROCE = 'ETHERTYPE_ROCE'
    ETHERTYPE_ANY = 'ETHERTYPE_ANY'


class EthernetHeader(BaseModel):
    source_mac: Annotated[Optional[str], Field(serialization_alias='source-mac', description='Source IEEE 802 MAC address.', max_length=9999)] = None
    source_mac_mask: Annotated[Optional[str], Field(serialization_alias='source-mac-mask', description='Source IEEE 802 MAC address mask.', max_length=9999)] = None
    destination_mac: Annotated[Optional[str], Field(serialization_alias='destination-mac', description='Destination IEEE 802 MAC address.', max_length=9999)] = None
    destination_mac_mask: Annotated[Optional[str], Field(serialization_alias='destination-mac-mask', description='Destination IEEE 802 MAC address mask.', max_length=9999)] = None
    ethertype: Annotated[Optional[Union[Ethertype, Ethertype1]], Field(description='Ethertype field to match in Ethernet packets')] = None
    ethermask: Annotated[Optional[int], Field(description='Ethertype mask to match in Ethernet packets', ge=0, le=65535)] = None
    pcp: Annotated[Optional[int], Field(description='Priority Code Point (PCP) to match in Ethernet packets', ge=0, le=7)] = None
    vlan: Annotated[Optional[int], Field(description='VLAN to match in Ethernet packets', ge=0, le=4000)] = None


class ArubaPolicyConditionEthernetHeaderConfig(BaseModel):
    ethernet_header: Annotated[Optional[EthernetHeader], Field(serialization_alias='ethernet-header', description='Ethernet header configuration.')] = None


class AggRole(BaseModel):
    agg_role: Annotated[Optional[str], Field(serialization_alias='agg-role', description='Aggregated role.', max_length=256, min_length=1)] = None
    agg_rule_pos: Annotated[Optional[int], Field(serialization_alias='agg-rule-pos', description='Aggregation of Source Roles.', ge=1, le=4294967295)] = None


class AggregateInfo(BaseModel):
    agg_roles: Annotated[Optional[List[AggRole]], Field(serialization_alias='agg-roles', description='List of Aggregated Roles with pos info', max_length=2147483647)] = None


class ArubaPolicyConditionAggregateRulesInfo(BaseModel):
    aggregate_info: Annotated[Optional[AggregateInfo], Field(serialization_alias='aggregate-info', description='Aggregation Role Info')] = None


class Type5(Enum):
    ADDRESS_ANY = 'ADDRESS_ANY'
    ADDRESS_HOST = 'ADDRESS_HOST'
    ADDRESS_NETWORK = 'ADDRESS_NETWORK'
    ADDRESS_ALIAS = 'ADDRESS_ALIAS'
    ADDRESS_ROLE = 'ADDRESS_ROLE'
    ADDRESS_LOCAL = 'ADDRESS_LOCAL'
    ADDRESS_USER = 'ADDRESS_USER'
    ADDRESS_AP_IP = 'ADDRESS_AP_IP'
    ADDRESS_AP_IP_ALL = 'ADDRESS_AP_IP_ALL'
    ADDRESS_AP_NETWORK = 'ADDRESS_AP_NETWORK'
    ADDRESS_MASTER_IP = 'ADDRESS_MASTER_IP'
    ADDRESS_DOMAIN_NAME = 'ADDRESS_DOMAIN_NAME'
    ADDRESS_SUBNET_MASK = 'ADDRESS_SUBNET_MASK'
    ADDRESS_GROUP = 'ADDRESS_GROUP'


class NetworkSubnetAddress(RootModel[str]):
    root: Annotated[str, Field(description='An IPv4 or IPv6 prefix followed by a slash and a subnet mask.', max_length=9999)]


class SubnetAddress(BaseModel):
    network_subnet_address: Annotated[Optional[NetworkSubnetAddress], Field(serialization_alias='network-subnet-address', description='An IPv4 or IPv6 prefix followed by a slash and a subnet mask.')] = None


class SubnetAddress1(SubnetAddress):
    pass


class Protocol(RootModel[int]):
    root: Annotated[int, Field(description='The protocol carried in the IP packet, expressed either\nas its IP protocol number, or by a defined identity.', ge=0, le=255)]


class Protocol1(Enum):
    IP_TCP = 'IP_TCP'
    IP_UDP = 'IP_UDP'
    IP_ICMP = 'IP_ICMP'
    IPV6_ICMP = 'IPV6_ICMP'
    IP_IGMP = 'IP_IGMP'
    IP_PIM = 'IP_PIM'
    IP_RSVP = 'IP_RSVP'
    IP_GRE = 'IP_GRE'
    IP_AUTH = 'IP_AUTH'
    IP_L2TP = 'IP_L2TP'
    IP_IN_IP = 'IP_IN_IP'
    PROTOCOL_ANY = 'PROTOCOL_ANY'


class Ecn(Enum):
    NOT_ECN_CAPABLE = 'NOT_ECN_CAPABLE'
    ECT_1 = 'ECT_1'
    ECT_0 = 'ECT_0'
    CONGESTION_EXPERIENCED = 'CONGESTION_EXPERIENCED'


class IcmpEnum(Enum):
    ADMINISTRATIVELY_PROHIBITED = 'ADMINISTRATIVELY_PROHIBITED'
    ALTERNATE_ADDRESS = 'ALTERNATE_ADDRESS'
    ALTERNATE_ADDRESS_HOST = 'ALTERNATE_ADDRESS_HOST'
    CONVERSION_ERROR = 'CONVERSION_ERROR'
    DOD_HOST_PROHIBITED = 'DOD_HOST_PROHIBITED'
    DOD_NET_PROHIBITED = 'DOD_NET_PROHIBITED'
    ECHO = 'ECHO'
    GENERAL_PARAMETER_PROBLEM = 'GENERAL_PARAMETER_PROBLEM'
    HOST_ISOLATED = 'HOST_ISOLATED'
    HOST_PRECEDENCE_UNREACHABLE = 'HOST_PRECEDENCE_UNREACHABLE'
    HOST_REDIRECT = 'HOST_REDIRECT'
    HOST_TOS_REDIRECT = 'HOST_TOS_REDIRECT'
    HOST_TOS_UNREACHABLE = 'HOST_TOS_UNREACHABLE'
    HOST_UNKNOWN = 'HOST_UNKNOWN'
    HOST_UNREACHABLE = 'HOST_UNREACHABLE'
    INFORMATION_REQUEST = 'INFORMATION_REQUEST'
    MASK_REQUEST = 'MASK_REQUEST'
    MOBILE_REDIRECT = 'MOBILE_REDIRECT'
    NET_REDIRECT = 'NET_REDIRECT'
    NET_TOS_REDIRECT = 'NET_TOS_REDIRECT'
    NET_TOS_UNREACHABLE = 'NET_TOS_UNREACHABLE'
    NET_UNREACHABLE = 'NET_UNREACHABLE'
    NETWORK_UNKNOWN = 'NETWORK_UNKNOWN'
    NO_ROOM_FOR_OPTION = 'NO_ROOM_FOR_OPTION'
    OPTION_MISSING = 'OPTION_MISSING'
    PACKET_TOO_BIG = 'PACKET_TOO_BIG'
    PARAMETER_PROBLEM = 'PARAMETER_PROBLEM'
    PORT_UNREACHABLE = 'PORT_UNREACHABLE'
    PRECEDENCE = 'PRECEDENCE'
    PRECEDENCE_UNREACHABLE = 'PRECEDENCE_UNREACHABLE'
    PROTOCOL_UNREACHABLE = 'PROTOCOL_UNREACHABLE'
    REASSEMBLY_TIMEOUT = 'REASSEMBLY_TIMEOUT'
    REDIRECT = 'REDIRECT'
    ROUTER_ADVERTISEMENT = 'ROUTER_ADVERTISEMENT'
    ROUTER_SOLICITATION = 'ROUTER_SOLICITATION'
    SOURCE_QUENCH = 'SOURCE_QUENCH'
    SOURCE_ROUTE_FAILED = 'SOURCE_ROUTE_FAILED'
    TIME_EXCEEDED = 'TIME_EXCEEDED'
    TIMESTAMP_REQUEST = 'TIMESTAMP_REQUEST'
    TRACEROUTE = 'TRACEROUTE'
    TTL_EXCEEDED = 'TTL_EXCEEDED'
    UNREACHABLE = 'UNREACHABLE'
    DESTINATION_UNREACHABLE = 'DESTINATION_UNREACHABLE'
    ECHO_REPLY = 'ECHO_REPLY'
    TIMESTAMP_REPLY = 'TIMESTAMP_REPLY'
    INFORMATION_REPLY = 'INFORMATION_REPLY'
    ADDRESS_MASK_REQUEST = 'ADDRESS_MASK_REQUEST'
    ADDRESS_MASK_REPLY = 'ADDRESS_MASK_REPLY'


class Icmp(BaseModel):
    icmp_enum: Annotated[Optional[IcmpEnum], Field(serialization_alias='icmp-enum', description='ICMP enumeration.')] = None
    icmp_type: Annotated[Optional[int], Field(serialization_alias='icmp-type', description='ICMP type.', ge=0, le=255)] = None
    icmp_code: Annotated[Optional[int], Field(serialization_alias='icmp-code', description='ICMP code.', ge=0, le=255)] = None


class Type7(Enum):
    MEMBERSHIP_QUERY = 'MEMBERSHIP_QUERY'
    MEMBERSHIP_REPORT = 'MEMBERSHIP_REPORT'
    DVMRP = 'DVMRP'
    PIM = 'PIM'
    TRACE = 'TRACE'
    MEMBERSHIP_REPORT_V2 = 'MEMBERSHIP_REPORT_V2'
    HOST_LEAVE_V2 = 'HOST_LEAVE_V2'
    MEMBERSHIP_REPORT_V3 = 'MEMBERSHIP_REPORT_V3'
    MTRACE_REPLY = 'MTRACE_REPLY'
    MTRACE_REQUEST = 'MTRACE_REQUEST'
    MROUTER_ADVERTISEMENT = 'MROUTER_ADVERTISEMENT'
    MROUTER_SOLICITATION = 'MROUTER_SOLICITATION'
    MROUTER_TERMINATION = 'MROUTER_TERMINATION'


class Igmp(BaseModel):
    type: Annotated[Optional[Type7], Field(description='IGMP enumeration.')] = None
    vlan: Annotated[Optional[int], Field(description='VLAN to match in Ethernet packets', ge=0, le=4000)] = None


class IpHeader(BaseModel):
    protocol: Annotated[Optional[Union[Protocol, Protocol1]], Field(description='The protocol carried in the IP packet, expressed either\nas its IP protocol number, or by a defined identity.')] = None
    dscp: Annotated[Optional[int], Field(description='Value of Differentiated Services (diffserv) Code Point (DSCP).', ge=0, le=63)] = None
    tos: Annotated[Optional[int], Field(description='Type-of-Service (ToS) value.', ge=0, le=63)] = None
    ecn: Annotated[Optional[Ecn], Field(description='Value of Explicit Congestion Notification.')] = None
    hop_limit: Annotated[Optional[int], Field(serialization_alias='hop-limit', description="The IP packet's hop limit -- known as TTL (in hops) in\nIPv4 packets, and hop limit in IPv6", ge=0, le=255)] = None
    ipv6_fragmentation_header: Annotated[Optional[int], Field(serialization_alias='ipv6-fragmentation-header', description='IPv6 Fragmantation header.', ge=0, le=4294967295)] = None
    ip_precedence: Annotated[Optional[int], Field(serialization_alias='ip-precedence', description='IP precedence value.', ge=0, le=7)] = None
    fragment: Annotated[Optional[bool], Field(description='Match IP packets with fragment flag set.')] = None
    vlan: Annotated[Optional[int], Field(description='Specifies VLAN tag to match on.', ge=1, le=4094)] = None
    icmp: Annotated[Optional[Icmp], Field(description='ICMP configuration.')] = None
    igmp: Annotated[Optional[Igmp], Field(description='IGMP configuration.')] = None


class Type8(Enum):
    HOST = 'HOST'
    FQDN = 'FQDN'
    ADDRESS_RANGE = 'ADDRESS_RANGE'
    NETWORK = 'NETWORK'
    VLAN = 'VLAN'
    PORT = 'PORT'
    INTERFACE = 'INTERFACE'


class Address(RootModel[str]):
    root: Annotated[str, Field(description='Host IP address.', max_length=9999)]


class AddressRange(RootModel[str]):
    root: Annotated[str, Field(description='IP address range.', max_length=9999)]


class Prefix(RootModel[str]):
    root: Annotated[str, Field(description='Network IP address.', max_length=9999)]


class Ports(BaseModel):
    operator: Annotated[Optional[Operator], Field(description='Comparison operator.')] = None
    min: Annotated[Optional[int], Field(description='Port value or lower bound of port range.', ge=0, le=65535)] = '0'
    max: Annotated[Optional[int], Field(description='Upper bound of port range.', ge=0, le=65535)] = None


class Item(BaseModel):
    index: Annotated[Optional[int], Field(description='Index.', ge=1, le=1000)] = None
    type: Annotated[Optional[Type8], Field(description='Type of the Network Group.')] = None
    fqdn: Annotated[Optional[str], Field(description='The name of the Net Group.', max_length=256, min_length=1)] = None
    address: Annotated[Optional[Address], Field(description='Host IP address.')] = None
    address_range: Annotated[Optional[List[AddressRange]], Field(serialization_alias='address-range', max_length=2147483647)] = None
    prefix: Annotated[Optional[Prefix], Field(description='Network IP address.')] = None
    ports: Annotated[Optional[Ports], Field(description='Operator and port values. If operator == COMPARISON_RANGE then minimum and maximum values are valid,\notherwise only the minimum value is valid.')] = None
    vlan: Annotated[Optional[int], Field(description='VLAN Identifier.', ge=1, le=4094)] = None
    vlan_offset: Annotated[Optional[int], Field(serialization_alias='vlan-offset', description='Offset in VLAN subnet.', ge=1, le=254)] = None
    default_host: Annotated[Optional[bool], Field(serialization_alias='default-host', description='Default host entry.')] = None
    null_interface: Annotated[Optional[bool], Field(serialization_alias='null-interface', description='Null interface destination.')] = None
    tunnel_name: Annotated[Optional[str], Field(serialization_alias='tunnel-name', description='Tunnel interface name.', max_length=9999)] = None


class NetGroupItem(BaseModel):
    name: Annotated[Optional[str], Field(description='The name of the Network Group.', max_length=63, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Description of the Network Group.', max_length=128, min_length=1)] = None
    invert: Annotated[Optional[bool], Field(description='Use all groups except this group.')] = None
    preemptive_failover: Annotated[Optional[bool], Field(serialization_alias='preemptive-failover', description='Enable/Disable preemptive failover.')] = None
    items: Annotated[Optional[List[Item]], Field(description='List of Network Group Items.', max_length=2147483647)] = None


class NetGroups(BaseModel):
    net_group: Annotated[Optional[List[NetGroupItem]], Field(serialization_alias='net-group', description='List of Network Groups.', max_length=2147483647)] = None


class ArubaNetGroupNetGroupTop(BaseModel):
    net_groups: Annotated[Optional[NetGroups], Field(serialization_alias='net-groups', description='Top level container for Network Groups.')] = None


class Protocol2(Protocol):
    pass


class Port(RootModel[int]):
    root: Annotated[int, Field(description='List of Ports.', ge=0, le=65535)]


class PortRange(BaseModel):
    operator: Annotated[Optional[Operator], Field(description='Comparison operator.')] = None
    min: Annotated[Optional[int], Field(description='Port value or lower bound of port range.', ge=0, le=65535)] = None
    max: Annotated[Optional[int], Field(description='Upper bound of port range.', ge=0, le=65535)] = None


class AlgService(Enum):
    DHCP = 'DHCP'
    DNS = 'DNS'
    FACETIME = 'FACETIME'
    FTP = 'FTP'
    JABBER = 'JABBER'
    NOE = 'NOE'
    RTSP = 'RTSP'
    SCCP = 'SCCP'
    SIP = 'SIP'
    SIPS = 'SIPS'
    SVP = 'SVP'
    TFTP = 'TFTP'
    VOCERA = 'VOCERA'
    H323 = 'H323'


class NetServiceItem(BaseModel):
    name: Annotated[Optional[str], Field(description='The name of the Net Service.', max_length=63, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Description of the Net Service.', max_length=128, min_length=1)] = None
    protocol: Annotated[Union[Protocol2, Protocol1], Field(description='The protocol carried in the IP packet, expressed either\nas its IP protocol number, or by a defined identity.')]
    ports: Annotated[Optional[List[Port]], Field(max_length=2147483647)] = None
    port_range: Annotated[Optional[PortRange], Field(serialization_alias='port-range', description='Operator and port values. If operator == COMPARISON_RANGE then minimum and maximum values are valid,\notherwise only the minimum value is valid.')] = None
    http_proxy: Annotated[Optional[bool], Field(serialization_alias='http-proxy', description='HTTP Proxy port.')] = None
    https_proxy: Annotated[Optional[bool], Field(serialization_alias='https-proxy', description='HTTPS Proxy port.')] = None
    alg_service: Annotated[Optional[AlgService], Field(serialization_alias='alg-service', description='ALG Service.')] = None


class NetServices(BaseModel):
    net_service: Annotated[Optional[List[NetServiceItem]], Field(serialization_alias='net-service', description='List of Net Services.', max_length=2147483647)] = None


class ArubaNetServiceNetServiceTop(BaseModel):
    net_services: Annotated[Optional[NetServices], Field(serialization_alias='net-services', description='Top level container for Net Services.')] = None


class Type9(Enum):
    ALIAS_HOST = 'ALIAS_HOST'
    ALIAS_NETWORK = 'ALIAS_NETWORK'
    ALIAS_NETWORK_GROUP = 'ALIAS_NETWORK_GROUP'
    ALIAS_SERVICE_GROUP = 'ALIAS_SERVICE_GROUP'
    ALIAS_VLAN = 'ALIAS_VLAN'
    ALIAS_ESSID = 'ALIAS_ESSID'
    ALIAS_ECHO_SOURCE_ADDRESS = 'ALIAS_ECHO_SOURCE_ADDRESS'
    ALIAS_HOSTNAME = 'ALIAS_HOSTNAME'
    ALIAS_NETWORK_DESTINATION = 'ALIAS_NETWORK_DESTINATION'
    ALIAS_IPV4_SYSTEM_VLAN = 'ALIAS_IPV4_SYSTEM_VLAN'


class HostnameValue(BaseModel):
    hostname: Annotated[Optional[str], Field(description='The hostname is used as a default prompt.', max_length=128, min_length=1)] = None


class VlanIdRange(RootModel[str]):
    root: Annotated[str, Field(description='List of VLAN ranges under vlan name', max_length=9999)]


class VlanValue(BaseModel):
    vlan_id_ranges: Annotated[Optional[List[VlanIdRange]], Field(serialization_alias='vlan-id-ranges', max_length=2147483647)] = None


class EssidValue(BaseModel):
    name: Annotated[Optional[str], Field(description='ESSID.', max_length=256, min_length=1)] = None


class Name(RootModel[str]):
    root: Annotated[str, Field(description='BFD echo source address.', max_length=9999)]


class BfdEchoSourceAddress(BaseModel):
    name: Annotated[Optional[Name], Field(description='BFD echo source address.')] = None


class Ipv4SystemVlanValue(BaseModel):
    vlan_id: Annotated[Optional[int], Field(serialization_alias='vlan-id', description='IPv4 system VLAN identifier.', ge=1, le=4094)] = None


class ArubaDualipDualIpAddress(BaseModel):
    host_ipv4_address: Annotated[Optional[str], Field(serialization_alias='host-ipv4-address', description='Host IPv4 address.', max_length=9999)] = None
    host_ipv6_address: Annotated[Optional[str], Field(serialization_alias='host-ipv6-address', description='Host IPv6 address.', max_length=9999)] = None


class ArubaDualipDualIpPrefix(BaseModel):
    network_ipv4_address: Annotated[Optional[str], Field(serialization_alias='network-ipv4-address', description='Network IPv4 prefix.', max_length=9999)] = None
    network_ipv6_address: Annotated[Optional[str], Field(serialization_alias='network-ipv6-address', description='Network IPv6 prefix.', max_length=9999)] = None


class Opmode(Enum):
    DISTRIBUTED = 'DISTRIBUTED'


class Direction(Enum):
    UPSTREAM = 'UPSTREAM'
    DOWNSTREAM = 'DOWNSTREAM'


class UnitSelector(Enum):
    KBITS_PER_SEC = 'KBITS_PER_SEC'
    MBITS_PER_SEC = 'MBITS_PER_SEC'
    LINK_PERCENT = 'LINK_PERCENT'


class CategoryBandwidthContract(BaseModel):
    category: Annotated[WebCategory, Field(description='Select the WebCC category to which bandwidth contract will be applied.\nThis configuration is mandatory.')]
    direction: Annotated[Direction, Field(description='Select direction of traffic to which bandwidth contract will be applied.\nThis configuration is mandatory.')]
    unit_selector: Annotated[UnitSelector, Field(serialization_alias='unit-selector', description='Select method to specify bandwidth units - either kbits or mbits per second.\nThis configuration is mandatory.')]
    kbit_rate: Annotated[Optional[int], Field(serialization_alias='kbit-rate', description='Specify bandwidth in kilobits per second. Supported range is 256-2000000 kbps.', ge=256, le=2000000)] = None
    mbit_rate: Annotated[Optional[int], Field(serialization_alias='mbit-rate', description='Specify bandwidth in megabits per second. Supported range is 1-2000 mbps.', ge=1, le=2000)] = None


class ReputationBandwidthContract(BaseModel):
    reputation: Annotated[WebReputation, Field(description='Select the risk level classification to which bandwidth contract will be applied.\nWebCC assigns a reputation score to a URL upon classification. These scores are grouped into ranges\nto indicate the risk level as follows:\n81-100 : Trustworthy.\n61-80 : low-risk.\n41-60 : moderate-risk.\n21-40 : suspicious.\n1-20 : high-risk.\nThis configuration is mandatory.')]
    direction: Annotated[Direction, Field(description='Select direction of traffic to which bandwidth contract will be applied.\nThis configuration is mandatory.')]
    unit_selector: Annotated[UnitSelector, Field(serialization_alias='unit-selector', description='Select method to specify bandwidth units - either kbits or mbits per second.\nThis configuration is mandatory.')]
    kbit_rate: Annotated[Optional[int], Field(serialization_alias='kbit-rate', description='Specify bandwidth in kilobits per second. Supported range is 256-2000000 kbps.', ge=256, le=2000000)] = None
    mbit_rate: Annotated[Optional[int], Field(serialization_alias='mbit-rate', description='Specify bandwidth in megabits per second. Supported range is 1-2000 mbps.', ge=1, le=2000)] = None


class ProfileItem3(BaseModel):
    name: Annotated[Optional[str], Field(description='Configure a profile name.', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Configure a profile description.', max_length=256, min_length=1)] = None
    enable: Annotated[bool, Field(description='Enable the WebCC feature.\nAn IP name server must be configured for this feature to work.')]
    opmode: Annotated[Opmode, Field(description='Select per device ownership mode for managing WebCC database and cache.\n\nCurrently WebCC only supports Distributed opmode where each managed Gateway maintains\nits own WebCC URL database and cache. This opmode must be selected when WebCC is enabled.')]
    cache_miss_drop: Annotated[Optional[bool], Field(serialization_alias='cache-miss-drop', description='WebCC caches classification data of a URL when it encounters it for the first time.\nEnable this feature to drop session packets until a cache entry is found for the URL, i.e. until a WebCC\ncategory or reputation score classification is available in the internal WebCC cache.\n\nThis feature is disabled by default.')] = None
    redirect_url: Annotated[Optional[str], Field(serialization_alias='redirect-url', description='Configure URL to redirect session to when users access a URL that matches a WebCC deny rule.\nThe URL must be prefixed with http:// or https:// . Permitted length is 5-250 characters.', max_length=9999)] = None
    category_bandwidth_contracts: Annotated[Optional[List[CategoryBandwidthContract]], Field(serialization_alias='category-bandwidth-contracts', description='List of global bandwidth contracts based on WebCC category type.\nThere can be one contract per category per direction.', max_length=2147483647)] = None
    reputation_bandwidth_contracts: Annotated[Optional[List[ReputationBandwidthContract]], Field(serialization_alias='reputation-bandwidth-contracts', description='List of global bandwidth contracts based on WebCC risk level, i.e. reputation score range.\nThere can be one contract per range per direction.', max_length=2147483647)] = None


class Webcc(BaseModel):
    profile: Annotated[Optional[List[ProfileItem3]], Field(description='List of WebCC profiles.', max_length=2147483647)] = None


class ArubaWebccWebccConfigTop(BaseModel):
    webcc: Annotated[Optional[Webcc], Field(description='Configuration of WebCC global profile(s).\n\nWeb Content Classification (WebCC) feature uses the Brightcloud® URL database of categories\nand reputation risk scores to classify web traffic. This is used for traffic filtering.\n\nThese APIs are applicable to AP and Gateway devices only.')] = None


class Services1(BaseModel):
    app_category: Annotated[Optional[AppCategory], Field(serialization_alias='app-category', description='Application category.')] = None
    application: Annotated[Optional[Application], Field(description='Application.')] = None


class ArubaNamedConditionNamedServiceGroup(BaseModel):
    services: Annotated[Optional[Services1], Field(description='Services container.')] = None


class RulesType(Enum):
    NAMED_CONDITION_ANY = 'NAMED_CONDITION_ANY'
    NAMED_CONDITION_IP = 'NAMED_CONDITION_IP'
    NAMED_CONDITION_IPV6 = 'NAMED_CONDITION_IPV6'
    NAMED_CONDITION_ETHERNET = 'NAMED_CONDITION_ETHERNET'
    NETWORK_ACL_IP = 'NETWORK_ACL_IP'
    NETWORK_ACL_IPV6 = 'NETWORK_ACL_IPV6'
    NETWORK_ACL_ETHERNET = 'NETWORK_ACL_ETHERNET'


class Association1(Enum):
    ASSOCIATION_APP = 'ASSOCIATION_APP'
    ASSOCIATION_NETWORK = 'ASSOCIATION_NETWORK'
    ASSOCIATION_ROLE = 'ASSOCIATION_ROLE'


class RangeType(Enum):
    ABSOLUTE = 'ABSOLUTE'
    PERIODIC = 'PERIODIC'


class Period(Enum):
    DAILY = 'DAILY'
    WEEKEND = 'WEEKEND'
    WEEKDAY = 'WEEKDAY'
    DAY_OF_WEEK = 'DAY_OF_WEEK'


class RangelistItem(BaseModel):
    index: Annotated[Optional[int], Field(description='Time range index.', ge=0, le=100)] = None
    start_time: Annotated[Optional[str], Field(serialization_alias='start-time', description='Start time. 24-hour time, expressed as HH:MM\nHH:00-23, MM:00-59.', max_length=9999)] = None
    end_time: Annotated[Optional[str], Field(serialization_alias='end-time', description='End time. 24-hour time, expressed as HH:MM\nHH:00-23, MM:00-59.', max_length=9999)] = None
    period: Annotated[Optional[Period], Field(description='Period type.\nRange: DAILY, WEEKEND, WEEKDAY, DAY_OF_WEEK.')] = None
    start_day_of_week: Annotated[Optional[int], Field(serialization_alias='start-day-of-week', description='Specify any day of the week from Monday to Sunday.', ge=1, le=7)] = None
    end_day_of_week: Annotated[Optional[int], Field(serialization_alias='end-day-of-week', description='Enter the end day for the time range profile.', ge=1, le=7)] = None


class TimeRangeItem(BaseModel):
    name: Annotated[Optional[str], Field(description='Time Range name.', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Time Range profile description.', max_length=256, min_length=1)] = None
    range_type: Annotated[Optional[RangeType], Field(serialization_alias='range-type', description='Time Range absolute or periodici.\nRange: ABSOLUTE, PERIODIC.')] = None
    start_date_time: Annotated[Optional[str], Field(serialization_alias='start-date-time', description='Start date in the mm/dd/yyyy format and start time in the hh:mm format.', max_length=9999)] = None
    end_date_time: Annotated[Optional[str], Field(serialization_alias='end-date-time', description='End date in the mm/dd/yyyy format and end time in the hh:mm format.', max_length=9999)] = None
    rangelist: Annotated[Optional[List[RangelistItem]], Field(description='List of periodic time ranges.', max_length=2147483647)] = None


class TimeRanges(BaseModel):
    time_range: Annotated[Optional[List[TimeRangeItem]], Field(serialization_alias='time-range', description='Configure an absolute or periodic time profile.', max_length=2147483647)] = None


class ArubaTimerangeTimeRangeConfig(BaseModel):
    time_ranges: Annotated[Optional[TimeRanges], Field(serialization_alias='time-ranges', description='Configure time range profiles on device to enable or diable access to an SSID during a specific period of time.\nThis feature is only applicable for AP.')] = None


class IpVersion(Enum):
    UNKNOWN = 'UNKNOWN'
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'


class Type10(Enum):
    IP_NEXTHOP = 'IP_NEXTHOP'
    IPV6_NEXTHOP = 'IPV6_NEXTHOP'
    DYNAMIC_NEXTHOP_VLAN_DHCP_GW = 'DYNAMIC_NEXTHOP_VLAN_DHCP_GW'
    DYNAMIC_NEXTHOP_VLAN_PPPOE_GW = 'DYNAMIC_NEXTHOP_VLAN_PPPOE_GW'
    IPSEC_TUNNEL = 'IPSEC_TUNNEL'
    IPSECV6_TUNNEL = 'IPSECV6_TUNNEL'
    INTERFACE = 'INTERFACE'


class Ip(RootModel[str]):
    root: Annotated[str, Field(description='Select nexthop IP address', max_length=9999)]


class Nexthop(BaseModel):
    index: Annotated[Optional[int], Field(description='Index of the nexthop', ge=1, le=128)] = None
    type: Annotated[Type10, Field(description='Select nexthop type')]
    default_host: Annotated[Optional[bool], Field(serialization_alias='default-host', description='Default host entry.')] = None
    ip: Annotated[Optional[Ip], Field(description='Select nexthop IP address')] = None
    vlan: Annotated[Optional[int], Field(description='Select nexthop VLAN.', ge=1, le=4094)] = None
    null_interface: Annotated[Optional[bool], Field(serialization_alias='null-interface', description='Null interface destination.')] = None
    tunnel_id: Annotated[Optional[int], Field(serialization_alias='tunnel-id', description='Tunnel interface id.', ge=0, le=65535)] = None
    ipsec_map: Annotated[Optional[str], Field(serialization_alias='ipsec-map', description='Select nexthop IPSec map', max_length=256, min_length=1)] = None
    priority: Annotated[Optional[int], Field(description='Priority of the nexthop', ge=1, le=255)] = '128'
    probe_wan_health_check: Annotated[Optional[bool], Field(serialization_alias='probe-wan-health-check', description='Probe WAN health check IP to check the liveness of nexthop')] = None
    sla_profile: Annotated[Optional[str], Field(serialization_alias='sla-profile', description='Internet Protocol Service Level Agreement (IPSLA) profile to be used to check performance metrics of the nexthop', max_length=9999)] = None


class GroupItem(BaseModel):
    name: Annotated[Optional[str], Field(description='Nexthop group name', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Description of the nexthop group', max_length=256, min_length=1)] = None
    ip_version: Annotated[Optional[IpVersion], Field(serialization_alias='ip-version', description='IP version')] = None
    preemptive_failover: Annotated[Optional[bool], Field(serialization_alias='preemptive-failover', description='Enable preemptive failover.')] = None
    nexthops: Annotated[Optional[List[Nexthop]], Field(description='nexthop index of this nexthop group', max_length=2147483647)] = None


class NexthopGroups(BaseModel):
    group: Annotated[Optional[List[GroupItem]], Field(description='Nexthop group name.', max_length=2147483647)] = None


class ArubaNexthopGroupNexthopGroupTop(BaseModel):
    nexthop_groups: Annotated[Optional[NexthopGroups], Field(serialization_alias='nexthop-groups', description='Nexthop groups')] = None


class Instance15(Instance5):
    pass


class AuthInstance3(AuthInstance):
    pass


class Authentication(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    authentication_group: Annotated[Optional[List[AuthenticationGroupItem]], Field(serialization_alias='authentication-group', description='Specifies the list of server groups and the order in which they will be applied for authentication of management sessions.', max_length=2147483647)] = None
    default_role: Annotated[Optional[DefaultRole], Field(serialization_alias='default-role', description='Predefined management role to assign to authenticated administrative users.')] = None
    enable: Annotated[Optional[bool], Field(description='Enable authentication for administrative users.')] = None
    mschapv2: Annotated[Optional[bool], Field(description='Enable MSCHAPv2.')] = None
    load_balance: Annotated[Optional[bool], Field(serialization_alias='load-balance', description='After this function is enabled, load balancing can be implemented between the two aaa management servers.')] = None
    failthrough: Annotated[Optional[bool], Field(description='Enable authentication fail-through. This determines whether to access the next Authentication server in case of an authentication failure from the current one.\nIf true, the next server in line will be accessed.\nIf false, the authentication process will be aborted at the\nfirst instance of an authentication failure.')] = None
    fail_to_local: Annotated[Optional[FailToLocal], Field(serialization_alias='fail-to-local', description='Local authentication after authentication server authentication failure')] = None
    privilege_mode: Annotated[Optional[bool], Field(serialization_alias='privilege-mode', description="Grant authentication server's privilege mode.")] = None
    disable_username: Annotated[Optional[bool], Field(serialization_alias='disable-username', description='Bypass username for authentication to get manager or operator mode access.')] = None


class AuthenticationMgmt(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    authentication: Annotated[Optional[Authentication], Field(description='Configure the Management Authentication Profile.')] = None


class Instance17(Instance1):
    pass


class AuthzInstance2(AuthzInstance):
    pass


class AuthorizationGroupItem1(BaseModel):
    access_type: Annotated[Optional[AccessType5], Field(serialization_alias='access-type', description='Authorization access type.')] = None
    instance: Annotated[Optional[List[Union[Instance10, Instance17]]], Field(max_length=2147483647)] = None
    authz_instances: Annotated[Optional[List[AuthzInstance2]], Field(serialization_alias='authz-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local authorization.', max_length=2147483647)] = None


class Radiu1(Radiu):
    pass


class Authorization(BaseModel):
    authorization_group: Annotated[Optional[List[AuthorizationGroupItem1]], Field(serialization_alias='authorization-group', description='Specifies the list of server groups and the order in which they will be applied for authorization of management sessions.', max_length=2147483647)] = None
    radius: Annotated[Optional[List[Radiu1]], Field(description='Specifies the list of Radius server groups and the order in which they will be applied for authorization of secure mangement sessions(SSH and REST only).', max_length=2147483647)] = None
    failthrough: Annotated[Optional[bool], Field(description='Enable authorization fail-through. This determines whether to access the next remote AAA server in case of failure with the current server, the authorization will be attempted with the next configured server.\nIf true, the next server in line will be accessed.\nIf false, authorization will not be attempted with the next server.')] = None
    access_level: Annotated[Optional[AccessLevel], Field(serialization_alias='access-level', description='Access levels for command authroization.')] = None


class ArubaManagementAuthorizationMgmtAuthorization(BaseModel):
    authorization: Annotated[Optional[Authorization], Field(description='Management authorization configuration.')] = None


class Instance19(Instance1):
    pass


class AcctInstance2(AcctInstance):
    pass


class AccountingGroupItem1(BaseModel):
    access_type: Annotated[Optional[AccessType], Field(serialization_alias='access-type', description='Accounting access type.')] = None
    record_type: Annotated[Optional[RecordType], Field(serialization_alias='record-type', description='Accounting record type.')] = None
    instance: Annotated[Optional[List[Union[Instance, Instance19]]], Field(max_length=2147483647)] = None
    acct_instances: Annotated[Optional[List[AcctInstance2]], Field(serialization_alias='acct-instances', description='Server group configuration.\n- For CX, the instance shall be a server group or local accounting.', max_length=2147483647)] = None


class Accounting(BaseModel):
    accounting_group: Annotated[Optional[List[AccountingGroupItem1]], Field(serialization_alias='accounting-group', description='Specifies the list of server groups and the order in which they will be applied for accounting of management sessions.', max_length=2147483647)] = None
    failthrough: Annotated[Optional[bool], Field(description='Enable accounting fail-through. This determines whether to access the next remote AAA server in case accounting is not recorded with the current server, the accounting will be attempted with the next configured server.\nIf true, the next server in line will be accessed.\nIf false, accounting will not be attempted with the next server.')] = None
    acct_session: Annotated[Optional[AcctSession], Field(serialization_alias='acct-session', description='Configure how the accounting sessions are identified.')] = 'UNIQUE'
    acct_switch_id: Annotated[Optional[bool], Field(serialization_alias='acct-switch-id', description='Include Switch identity when generating the session-id.')] = None
    periodic_update: Annotated[Optional[int], Field(serialization_alias='periodic-update', description='Configure accounting updates.', ge=0, le=4294967295)] = None
    supress_null_username: Annotated[Optional[bool], Field(serialization_alias='supress-null-username', description='Supress accouting for users with no username')] = None


class ArubaManagementAccountingMgmtAccounting(BaseModel):
    accounting: Annotated[Optional[Accounting], Field(description='Management accounting configuration.')] = None


class EnabledVrf2(EnabledVrf):
    pass


class Webservers(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable web user interface access to the system')] = None
    absolute_session_timeout: Annotated[Optional[int], Field(serialization_alias='absolute-session-timeout', description="User's absolute WebUI session timeout <30-3600> (seconds). A value of 0 means no timeout.", ge=0, le=65535)] = '0'
    bypass_cp_landing_page: Annotated[Optional[bool], Field(serialization_alias='bypass-cp-landing-page', description='Enable bypass captive portal landing page')] = None
    captive_portal_cert: Annotated[Optional[str], Field(serialization_alias='captive-portal-cert', description='Configure Server Certificate for Captive Portal', max_length=65, min_length=1)] = None
    cipher_suite: Annotated[Optional[List[CipherSuiteEnum]], Field(serialization_alias='cipher-suite', max_length=2147483647)] = None
    exclude_http_security_headers: Annotated[Optional[bool], Field(serialization_alias='exclude-http-security-headers', description='Exclude security headers from HTTP response')] = None
    idp_cert: Annotated[Optional[str], Field(serialization_alias='idp-cert', description='Configure Server Certificate for IDP', max_length=65, min_length=1)] = None
    mgmt_auth: Annotated[Optional[List[MgmtAuthEnum]], Field(serialization_alias='mgmt-auth', max_length=2147483647)] = None
    certificate_authorization: Annotated[Optional[CertificateAuthorization], Field(serialization_alias='certificate-authorization', description="Authorization source for client-role assignment. Only valid when 'mgm-auth' value is set to 'CERTIFICATE'. This configuration is AOSCX specific")] = 'RADIUS'
    certificate_auth_username: Annotated[Optional[CertificateAuthUsername], Field(serialization_alias='certificate-auth-username', description="Certificate field used to read the username when authenticating an user. Only valid when 'mgm-auth' value is set to 'CERTIFICATE'. This configuration is AOSCX specific")] = 'USER_PRINCIPAL_NAME'
    session_timeout: Annotated[Optional[int], Field(serialization_alias='session-timeout', description="Configure Webserver user's session timeout for inactivity.", ge=0, le=65535)] = '900'
    ssl_protocol: Annotated[Optional[List[SslProtocolEnum]], Field(serialization_alias='ssl-protocol', max_length=2147483647)] = None
    switch_cert: Annotated[Optional[str], Field(serialization_alias='switch-cert', description='Configure Server Certificate for Management WebUI', max_length=65, min_length=1)] = None
    via_client_cert_port: Annotated[Optional[int], Field(serialization_alias='via-client-cert-port', description='Configure Port number used for VIA client-cert based profile download. Valid range is <1025-65535>. Default value is 8085', ge=1025, le=65535)] = '8085'
    https_port_443: Annotated[Optional[bool], Field(serialization_alias='https-port-443', description='Enable WebUI access on HTTPS port (443)')] = None
    max_clients: Annotated[Optional[int], Field(serialization_alias='max-clients', description="Configure Web servers' maximum supported concurrent clients <25-320>", ge=25, le=320)] = None
    max_sessions_per_client: Annotated[Optional[int], Field(serialization_alias='max-sessions-per-client', description="Web servers' maximum supported concurrent sessions per client. Range: 1-8. This configuration is AOSCX specific", ge=1, le=8)] = '6'
    management_style: Annotated[Optional[ManagementStyle], Field(serialization_alias='management-style', description='Web management user interface style. Default is IMPROVED')] = 'IMPROVED'
    listen_port: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='listen-port', description='Port type(s) used for web management. Default is BOTH')] = 'BOTH'
    ssl_port: Annotated[Optional[int], Field(serialization_alias='ssl-port', description='The TCP port for HTTPS', ge=0, le=65535)] = '443'
    management_url: Annotated[Optional[str], Field(serialization_alias='management-url', description='URL for the web interface help page', max_length=256, min_length=1)] = 'http://h17007.www1.hpe.com/device_help'
    support_url: Annotated[Optional[str], Field(serialization_alias='support-url', description='URL for the web interface support page', max_length=256, min_length=1)] = 'https://www.hpe.com/us/en/networking.html'
    idle_timeout: Annotated[Optional[int], Field(serialization_alias='idle-timeout', description='Web management session timeout in seconds.', ge=120, le=7200)] = None
    enabled_vrfs: Annotated[Optional[List[EnabledVrf2]], Field(serialization_alias='enabled-vrfs', max_length=2147483647)] = None
    access_mode: Annotated[Optional[AccessMode], Field(serialization_alias='access-mode', description="Web servers' REST API data management configuration. This configuration applies to all users, regardless of their authorization role. Range: read-only, read-write. This configuration is AOSCX specific")] = 'READ_WRITE'


class ArubaWebserverWebserver(BaseModel):
    webservers: Annotated[Optional[Webservers], Field(description='Configurations related to authentication, access level and user session management for webservers hosted in the device')] = None


class EnabledVrf3(EnabledVrf1):
    pass


class Cipher1(Cipher):
    pass


class HostKeyAlgorithm1(HostKeyAlgorithm):
    pass


class KexAlgorithm1(KexAlgorithm):
    pass


class Mac1(Mac):
    pass


class PubkeyAlgorithm1(PubkeyAlgorithm):
    pass


class AllowList1(AllowList):
    pass


class SshServerGlobalConfigs(BaseModel):
    enable: Annotated[Optional[bool], Field(description='Enable SSH Authentication.')] = None
    password_authentication: Annotated[Optional[bool], Field(serialization_alias='password-authentication', description='Enable SSH password authentication.')] = None
    pubkey_authentication: Annotated[Optional[bool], Field(serialization_alias='pubkey-authentication', description='Enable SSH public key authentication.')] = None
    two_factor_authentication: Annotated[Optional[TwoFactorAuthentication], Field(serialization_alias='two-factor-authentication', description='Require a certificate and a password for authentication.')] = None
    certificate_as_authorized_key: Annotated[Optional[bool], Field(serialization_alias='certificate-as-authorized-key', description='Check authenticating certificate for login username instead of local authorized-keys.')] = None
    enabled_vrfs: Annotated[Optional[List[EnabledVrf3]], Field(serialization_alias='enabled-vrfs', max_length=2147483647)] = None
    ciphers: Annotated[Optional[List[Cipher1]], Field(description='SSH ciphers.', max_length=2147483647)] = None
    host_key_algorithms: Annotated[Optional[List[HostKeyAlgorithm1]], Field(serialization_alias='host-key-algorithms', description='SSH host key algorithms.', max_length=2147483647)] = None
    kex_algorithms: Annotated[Optional[List[KexAlgorithm1]], Field(serialization_alias='kex-algorithms', description='SSH key exchange algorithms.', max_length=2147483647)] = None
    macs: Annotated[Optional[List[Mac1]], Field(description='SSH MACs.', max_length=2147483647)] = None
    pubkey_algorithms: Annotated[Optional[List[PubkeyAlgorithm1]], Field(serialization_alias='pubkey-algorithms', description='SSH public key algorithms.', max_length=2147483647)] = None
    allow_list: Annotated[Optional[AllowList1], Field(serialization_alias='allow-list', description='SSH host allow list configuration.\nFor CX device, maximum of 20 entries in allow-list is supported.')] = None
    server_port: Annotated[Optional[int], Field(serialization_alias='server-port', description='TCP port where the SSH server will listen on.', ge=1, le=65535)] = None
    timeout: Annotated[Optional[int], Field(description='Number of seconds before the authentication times out.', ge=1, le=600)] = None
    max_auth_attempts: Annotated[Optional[int], Field(serialization_alias='max-auth-attempts', description='Maximum number of retries during the SSH login.', ge=1, le=10)] = None
    rekey_time: Annotated[Optional[int], Field(serialization_alias='rekey-time', description='Time in minutes before an SSH rekey is initiated.', ge=10, le=60)] = None
    rekey_volume: Annotated[Optional[int], Field(serialization_alias='rekey-volume', description='Amount of traffic in KB before an SSH rekey is initiated.', ge=100, le=1048576)] = None
    listen_interface: Annotated[Optional[TelnetServerListenInterface], Field(serialization_alias='listen-interface', description='The type of interface that the SSH server is available.')] = None
    file_transfer: Annotated[Optional[bool], Field(serialization_alias='file-transfer', description='Enable the SSH file transfer server.')] = None


class ArubaSshServerSshServerGlobalConfig(BaseModel):
    ssh_server_global_configs: Annotated[Optional[SshServerGlobalConfigs], Field(serialization_alias='ssh-server-global-configs', description='SSH server configuration.')] = None


class LocalManagementprofile(ArubaManagementAccountingMgmtAccounting, AuthenticationMgmt, ArubaManagementAuthorizationMgmtAuthorization, ArubaWebserverWebserver, ArubaSshServerSshServerGlobalConfig):
    name: Annotated[Optional[str], Field(description='Local Management Profile name to be configured.', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Local Management Profile description.', max_length=256, min_length=1)] = None
    console: Annotated[Optional[Console], Field(description='Management console related configuration data.')] = None
    audit_period: Annotated[Optional[int], Field(serialization_alias='audit-period', description='Configure audit period. Value of 0 implies disabling of audit-info.', ge=0, le=365)] = None
    localauth: Annotated[Optional[bool], Field(description='Enable Local authentication even if radius authentication times out.')] = None
    bluetooth: Annotated[Optional[bool], Field(description='Enables management access to a switch through a USB Bluetooth adapter.')] = None
    hash_mgmt_password: Annotated[Optional[HashMgmtPassword], Field(serialization_alias='hash-mgmt-password', description='Enable/Disable hashing of the management user password.')] = None
    managed_mode_profile: Annotated[Optional[ManagedModeProfile], Field(serialization_alias='managed-mode-profile', description='Enable automatic configuration of the APs in the management mode.')] = None
    login: Annotated[Optional[Login], Field(description='Management login configurations.')] = None
    password_complexity: Annotated[Optional[PasswordComplexity], Field(serialization_alias='password-complexity', description='Enables password complexity feature.')] = None
    telnet_server: Annotated[Optional[TelnetServer], Field(serialization_alias='telnet-server', description='Enables Telnet access to the CLI')] = None
    tftp_server: Annotated[Optional[TftpServer], Field(serialization_alias='tftp-server', description='Enable/DISABLE the TFTP server')] = None
    tftp_client: Annotated[Optional[TftpClient], Field(serialization_alias='tftp-client', description='Enable/DISABLE the TFTP client')] = None
    password_sha256: Annotated[Optional[bool], Field(serialization_alias='password-sha256', description='Enable password format SHA-256.')] = None
    disable_cipher_type: Annotated[Optional[List[DisableCipherTypeEnum]], Field(serialization_alias='disable-cipher-type', max_length=2147483647)] = None
    disable_mac: Annotated[Optional[List[DisableMacEnum]], Field(serialization_alias='disable-mac', max_length=2147483647)] = None
    disable_kex: Annotated[Optional[bool], Field(serialization_alias='disable-kex', description='Disable key exchange (KEX) algorithm for SSH.')] = None
    disable_dsa: Annotated[Optional[bool], Field(serialization_alias='disable-dsa', description='Disable DSA for SSH and only allow RSA.')] = None
    mgmt_auth_public_key: Annotated[Optional[bool], Field(serialization_alias='mgmt-auth-public-key', description="Management user's SSH Authentication method by public-key auth.")] = None
    mgmt_auth_uname_pwd: Annotated[Optional[bool], Field(serialization_alias='mgmt-auth-uname-pwd', description="Management user's SSH Authentication method by username & password.")] = None
    login_session_timeout: Annotated[Optional[int], Field(serialization_alias='login-session-timeout', description='If there is no activity for this duration the Management(Telnet, SSH and Console) session is terminated.\nFor a CX device, the default value is 30 minutes. A value of 0 disables the timeout.\nFor AP, valid range is 0 and 5-60 minitues, 0 to disable.', ge=0, le=43200)] = None
    tracking_range: Annotated[Optional[int], Field(serialization_alias='tracking-range', description="The maximum time period, in days, for which a user's login sessions will be tracked.\nFor a CX device, the default value is 30 days and the range allowed is 1..30 days.", ge=1, le=180)] = None
    max_sessions_per_user: Annotated[Optional[int], Field(serialization_alias='max-sessions-per-user', description='Maximum concurrent sessions per user.\nFor a CX device, the range allowed is 1-5 sessions.', ge=1, le=7)] = None
    banner_message: Annotated[Optional[BannerMessage], Field(serialization_alias='banner-message', description='Banner to be displayed at the login prompt when a user connects to the management interface.')] = None
    banner_exec: Annotated[Optional[BannerExec], Field(serialization_alias='banner-exec', description='Banner to be displayed after a successful login with the management\ninterface.')] = None
    nae: Annotated[Optional[Nae], Field(description='Network Analytics Engine (NAE) configuration')] = None


class LocalManagement(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    profile: Annotated[Optional[List[LocalManagementprofile]], Field(description='List of Local Management Profiles.\nFor CX device, only 1 profile supported.', max_length=2147483647)] = None


class LocalManagementGET(LocalManagement):
    metadata: Annotated[Optional[Metadata], Field(description='Summary metadata')] = None


class ArubaLocalManagementLocalMgmt(BaseModel):
    local_management: Annotated[Optional[LocalManagement], Field(serialization_alias='local-management', description='Configure local management settings of network devices via SSH, Telnet, console, or UI.\nThis ensures secure, controlled, and monitored access to the devices. Manage AAA\n(Authentication, Authorization, and Accounting) for device local management, and it ensures\nthat only authorized users can access the device, perform specific actions, and that all\nactivities are logged for auditing purposes. This feature is applicable for all devices.')] = None


class VrfItem4(ArubaVrfAccessListPolicies, ArubaL3RouteL3RouteVrfCfg):
    name: Annotated[Optional[str], Field(description='VRF name.', max_length=9999)] = None
    policy_in: Annotated[Optional[str], Field(serialization_alias='policy-in', description='Policy for inbound (Ingress) traffic applied to Distributed Services Switches.', max_length=144, min_length=1)] = None
    policy_out: Annotated[Optional[str], Field(serialization_alias='policy-out', description='Policy for outbound (Egress) traffic applied to Distributed Services Switches.', max_length=144, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='VRF description.', max_length=256, min_length=1)] = None
    multipath_hash_ipv4: Annotated[Optional[MultipathHashIpv4], Field(serialization_alias='multipath-hash-ipv4', description='Hashing algorithm used to decide\nthe nexthop to reach a given\nIPv4 source address')] = None
    multipath_hash_ipv6: Annotated[Optional[MultipathHashIpv4], Field(serialization_alias='multipath-hash-ipv6', description='Hashing algorithm used to decide\nthe nexthop to reach a given\nIPv6 source address')] = None
    route_distinguisher: Annotated[Optional[str], Field(serialization_alias='route-distinguisher', description='VRF Route Distinguisher.', max_length=9999)] = None
    evpn_import_route_targets: Annotated[Optional[List[EvpnImportRouteTarget]], Field(serialization_alias='evpn-import-route-targets', max_length=2147483647)] = None
    evpn_export_route_targets: Annotated[Optional[List[EvpnExportRouteTarget]], Field(serialization_alias='evpn-export-route-targets', max_length=2147483647)] = None
    l3vpn_only: Annotated[Optional[bool], Field(serialization_alias='l3vpn-only', description='Enable the VRF as l3vpn only')] = None
    afi_safi_configs: Annotated[Optional[List[AfiSafiConfig]], Field(serialization_alias='afi-safi-configs', description='The VRF configurations specific to address-family.', max_length=2147483647)] = None


class Vrfs(BaseModel):
    vrf: Annotated[Optional[List[VrfItem4]], Field(description='List of named VRFs.', max_length=2147483647)] = None


class ArubaVrfVrfTop(BaseModel):
    vrfs: Annotated[Optional[Vrfs], Field(description='VRF container.')] = None


class Action(ArubaPolicyRedirectConfig, ArubaPolicySourceNatConfig, ArubaPolicyDestinationNatConfig, ArubaPolicyDestinationRouteNatConfig, ArubaPolicyRouteConfig, ArubaPolicyPacketMarkingGroup, ArubaPolicyPolicingActionGroup):
    type: Annotated[Type1, Field(description='Specifies the forwarding action.  One forwarding action\nmust be specified for each policy entry')]
    send_deny_response: Annotated[Optional[bool], Field(serialization_alias='send-deny-response', description='Send deny response.')] = None
    ipsec_map: Annotated[Optional[str], Field(serialization_alias='ipsec-map', description='IPSEC map name.', max_length=256, min_length=1)] = None
    next_hop_list: Annotated[Optional[str], Field(serialization_alias='next-hop-list', description='Next-hop list name.', max_length=256, min_length=1)] = None
    secondary_actions: Annotated[Optional[SecondaryActions], Field(serialization_alias='secondary-actions', description='Container for secondary actions. These may be activated together with primary action.')] = None


class ArubaPolicyActionConfig(BaseModel):
    action: Annotated[Optional[Action], Field(description='Container for an action associated with a Policy rule.')] = None


class HostAddress(ArubaDualipDualIpAddress):
    host_address_alias: Annotated[Optional[str], Field(serialization_alias='host-address-alias', description='Host address alias.', max_length=256, min_length=1)] = None


class NetworkAddress(ArubaDualipDualIpPrefix):
    ip_prefix_alias: Annotated[Optional[str], Field(serialization_alias='ip-prefix-alias', description='IP prefix alias.', max_length=256, min_length=1)] = None


class ArubaPolicyConditionSourceBaseConfig(BaseModel):
    type: Annotated[Optional[Type5], Field(description='Source IP address type.')] = None
    address_group: Annotated[Optional[str], Field(serialization_alias='address-group', description='Reference to an IPv4 or IPv6 address group, using object-group.', max_length=9999)] = None
    host_address: Annotated[Optional[HostAddress], Field(serialization_alias='host-address', description='Source Host IP address.')] = None
    subnet_address: Annotated[Optional[SubnetAddress], Field(serialization_alias='subnet-address', description='Source Network IPv4 or IPv6 address for subnet mask.')] = None
    network_address: Annotated[Optional[NetworkAddress], Field(serialization_alias='network-address', description='Source Network IP prefix.')] = None


class Source(ArubaPolicyConditionSourceBaseConfig, ArubaPolicyConditionAggregateRulesInfo):
    net_group: Annotated[Optional[str], Field(serialization_alias='net-group', description='Net-destination Group.', max_length=63, min_length=1)] = None
    role: Annotated[Optional[str], Field(description='Source Role.', max_length=256, min_length=1)] = None


class ArubaPolicyConditionSourceConfig(BaseModel):
    source: Annotated[Optional[Source], Field(description='Source address configuration.')] = None


class Destination1(ArubaPolicyConditionAggregateRulesInfo):
    type: Annotated[Optional[Type5], Field(description='Destination IP address type.')] = None
    address_group: Annotated[Optional[str], Field(serialization_alias='address-group', description='Reference to an IPv4 or IPv6 address group, using object-group.', max_length=9999)] = None
    host_address: Annotated[Optional[HostAddress], Field(serialization_alias='host-address', description='Destination Host IP address.')] = None
    subnet_address: Annotated[Optional[SubnetAddress1], Field(serialization_alias='subnet-address', description='Destination Network IPv4 or IPv6 address for subnet mask')] = None
    network_address: Annotated[Optional[NetworkAddress], Field(serialization_alias='network-address', description='Destination Network IP prefix.')] = None
    net_group: Annotated[Optional[str], Field(serialization_alias='net-group', description='Destination Net Group.', max_length=63, min_length=1)] = None
    role: Annotated[Optional[str], Field(description='Destination Role.', max_length=256, min_length=1)] = None
    domain_name: Annotated[Optional[str], Field(serialization_alias='domain-name', description='Destination Domain Name.', max_length=256, min_length=1)] = None
    invert: Annotated[Optional[bool], Field(description='Except to the specified destination.')] = None


class ArubaPolicyConditionDestinationConfig(BaseModel):
    destination: Annotated[Optional[Destination1], Field(description='Destination address configuration.')] = None


class ArubaPolicyConditionIpProtocolFieldsCommonConfig(ArubaPolicyConditionSourceConfig, ArubaPolicyConditionDestinationConfig):
    ip_header: Annotated[Optional[IpHeader], Field(serialization_alias='ip-header', description='IP header configuration.')] = None


class DefaultValue(BaseModel):
    host_address_value: Annotated[Optional[ArubaDualipDualIpAddress], Field(serialization_alias='host-address-value', description='Host IP address.')] = None
    hostname_value: Annotated[Optional[HostnameValue], Field(serialization_alias='hostname-value')] = None
    network_address_value: Annotated[Optional[ArubaDualipDualIpPrefix], Field(serialization_alias='network-address-value', description='Network prefix.')] = None
    vlan_value: Annotated[Optional[VlanValue], Field(serialization_alias='vlan-value', description='L2 VLAN range.')] = None
    essid_value: Annotated[Optional[EssidValue], Field(serialization_alias='essid-value', description='ESSID value defined')] = None
    bfd_echo_source_address: Annotated[Optional[BfdEchoSourceAddress], Field(serialization_alias='bfd-echo-source-address', description='BFD echo source address defined')] = None
    ipv4_system_vlan_value: Annotated[Optional[Ipv4SystemVlanValue], Field(serialization_alias='ipv4-system-vlan-value', description='IPv4 system VLAN configuration.')] = None


class Alia(BaseModel):
    name: Annotated[Optional[str], Field(description='The name of the Alias.', max_length=256, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='Description of the Alias.', max_length=256, min_length=1)] = None
    type: Annotated[Optional[Type9], Field(description='Alias type.')] = None
    default_value: Annotated[Optional[DefaultValue], Field(serialization_alias='default-value', description='Default value for alias.')] = None


class Aliases(BaseModel):
    alias: Annotated[Optional[List[Alia]], Field(description='List of Aliases.', max_length=2147483647)] = None


class ArubaAliasAliasTop(BaseModel):
    aliases: Annotated[Optional[Aliases], Field(description='Top level container for Aliases.')] = None


class ArubaNamedConditionNamedConditionGroup(ArubaNamedConditionNamedServiceGroup, ArubaPolicyConditionTransportFieldsConfig, ArubaPolicyConditionIpProtocolFieldsCommonConfig, ArubaPolicyConditionEthernetHeaderConfig):
    pass


class ConditionRuleItem(ArubaNamedConditionNamedConditionGroup):
    position: Annotated[Optional[int], Field(description='Rule position.', ge=1, le=4294967295)] = None
    description: Annotated[Optional[str], Field(description='A user-defined description or comment for this Policy rule.', max_length=9999)] = None
    ignore: Annotated[Optional[bool], Field(description='Ignore rule if true.')] = None
    count: Annotated[Optional[bool], Field(description='Enable count.')] = None
    log: Annotated[Optional[bool], Field(description='Enable logging action.')] = None


class NamedConditionItem(BaseModel):
    name: Annotated[Optional[str], Field(description='Named Condition name.', max_length=128, min_length=1)] = None
    description: Annotated[Optional[str], Field(description='A user-defined description or comment for the Named Condition.', max_length=9999)] = None
    rules_type: Annotated[RulesType, Field(serialization_alias='rules-type', description='Named Condition type. All rules in the condition-rule list must be of this type.')]
    reverse_named_condition: Annotated[Optional[bool], Field(serialization_alias='reverse-named-condition', description='Reverse Named-Condition for role based policies.')] = None
    association: Annotated[Optional[Association1], Field(description='Named condition association type.')] = 'ASSOCIATION_NETWORK'
    condition_rule: Annotated[Optional[List[ConditionRuleItem]], Field(serialization_alias='condition-rule', description='List of rules comprising a named condition.', max_length=2147483647)] = None


class NamedConditions(BaseModel):
    named_condition: Annotated[Optional[List[NamedConditionItem]], Field(serialization_alias='named-condition', description='Named Condition list.', max_length=2147483647)] = None


class ArubaNamedConditionNamedConditionTop(BaseModel):
    named_conditions: Annotated[Optional[NamedConditions], Field(serialization_alias='named-conditions', description='Named conditions.')] = None


class ArubaPolicyConditionGroup(ArubaPolicyConditionServiceConfig, ArubaPolicyConditionTransportFieldsConfig, ArubaPolicyConditionIpProtocolFieldsCommonConfig, ArubaPolicyConditionEthernetHeaderConfig):
    time_range_name: Annotated[Optional[str], Field(serialization_alias='time-range-name', description='Reference to named time range.', max_length=256, min_length=1)] = None


class Condition(ArubaPolicyConditionGroup):
    type: Annotated[Optional[Type], Field(description='Condition type for rule.')] = None
    rule_type: Annotated[RuleType, Field(serialization_alias='rule-type', description='Condition type for rule.')]


class ArubaPolicyConditionConfig(BaseModel):
    condition: Annotated[Optional[Condition], Field(description='Specifies the triggering condition for a Policy rule.')] = None


class PolicyRuleItem(ArubaPolicyConditionConfig, ArubaPolicyActionConfig, ArubaPolicyRuleAggregator):
    position: Annotated[Optional[int], Field(description='The sequence id determines the order in which rules\nare applied.  The sequence id must be unique for each rule\nin a Policy.  Target devices should apply the rules\nin ascending order determined by sequence id (low to\nhigh), rather than the relying only on order in the list.', ge=1, le=4294967295)] = None
    description: Annotated[Optional[str], Field(description='A user-defined description or comment for this Policy rule.', max_length=256, min_length=1)] = None
    devices_applicable: Annotated[Optional[str], Field(serialization_alias='devices-applicable', description="Indication if current rule is supported by ALL or subset of devices.\nAllowed values are 'full' and 'partial' based on ALL or subset respectively", max_length=256, min_length=1)] = None


class ArubaPolicyPolicyRulesGroup(BaseModel):
    policy_rule: Annotated[Optional[List[PolicyRuleItem]], Field(serialization_alias='policy-rule', description='Policy Rule.', max_length=2147483647)] = None


class SecurityPolicy(ArubaPolicyPolicyRulesGroup):
    type: Annotated[Optional[Type3], Field(description='The type determines the fields allowed in the policy entries\nbelonging to the Policy (e.g., IPv4, IPv6, etc.)')] = None
    description: Annotated[Optional[str], Field(description='Description or comment for the Security Policy.', max_length=256, min_length=1)] = None
    calea: Annotated[Optional[bool], Field(description='Enable CALEA.')] = None
    redirect_blocked_http_url: Annotated[Optional[bool], Field(serialization_alias='redirect-blocked-http-url', description='Redirect blocked HTTP URL.')] = None
    redirect_url: Annotated[Optional[str], Field(serialization_alias='redirect-url', description='Redirect URL.', max_length=256, min_length=1)] = None


class ArubaPolicySecurityPolicyGroup(BaseModel):
    security_policy: Annotated[Optional[SecurityPolicy], Field(serialization_alias='security-policy', description='Security Policy.')] = None


class PolicyItem(ArubaPolicySecurityPolicyGroup):
    name: Annotated[Optional[str], Field(description='The name of the policy.', max_length=144, min_length=1)] = None
    type: Annotated[Optional[Type2], Field(description='Policy type.')] = None
    dsf_enable: Annotated[Optional[bool], Field(serialization_alias='dsf-enable', description='Set distributed service firewall enable.')] = None
    association: Annotated[Optional[Association], Field(description='Policy association type.')] = 'ASSOCIATION_ROLE'
    description: Annotated[Optional[str], Field(description='Description or comment for the policy.', max_length=256, min_length=1)] = None


class Policies(BaseModel):
    policy: Annotated[Optional[List[PolicyItem]], Field(description='Configure Policy.', max_length=2147483647)] = None


class ArubaPolicyPolicyTop(BaseModel):
    policies: Annotated[Optional[Policies], Field(description='Configure Policies.')] = None
