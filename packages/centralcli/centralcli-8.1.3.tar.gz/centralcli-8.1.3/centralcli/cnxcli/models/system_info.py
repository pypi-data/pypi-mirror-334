# generated by datamodel-codegen:
#   filename:  system-info.json
#   timestamp: 2025-03-11T21:01:00+00:00

from __future__ import annotations

from typing import Annotated, Optional

from pydantic import BaseModel, Field


class SystemInfoSchema(BaseModel):
    hostname_alias: Annotated[
        Optional[str],
        Field(
            alias='hostname-alias',
            description='The user may apply aliases for device specific practical naming when no hostname is configured, allowing\nthe user to define some hostname parameters as variables that can be updated on a scope specific basis.',
            max_length=256,
            min_length=1,
        ),
    ] = None
    hostname: Annotated[
        Optional[str],
        Field(
            description='The hostname to be configured for a device, unique for each device.\nAll device types support alphanumeric values (0-9, a-z, A-Z) and dash (-) as special character.\nHostname must be 1-128 characters. Hostname has no restrictions for AP.\nAOS-CX: length: 1-32.',
            max_length=128,
            min_length=1,
        ),
    ] = None
    contact: Annotated[
        Optional[str],
        Field(
            description='Device contact information, often an email.',
            max_length=255,
            min_length=1,
        ),
    ] = None
    location: Annotated[
        Optional[str],
        Field(description='Device location information.', max_length=255, min_length=1),
    ] = None
    sys_description: Annotated[
        Optional[str],
        Field(
            alias='sys-description',
            description='A descriptive line about the device and/or collection it belongs to.',
            max_length=64,
            min_length=1,
        ),
    ] = None
    snmpv3_local_engine_id: Annotated[
        Optional[str],
        Field(
            alias='snmpv3-local-engine-id',
            description='Engine ID of the system, unique for each device across the communicating SNMPv3 devices.\nThis engine-id is used by the NMS management tool to identify and distinguish multiple\nswitches on the same network.\nFor CX switches, the Engine ID must be in colon separated hexadecimal notation\nand must be between 8 and 38 characters in length',
            max_length=38,
            min_length=6,
        ),
    ] = None
    snmpv3_user_engine_id: Annotated[
        Optional[str],
        Field(
            alias='snmpv3-user-engine-id',
            description='User defined engine ID of the system, unique across the communicating SNMPv3 devices.',
            max_length=38,
            min_length=6,
        ),
    ] = None


class Successful200(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['200'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Success code.',
            examples=['SUCC_001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of successful response.\n',
            examples=['Success.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error400(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['400'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_AP001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Bad request. Invalid values supplied in request.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error401(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['401'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_R001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Unauthorized. Failed in RBAC Authorization.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error403(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['403'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_CN001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Forbidden. Capability Rule fail.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error404(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['404'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_CN003'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Not found. Yang / Corresponding Rule is missing.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error406(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['406'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_AP003'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Not Acceptable. Invalid data format.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error408(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['408'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_K001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Request Timeout.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error412(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['412'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_LY002'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Precondition Failed.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class Error500(BaseModel):
    httpStatusCode: Annotated[
        int,
        Field(
            description='HTTP response status codes.', examples=['500'], ge=0, le=599
        ),
    ]
    errorCode: Annotated[
        str,
        Field(
            description='Error code.',
            examples=['ERR_C001'],
            max_length=64,
            min_length=1,
        ),
    ]
    message: Annotated[
        str,
        Field(
            description='Description of error.\n',
            examples=['Internal server error. Invalid scope.'],
            max_length=512,
        ),
    ]
    debugId: Annotated[
        str,
        Field(
            description='Debug ID.',
            examples=['0d6666a3-23fa-436c-8873-4186fa251ce6'],
            max_length=64,
            min_length=1,
        ),
    ]


class SystemInfo(SystemInfoSchema):
    pass


class ArubaSystemInfoSystemInfoConfiguration(BaseModel):
    system_info: Annotated[
        Optional[SystemInfo],
        Field(
            alias='system-info', description='The system information configurations.'
        ),
    ] = None