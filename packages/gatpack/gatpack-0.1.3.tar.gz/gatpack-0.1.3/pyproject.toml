[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "gatpack"
version = "0.1.3"
description = "A PDF and website templating tool"
authors = [{ name = "Gatlen Culp", email = "GatlenCulp@gmail.com" }]
license = { file = "LICENSE" }
readme = { file = "README.md", content-type = "text/markdown" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
]
requires-python = ">=3.9"

dependencies = [
    "loguru>=0.7.3", # Better logging
    # "plotly>=5.24.1", # Interactive plotting
    "pydantic>=2.10.3", # Data validation
    "rich>=13.9.4",     # Rich terminal output
    # "numpy>=1.26.4", # Numerical computing # Load .env into environment vars
    "python-dotenv>=1.0.0",
    "typer>=0.15.1",
    "cookiecutter>=2.6.0",
    "jinja2>=3.1.5",
    "pypdf>=5.1.0",
    "reportlab>=4.2.5",
    "orjson>=3.10.15",
]

[project.scripts]
gatpack = "gatpack.cli:app"

[dependency-groups]

dev = [ # Development tools
    "better-exceptions>=0.3.3", # Improved error messages
    "commitizen>=4.1.1",        # Standardized commit messages
    "cruft>=2.15.0",            # Project template management
    "faker>=33.1.0",            # Fake data generation
    "hypothesis>=6.122.3",      # Property-based testing
    "pip>=24.3.1",              # Package installer
    "pre-commit>=4.1.0",        # Git pre-commit hooks
    "polyfactory>=2.18.1",      # Test data factory
    "pyinstrument>=5.0.0",      # Profiler
    # "pyprojectsort>=0.3.0",  # pyproject.toml sorter (TODO: Find replacement)
    "pyright>=1.1.390",           # Static type checker
    "pytest-cases>=3.8.6",        # Parametrized testing
    "pytest-cov>=6.0.0",          # Coverage reporting
    "pytest-icdiff>=0.9",         # Improved diffs
    "pytest-mock>=3.14.0",        # Mocking
    "pytest-playwright>=0.6.2",   # Browser testing
    "pytest-profiling>=1.8.1",    # Test profiling
    "pytest-random-order>=1.1.1", # Randomized test order
    "pytest-shutil>=1.8.1",       # File system testing
    "pytest-split>=0.10.0",       # Parallel testing
    "pytest-sugar>=1.0.0",        # Test progress visualization
    "pytest-timeout>=2.3.1",      # Test timeouts
    "pytest>=8.3.4",              # Testing framework
    "ruff>=0.8.3",                # Fast Python linter
    # "taplo>=0.9.3",            # TOML toolkit (Requires Rust)
    "tox>=4.23.2",         # Test automation
    "uv>=0.5.7",           # Fast pip replacement
    "ipdb>=0.13.13",
    "pyinstaller>=6.12.0",
]
dev-doc = [ # Documentation tools
    "mdformat>=0.7.19",        # Markdown formatter
    "mkdocs-material>=9.5.48", # Documentation theme
    "mkdocs>=1.6.1",           # Documentation generator
]


[project.urls]
Repository = "https://github.com/GatlenCulp/GatPack"

[tool.ruff]
cache-dir = ".cache/ruff"
line-length = 100

[tool.ruff.lint]
select = ["ALL"]
ignore = ["UP007"]

[tool.ruff.lint.isort]
known-first-party = ["gatpack"]
force-sort-within-sections = true

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Allow unused imports in __init__.py

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pycodestyle]
max-doc-length = 99

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.pytest.ini_options]
addopts = """
--tb=long
--code-highlight=yes
"""

testpaths = ["tests"]
log_file = "./logs/pytest.log"


[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = true
exclude = '\.venv'

[tool.pyright]
include = ["."]
