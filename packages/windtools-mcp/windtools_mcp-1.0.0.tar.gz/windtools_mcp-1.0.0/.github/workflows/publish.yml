name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - 'VERSION'

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      create_release: ${{ steps.check_tag.outputs.create_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get VERSION content
        id: get_version
        run: |
          VERSION_NUMBER=$(grep -oP '__version__ = "\K[^"]+' VERSION)
          echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION_NUMBER"

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="v${{ steps.get_version.outputs.version }}"
          if git tag -l "$VERSION" | grep -q "$VERSION"; then
            echo "Tag $VERSION already exists, skipping release"
            echo "create_release=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $VERSION does not exist, creating release"
            echo "create_release=true" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check_version
    if: needs.check_version.outputs.create_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push tag
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "v${{ needs.check_version.outputs.version }}"
          message: "Release v${{ needs.check_version.outputs.version }}"
          force_push_tag: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check_version.outputs.version }}
          name: Release v${{ needs.check_version.outputs.version }}
          draft: false
          prerelease: false

  publish:
    needs: [ check_version, release ]
    if: needs.check_version.outputs.create_release == 'true'
    runs-on: ubuntu-latest
    environment: release
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install build twine
          python -m build
          twine upload dist/*