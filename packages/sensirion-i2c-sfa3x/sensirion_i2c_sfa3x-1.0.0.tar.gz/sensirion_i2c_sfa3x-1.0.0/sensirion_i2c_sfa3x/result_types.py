#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sfa3x
# Model-Version: 1.1.0
#
"""
The signal classes specify transformations of the raw sensor signals into a meaningful units.
The generated signal types are used by the driver class and not intended for direct use.
"""

from sensirion_driver_support_types.signals import AbstractSignal


class SignalHcho(AbstractSignal):
    """Measured formaldehyde concentration in ppb."""

    def __init__(self, hcho_raw):
        self._hcho = hcho_raw / 5.0

    @property
    def value(self):
        return self._hcho

    def __str__(self):
        return '{0:.2f}'.format(self.value)


class SignalHumidity(AbstractSignal):
    """Measured humidity in %RH"""

    def __init__(self, humidity_raw):
        self._humidity = humidity_raw / 100.0

    @property
    def value(self):
        return self._humidity

    def __str__(self):
        return '{0:.2f}'.format(self.value)


class SignalTemperature(AbstractSignal):
    """Measured temperature in degrees Celsius"""

    def __init__(self, temperature_raw):
        self._temperature = temperature_raw / 200.0

    @property
    def value(self):
        return self._temperature

    def __str__(self):
        return '{0:.2f}'.format(self.value)

