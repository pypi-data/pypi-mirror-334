#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sfa3x
# Model-Version: 1.1.0
#
"""
The class Sfa3xDeviceBase implements the low level interface of the sensor.
The class Sfa3xDevice extends the Sfa3xDeviceBase. It provides additional functions to ease the use of the
sensor.
"""

from sensirion_driver_adapters.transfer import execute_transfer
from sensirion_driver_support_types.mixin_access import MixinAccess
from sensirion_i2c_sfa3x.commands import (DeviceReset, GetDeviceMarking, ReadMeasuredValuesAsIntegers,
                                          StartContinuousMeasurement, StopMeasurement)

from sensirion_i2c_sfa3x.result_types import (SignalHcho, SignalHumidity, SignalTemperature)


class Sfa3xDeviceBase:
    """Low level API implementation of SFA3X"""

    def __init__(self, channel):
        self._channel = channel

    @property
    def channel(self):
        return self._channel

    def start_continuous_measurement(self):
        """
        Starts the continuous measurement.
        After power-up, the sensor module is in idle-mode. Before any measurement values can be read,
        the measurement mode needs to be started using this command.
        Only available in idle mode, i.e. when no measurement is running.
        If a measurement is already running, stop it first with the stop_measurement command.
        """
        transfer = StartContinuousMeasurement()
        return execute_transfer(self._channel, transfer)

    def stop_measurement(self):
        """
        Stops the continuous measurement and returns to idle mode.
        This command is only available in measurement mode. Returns error 67 (hex 0x43) if no measurement
        is running.
        """
        transfer = StopMeasurement()
        return execute_transfer(self._channel, transfer)

    def read_measured_values_as_integers(self):
        """
        Reads the measured values from the module.
        The sensor will always return the latest available measurement.
        If a read measured value command is issued before a new measurement is available,
        the last available measurement will be sent again in the reply.
        Before the first sensor reading is available after starting the continuous measurement,
        the sensor returns an empty frame and error code 32 (hex 0x20).

        :return hcho:
            Formaldehyde concentration in ppb with a scaling of 5.
        :return humidity:
            Relative humidity in %RH with a scaling of 100.
        :return temperature:
            Temperature in degrees Celsius with a scaling of 200.
        """
        transfer = ReadMeasuredValuesAsIntegers()
        return execute_transfer(self._channel, transfer)

    def get_device_marking(self):
        """
        Read the device marking string from the device.

        :return device_marking:
            Null-terminated ASCII string containing the serial number (same as barcode on sensor module).
            Up to 32 characters can be read from the device.
        """
        transfer = GetDeviceMarking()
        return execute_transfer(self._channel, transfer)[0]

    def device_reset(self):
        """
        After calling this command, the module is in the same state as after a Power-Reset.
        The reset is executed after sending the MISO response frame.
        """
        transfer = DeviceReset()
        return execute_transfer(self._channel, transfer)


class Sfa3xDevice(Sfa3xDeviceBase):
    """Driver class implementation of SFA3X"""

    #: Access to base class
    sfa3x = MixinAccess()

    def __init__(self, channel):
        super().__init__(channel)

    def read_measured_values(self):
        """
        Read measured values and apply scaling

        :return hcho:
            Formaldehyde concentration in ppb
        :return humidity:
            Relative humidity in %RH
        :return temperature:
            Temperature in degrees Celsius
        """
        (hcho_raw, humidity_raw, temperature_raw
         ) = self.read_measured_values_as_integers()
        return (SignalHcho(hcho_raw), SignalHumidity(humidity_raw), SignalTemperature(temperature_raw))
