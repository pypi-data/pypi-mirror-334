#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sfa3x
# Model-Version: 1.1.0
#
"""
The transfer classes specify the data that is transferred between host and sensor. The generated transfer classes
are used by the driver class and not intended for direct use.
"""

from sensirion_driver_adapters.transfer import Transfer
from sensirion_driver_adapters.rx_tx_data import TxData, RxData


class StartContinuousMeasurement(Transfer):
    """
    Starts the continuous measurement.
    After power-up, the sensor module is in idle-mode. Before any measurement values can be read,
    the measurement mode needs to be started using this command.
    Only available in idle mode, i.e. when no measurement is running.
    If a measurement is already running, stop it first with the stop_measurement command.
    """

    CMD_ID = 0x6

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.001, slave_address=None, ignore_ack=False)


class StopMeasurement(Transfer):
    """
    Stops the continuous measurement and returns to idle mode.
    This command is only available in measurement mode. Returns error 67 (hex 0x43) if no measurement
    is running.
    """

    CMD_ID = 0x104

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.05, slave_address=None, ignore_ack=False)


class ReadMeasuredValuesAsIntegers(Transfer):
    """
    Reads the measured values from the module.
    The sensor will always return the latest available measurement.
    If a read measured value command is issued before a new measurement is available,
    the last available measurement will be sent again in the reply.
    Before the first sensor reading is available after starting the continuous measurement,
    the sensor returns an empty frame and error code 32 (hex 0x20).
    """

    CMD_ID = 0x327

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.005, slave_address=None, ignore_ack=False)
    rx = RxData('>hhh')


class GetDeviceMarking(Transfer):
    """Read the device marking string from the device."""

    CMD_ID = 0xd060

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=0.002, slave_address=None, ignore_ack=False)
    rx = RxData('>32s')


class DeviceReset(Transfer):
    """
    After calling this command, the module is in the same state as after a Power-Reset.
    The reset is executed after sending the MISO response frame.
    """

    CMD_ID = 0xd304

    def pack(self):
        return self.tx_data.pack([])

    tx = TxData(CMD_ID, '>H', device_busy_delay=1.0, slave_address=None, ignore_ack=False)
