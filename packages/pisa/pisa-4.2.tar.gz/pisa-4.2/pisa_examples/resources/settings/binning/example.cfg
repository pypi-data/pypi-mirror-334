true_allsky.order = true_coszen, true_energy
true_allsky.true_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_allsky.true_coszen = {'num_bins': 40, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}

true_allsky_fine.order = true_coszen, true_energy
true_allsky_fine.true_energy = {'num_bins': 400, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_allsky_fine.true_coszen = {'num_bins': 400, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}

true_allsky_coarse.order = true_coszen, true_energy
true_allsky_coarse.true_energy = {'num_bins': 10, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_allsky_coarse.true_coszen = {'num_bins': 10, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}

true_upgoing.order = true_coszen, true_energy
true_upgoing.true_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_upgoing.true_coszen = {'num_bins': 20, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}

true_upgoing_fine.order = true_coszen, true_energy
true_upgoing_fine.true_energy = {'num_bins': 400, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_upgoing_fine.true_coszen = {'num_bins': 200, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}

true_upgoing_coarse.order = true_coszen, true_energy
true_upgoing_coarse.true_energy = {'num_bins': 10, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm true}'}
true_upgoing_coarse.true_coszen = {'num_bins': 5, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm true}}'}


reco_allsky.order = reco_coszen, reco_energy, pid
reco_allsky.reco_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_allsky.reco_coszen = {'num_bins': 40, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}
reco_allsky.pid = {'bin_edges': [-np.inf, 0.55, np.inf], 'tex': r'{\rm PID}', 'bin_names': ['cascade', 'track']}

reco_allsky_nopid.order = reco_coszen, reco_energy
reco_allsky_nopid.reco_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_allsky_nopid.reco_coszen = {'num_bins': 40, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}

reco_allsky_coarse.order = reco_coszen, reco_energy, pid
reco_allsky_coarse.reco_energy = {'num_bins': 10, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_allsky_coarse.reco_coszen = {'num_bins': 10, 'is_lin': True, 'domain': [-1, 1], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}
reco_allsky_coarse.pid = {'bin_edges': [-np.inf, 0.55, np.inf], 'tex': r'{\rm PID}', 'bin_names': ['cascade', 'track']}

reco_upgoing.order = reco_coszen, reco_energy, pid
reco_upgoing.reco_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_upgoing.reco_coszen = {'num_bins': 20, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}
reco_upgoing.pid = {'bin_edges': [-np.inf, 0.55, np.inf], 'tex': r'{\rm PID}', 'bin_names': ['cascade', 'track']}

reco_upgoing_nopid.order = reco_coszen, reco_energy
reco_upgoing_nopid.reco_energy = {'num_bins': 40, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_upgoing_nopid.reco_coszen = {'num_bins': 20, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}

reco_upgoing_coarse.order = reco_coszen, reco_energy, pid
reco_upgoing_coarse.reco_energy = {'num_bins': 10, 'is_log': True, 'domain': [1, 80] * units.GeV, 'tex': r'E_{\rm reco}'}
reco_upgoing_coarse.reco_coszen = {'num_bins': 5, 'is_lin': True, 'domain': [-1, 0], 'tex': r'\cos\,\theta_{Z,{\rm reco}}'}
reco_upgoing_coarse.pid = {'bin_edges': [-np.inf, 0.55, np.inf], 'tex': r'{\rm PID}', 'bin_names': ['cascade', 'track']}

# DeepCore binning in reconstructed observables
# In this toy example, the PID bining is: pid < 0 -> cascade, pid > 0 -> track 
reco_binning.order = reco_energy, reco_coszen, pid
reco_binning.reco_energy = {'num_bins':10, 'is_log':True, 'domain':[5.,100.], 'tex':r'E_{\rm reco}'}
reco_binning.reco_coszen = {'num_bins':10, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos{\theta}_{\rm reco}'}
reco_binning.pid = {'bin_edges': [-1000.,0.,1000.], 'tex':r'{\rm PID}', 'bin_names':['cascades','tracks']}

# Binning for calculating on a grid
# For example, may choose to compute flux and/or oscillation probabilities on a grid, rather than individually
# for every event. This is much faster, and if the grid is well chosen has a negligible impact on accuracy.
calc_grid.order = true_energy, true_coszen
calc_grid.true_energy = {'num_bins':200, 'is_log':True, 'domain':[1., 1000] * units.GeV, 'tex':r'E_{\rm true}'}
calc_grid.true_coszen = {'num_bins':200, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos\,\theta_{z,{\rm true}}'}

# Coarse grid to do quick calculations in unit tests
calc_grid_coarse.order = true_energy, true_coszen
calc_grid_coarse.true_energy = {'num_bins':50, 'is_log':True, 'domain':[1., 1000] * units.GeV, 'tex':r'E_{\rm true}'}
calc_grid_coarse.true_coszen = {'num_bins':50, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos\,\theta_{z,{\rm true}}'}

# Example variable-binning definitions to demonstrate deviating syntax

# First define a simple `VarBinning` with pid serving as the split/selection
# dimension on which the reco_coszen binning depends (reco_energy the same
# across all pid bins)
reco_var_binning.order = reco_energy, reco_coszen
reco_var_binning.split = {'name':'pid', 'bin_edges': [-3.,0.,1000.], 'tex':r'{\rm PID}'}
reco_var_binning.reco_energy = {'num_bins':10, 'is_log':True, 'domain':[5.,100.], 'tex':r'E_{\rm reco}'}
reco_var_binning.reco_coszen = [{'num_bins':10, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos{\theta}_{\rm reco}'}, {'num_bins':20, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos{\theta}_{\rm reco}'}]

# Second `VarBinning` example uses selection-criteria strings to split events
reco_var_binning_2.order = reco_energy, reco_coszen
reco_var_binning_2.split = (true_energy > 10) & (true_coszen > 0), (true_coszen <= 0)
reco_var_binning_2.reco_energy = {'num_bins':10, 'is_log':True, 'domain':[5.,100.], 'tex':r'E_{\rm reco}'}
reco_var_binning_2.reco_coszen = [{'num_bins':10, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos{\theta}_{\rm reco}'}, {'num_bins':20, 'is_lin':True, 'domain':[-1,1], 'tex':r'\cos{\theta}_{\rm reco}'}]
