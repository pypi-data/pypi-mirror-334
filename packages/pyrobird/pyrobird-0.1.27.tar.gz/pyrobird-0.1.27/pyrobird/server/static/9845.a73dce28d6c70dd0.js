"use strict";(self.webpackChunkfirebird=self.webpackChunkfirebird||[]).push([[9845],{9845:(O,E,c)=>{c.r(E),c.d(E,{TGraphPolarPainter:()=>w,TGraphPolargramPainter:()=>x});var _=c(467),M=c(6998),y=c(5680),u=c(9041),P=c(675),T=c(9025),b=c(4952);class x extends P.JW{constructor(t,r){super(t,r),this.$polargram=!0,this.zoom_rmin=this.zoom_rmax=0}translate(t,r,n){let a=this.r(r),e=a/this.szx*this.szy,i=a*Math.cos(-t-this.angle),o=e*Math.sin(-t-this.angle);return n||(i=Math.round(i),o=Math.round(o),a=Math.round(a),e=Math.round(e)),{grx:i,gry:o,rx:a,ry:e}}format(t){return t===Math.round(t)?t.toString():this.ndig>10?t.toExponential(4):t.toFixed(this.ndig>0?this.ndig:0)}axisAsText(t,r){return"r"===t?r===Math.round(r)?r.toString():this.ndig>10?r.toExponential(4):r.toFixed(this.ndig+2):(r*=180/Math.PI)===Math.round(r)?r.toString():r.toFixed(1)}getFrameRect(){const t=this.getPadPainter(),r=t.getRootPad(!0),n=t.getPadWidth(),a=t.getPadHeight(),e={};return r?(e.szx=Math.round(Math.max(.1,.5-Math.max(r.fLeftMargin,r.fRightMargin))*n),e.szy=Math.round(Math.max(.1,.5-Math.max(r.fBottomMargin,r.fTopMargin))*a)):(e.szx=Math.round(.5*n),e.szy=Math.round(.5*a)),e.width=2*e.szx,e.height=2*e.szy,e.x=Math.round(n/2-e.szx),e.y=Math.round(a/2-e.szy),e.hint_delta_x=e.szx,e.hint_delta_y=e.szy,e.transform=(0,u.bk)(e.x,e.y)||"",e}mouseEvent(t,r){const a=this.getLayerSvg("primitives_layer").select(".interactive_ellipse");if(a.empty())return;let e=null;if("leave"!==t){const i=(0,y.Wn)(r,a.node());e={x:i[0],y:i[1],touch:!1}}this.processFrameTooltipEvent(e)}mouseWheel(t){t.stopPropagation(),t.preventDefault(),this.processFrameTooltipEvent(null);const r=this.getObject();if(!r)return;let n=t.wheelDelta?-t.wheelDelta:t.deltaY||t.detail;if(!n)return;n=n<0?-.2:.2;let a=this.scale_rmin,e=this.scale_rmax;e+=n*(e-a),(a<r.fRwrmin||e>r.fRwrmax)&&(a=e=0),(this.zoom_rmin!==a||this.zoom_rmax!==e)&&(this.zoom_rmin=a,this.zoom_rmax=e,this.redrawPad())}redraw(){var t=this;return(0,_.A)(function*(){if(!t.isMainPainter())return;const r=t.getObject(),n=t.getPadPainter().getFrameRect();t.createG(),(0,u.bk)(t.draw_g,Math.round(n.x+n.width/2),Math.round(n.y+n.height/2)),t.szx=n.szx,t.szy=n.szy,t.scale_rmin=r.fRwrmin,t.scale_rmax=r.fRwrmax,t.zoom_rmin!==t.zoom_rmax&&(t.scale_rmin=t.zoom_rmin,t.scale_rmax=t.zoom_rmax),t.r=(0,y.m4)().domain([t.scale_rmin,t.scale_rmax]).range([0,t.szx]),t.angle=r.fAxisAngle||0;const a=t.r.ticks(5),e=Math.round(r.fPolarTextSize*t.szy*2);let i=Math.floor(r.fNdivRad%1e4/100),o=r.fNdivPol%100;3!==o&&(o=8),t.createAttLine({attr:r}),t.gridatt||(t.gridatt=t.createAttLine({color:r.fLineColor,style:2,width:1,std:!1}));const d=Math.abs(r.fRwrmax-r.fRwrmin);t.ndig=d<=0?-3:Math.round(Math.log10(a.length/d));let l=[],p=0;for(;p<a.length;){const f=t.format(a[p]);if(l.indexOf(f)>=0){if(++t.ndig>10)break;l=[],p=0}else l.push(f),p++}let g=!1;return a[a.length-1]<r.fRwrmax&&t.zoom_rmin===t.zoom_rmax&&(a.push(r.fRwrmax),g=!0),t.startTextDrawingAsync(r.fRadialLabelFont,Math.round(r.fRadialTextSize*t.szy*2)).then(()=>{for(let f=0;f<a.length;++f){let h=t.r(a[f]),s=h/t.szx*t.szy;if(t.draw_g.append("ellipse").attr("cx",0).attr("cy",0).attr("rx",Math.round(h)).attr("ry",Math.round(s)).style("fill","none").call(t.lineatt.func),(f<a.length-1||!g)&&t.drawText({align:23,x:Math.round(h),y:Math.round(r.fRadialTextSize*t.szy*.5),text:t.format(a[f]),color:t.getColor(r.fRadialLabelColor),latex:0}),i>1&&(f<a.length-1||!g)){const m=(a[1]-a[0])/i;for(let z=1;z<i;++z){const v=a[f]+m*z;if(v>t.scale_rmax)break;h=t.r(v),s=h/t.szx*t.szy,t.draw_g.append("ellipse").attr("cx",0).attr("cy",0).attr("rx",Math.round(h)).attr("ry",Math.round(s)).style("fill","none").call(t.gridatt.func)}}}return t.finishTextDrawing()}).then(()=>t.startTextDrawingAsync(r.fPolarLabelFont,e)).then(()=>{l=8===o?["0","#frac{#pi}{4}","#frac{#pi}{2}","#frac{3#pi}{4}","#pi","#frac{5#pi}{4}","#frac{3#pi}{2}","#frac{7#pi}{4}"]:["0","#frac{2#pi}{3}","#frac{4#pi}{3}"];const f=[12,11,21,31,32,33,23,13];for(let h=0;h<o;++h){const s=2*-h*Math.PI/o-t.angle;t.draw_g.append("svg:path").attr("d",`M0,0L${Math.round(t.szx*Math.cos(s))},${Math.round(t.szy*Math.sin(s))}`).call(t.lineatt.func);const m=Math.round(16-s/Math.PI*4)%8;t.drawText({align:f[m],x:Math.round((t.szx+e)*Math.cos(s)),y:Math.round((t.szy+e/t.szx*t.szy)*Math.sin(s)),text:l[h],color:t.getColor(r.fPolarLabelColor),latex:1})}return t.finishTextDrawing()}).then(()=>{if(i=Math.floor(r.fNdivPol%1e4/100),i>1)for(let s=0;s<o*i;++s){if(s%i==0)continue;const m=2*-s*Math.PI/o/i-t.angle;t.draw_g.append("svg:path").attr("d",`M0,0L${Math.round(t.szx*Math.cos(m))},${Math.round(t.szy*Math.sin(m))}`).call(t.gridatt.func)}if(t.isBatchMode())return;b.G_.assign(t);const f=t.getLayerSvg("primitives_layer");let h=f.select(".interactive_ellipse");h.empty()&&(h=f.append("g").classed("most_upper_primitives",!0).append("ellipse").classed("interactive_ellipse",!0).attr("cx",0).attr("cy",0).style("fill","none").style("pointer-events","visibleFill").on("mouseenter",s=>t.mouseEvent("enter",s)).on("mousemove",s=>t.mouseEvent("move",s)).on("mouseleave",s=>t.mouseEvent("leave",s))),h.attr("rx",t.szx).attr("ry",t.szy),(0,y.Lt)(h.node().parentNode).attr("transform",t.draw_g.attr("transform")),M.settings.Zooming&&M.settings.ZoomWheel&&h.on("wheel",s=>t.mouseWheel(s))})})()}static draw(t,r){return(0,_.A)(function*(){const n=(0,P.Nn)(t);if(n){if(n.getObject()===r)return n;throw Error("Cannot superimpose TGraphPolargram with any other drawings")}const a=new x(t,r);return(0,T.ensureTCanvas)(a,!1).then(()=>(a.setAsMainPainter(),a.redraw())).then(()=>a)})()}}class w extends P.JW{redraw(){this.drawGraphPolar()}decodeOptions(t){const r=new u.nC(t||"L");this.options||(this.options={}),Object.assign(this.options,{mark:r.check("P"),err:r.check("E"),fill:r.check("F"),line:r.check("L"),curve:r.check("C")}),this.storeDrawOpt(t)}drawGraphPolar(){const t=this.getObject(),r=this.getMainPainter();if(!t||!r?.$polargram)return;this.options.mark&&this.createAttMarker({attr:t}),(this.options.err||this.options.line||this.options.curve)&&this.createAttLine({attr:t}),this.options.fill&&this.createAttFill({attr:t}),this.createG(),this.draw_g.attr("transform",r.draw_g.attr("transform"));let n="",a="";const e=[];for(let i=0;i<t.fNpoints;++i){if(t.fY[i]>r.scale_rmax)continue;if(this.options.err){let d=r.translate(t.fX[i],t.fY[i]-t.fEY[i]),l=r.translate(t.fX[i],t.fY[i]+t.fEY[i]);a+=`M${d.grx},${d.gry}L${l.grx},${l.gry}`,d=r.translate(t.fX[i]+t.fEX[i],t.fY[i]),l=r.translate(t.fX[i]-t.fEX[i],t.fY[i]),a+=`M${d.grx},${d.gry}A${l.rx},${l.ry},0,0,1,${l.grx},${l.gry}`}const o=r.translate(t.fX[i],t.fY[i]);this.options.mark&&(n+=this.markeratt.create(o.grx,o.gry)),(this.options.curve||this.options.line||this.options.fill)&&e.push(o)}if((this.options.fill||this.options.line)&&e.length){const i=(0,u.Mw)(e,{line:!0});this.options.fill&&this.draw_g.append("svg:path").attr("d",i+"Z").call(this.fillatt.func),this.options.line&&this.draw_g.append("svg:path").attr("d",i).style("fill","none").call(this.lineatt.func)}this.options.curve&&e.length&&this.draw_g.append("svg:path").attr("d",(0,u.Mw)(e)).style("fill","none").call(this.lineatt.func),a&&this.draw_g.append("svg:path").attr("d",a).style("fill","none").call(this.lineatt.func),n&&this.draw_g.append("svg:path").attr("d",n).call(this.markeratt.func)}createPolargram(){const t=(0,M.create)("TGraphPolargram"),r=this.getObject();let n=r.fY[0]||0,a=n;for(let e=0;e<r.fNpoints;++e)n=Math.min(n,r.fY[e]-r.fEY[e]),a=Math.max(a,r.fY[e]+r.fEY[e]);return t.fRwrmin=n-.1*(a-n),t.fRwrmax=a+.1*(a-n),t}extractTooltip(t){if(!t)return null;const r=this.getObject(),n=this.getMainPainter();let a=1e10,e=-1,i=null;for(let l=0;l<r.fNpoints;++l){const p=n.translate(r.fX[l],r.fY[l]),g=(p.grx-t.x)**2+(p.gry-t.y)**2;g<a&&(a=g,e=l,i=p)}let o=5;if(this.markeratt?.used&&(o=this.markeratt.getFullSize()),Math.sqrt(a)>o)return null;const d={name:this.getObject().fName,title:this.getObject().fTitle,x:i.grx,y:i.gry,color1:(this.markeratt?.used?this.markeratt.color:void 0)??(this.fillatt?.used?this.fillatt.color:void 0)??this.lineatt?.color,exact:Math.sqrt(a)<4,lines:[this.getObjectHint()],binindx:e,menu_dist:o,radius:o};return d.lines.push(`r = ${n.axisAsText("r",r.fY[e])}`,`phi = ${n.axisAsText("phi",r.fX[e])}`),r.fEY&&r.fEY[e]&&d.lines.push(`error r = ${n.axisAsText("r",r.fEY[e])}`),r.fEX&&r.fEX[e]&&d.lines.push(`error phi = ${n.axisAsText("phi",r.fEX[e])}`),d}showTooltip(t){let r=this.draw_g?.selectChild(".tooltip_bin");t&&this.draw_g?(r.empty()&&(r=this.draw_g.append("svg:ellipse").attr("class","tooltip_bin").style("pointer-events","none")),t.changed=r.property("current_bin")!==t.binindx,t.changed&&r.attr("cx",t.x).attr("cy",t.y).attr("rx",Math.round(t.radius)).attr("ry",Math.round(t.radius)).style("fill","none").style("stroke",t.color1).property("current_bin",t.binindx)):r?.remove()}processTooltipEvent(t){const r=this.extractTooltip(t);return(!t||!t.disabled)&&this.showTooltip(r),r}static draw(t,r,n){return(0,_.A)(function*(){const a=new w(t,r);a.decodeOptions(n);const e=a.getMainPainter();if(e&&!e.$polargram)return console.error("Cannot superimpose TGraphPolar with plain histograms"),null;let i=Promise.resolve(null);return e||(r.fPolargram||(r.fPolargram=a.createPolargram()),i=x.draw(t,r.fPolargram)),i.then(()=>(a.addToPadPrimitives(),a.drawGraphPolar(),a))})()}}}}]);