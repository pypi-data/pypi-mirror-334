import pandas as pd
from pandas.core.interchange.dataframe_protocol import DataFrame
from typing import List

from . import ScoreMetrics


class Analyze:
    """
    Analyze the rules generated by the algorithm.\n
    This class has the analyze_explanation method, that is responsible for analyzing and determining the
    quality of the rules generated by the algorithm.
    """
    def __init__(self):
        pass

    def analyze_explanation(self, dtf: DataFrame, rules: List[List[List[str | float]]], cluster_number: int,
                            other_clusters: List[int], mode='conjunction') -> DataFrame:
        """
        Analyze the explanation of rules for a specific cluster.\n

        This method evaluates the quality of rules generated by the algorithm for a given cluster.
        It calculates metrics such as separation error, coverage, and conciseness for each rule
        and returns a DataFrame containing these metrics.

        :param dtf: The DataFrame containing the data.
        :param rules: A list of rules, where each rule is a list of conditions.
        :param cluster_number: The cluster number for which the rules are being analyzed.
        :param other_clusters: A list of other cluster numbers to compare against.
        :param mode: Whether the rules are conjunctions or disjunctions.
        :return: A DataFrame containing the rules and their corresponding metrics: coverage, separation error, and conciseness.
        """
        rules_rec = []
        # Calculate the size of the class / cluster
        class_size = (dtf['Cluster'] == cluster_number).sum()
        for r in rules:
            # Compute and store the metrics for each rule
            rule = [r]
            separation_err, coverage = ScoreMetrics.separation_err_and_coverage(dtf, cluster_number, rule,
                                                                                other_clusters, class_size, mode=mode)
            rdict = {
                "rule": str(rule),
                "coverage": round(coverage, 2),
                "separation_err": round(separation_err, 2),
                "conciseness": round(1 / ScoreMetrics.conciseness(rule), 2)
            }
            rules_rec.append(rdict)

        # Create a DataFrame from the rules and their metrics, then return it.
        rules_df = pd.DataFrame(data=rules_rec, columns=['rule', 'coverage', 'separation_err', 'conciseness'])
        if len(rules_df) >= 1:
            rules_df.set_index('rule', inplace=True)
        return rules_df
