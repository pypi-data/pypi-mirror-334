syntax = "proto3";
package levers.proto.levers;

import "google/protobuf/empty.proto";
import "proto/common.proto";
import "proto/schema.proto";

option cc_generic_services = true;

//! GRPC service
service LeversService {
  // connect to exchange client server information
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}
  
  // create database
  rpc CreateDatabase(CreateDatabaseRequest) returns (common.Status) {}

  // drop database
  rpc DropDatabase(DropDatabaseRequest) returns (common.Status) {}

  // list database
  rpc ListDatabase(google.protobuf.Empty) returns (ListDatabasesResponse) {}

  // create collection 
  rpc CreateCollection(CreateCollectionRequest) returns (common.Status) {}
  
  // drop collection
  rpc DropCollection(DropCollectionRequest) returns (common.Status) {}
  
  // list all collections
  rpc ListCollections(ListCollectionsRequest) returns (ListCollectionsResponse) {}
  
  // describe some collections
  rpc DescribeCollection(DescribeCollectionRequest) returns (DescribeCollectionResponse) {}
  
  // statistic some collections
  rpc StatsCollection(StatsCollectionRequest) returns (StatsCollectionResponse) {}

  // insert entities into collection
  rpc Insert(InsertRequest) returns (MutationResult) {}
  
  // update entities into collection
  rpc Update(UpdateRequest) returns (MutationResult) {}
  
  // delete some entities from collection
  rpc Delete(DeleteRequest) returns (MutationResult) {}
  
  // do knn search on collection
  rpc Search(SearchRequest) returns (SearchResults) {}
  
  // get specific entity by pk on collection
  rpc Get(GetRequest) returns (GetResult) {}
}

//! Restful APIs 
service HttpLeversService {

  //    HTTP: POST /v1/connect
  rpc connect(HttpRequest) returns (HttpResponse) {}
  
  //    Http: POST /v1/collection/create
  //    Http: POST /v1/collection/drop
  //    Http: POST /v1/collection/describe
  //    Http: POST /v1/collection/stats
  //    Http: POST /v1/collection/list
  rpc collection(HttpRequest) returns (HttpResponse) {}
  
  //    Http: POST /v1/entities/insert
  //    Http: POST /v1/entities/update
  //    Http: POST /v1/entities/delete
  //    Http: POST /v1/entities/search
  //    Http: POST /v1/entities/get
  rpc entities(HttpRequest) returns (HttpResponse) {}
}

/**
* Request to connect to levers service
*/
message ConnectRequest {
  common.ClientInfo client_info = 2;
}

/**
* Response to connect from levers service
*/
message ConnectResponse {
  common.Status status = 1;
  common.ServerInfo server_info = 2;
}

/**
* Request to create database
*/
message CreateDatabaseRequest {
  schema.DatabaseSchema schema = 1;
}

/**
* Request to drop database
*/
message DropDatabaseRequest {
  string db_name = 1;
}

/**
* Response from list all database
*/
message ListDatabasesResponse {
  common.Status status = 1;
  repeated string db_names = 2;
}

/**
* Request to create collection 
*/
message CreateCollectionRequest {
  schema.CollectionSchema schema = 1;
  string db_name = 2;
}

/**
* Request to drop collection
*/
message DropCollectionRequest {
  string collection_name = 1;
  string db_name = 2;
}

/**
* Request to list all collections
*/
message ListCollectionsRequest {
  /* add filters some day */
  string db_name = 1;
}

/**
* Response from list all collections
*/
message ListCollectionsResponse {
  common.Status status = 1;
  repeated string collection_names = 2;
}

/**
* Request to get collection meta, eg: schema, collectionID, shards number, etc
*/
message DescribeCollectionRequest {
  string collection_name = 1;
  string db_name = 2;
}

/**
* Response from describe collection
*/
message DescribeCollectionResponse {
  common.Status status = 1;
  schema.CollectionSchema schema = 2;
}

/**
* Request to get collection statistics
*/
message StatsCollectionRequest {
  string collection_name = 1;
  string db_name = 2;
}

/**
* Response from get Collection statistics
*/
message StatsCollectionResponse {
  common.Status status = 1;
  common.CollectionStats stats = 2;
}

/**
* Request to insert entities
*/
message InsertRequest {
  string collection_name = 1;
  string partition_name = 2;
  repeated common.EntityMeta entity_metas = 3;
  repeated common.EntityData entity_datas = 4;
  string db_name = 5;
}

/**
* Request to update entities
*/
message UpdateRequest {
  string collection_name = 1;
  string partition_name = 2;
  repeated common.EntityMeta entity_metas = 3;
  repeated common.EntityData entity_datas = 4;
  string db_name = 5;
}

/**
* Request to delete entities by pks
*/
message Pks{
  repeated int64 pk = 3;
}
message DeleteRequest {
  string collection_name = 1;
  string partition_name = 2;
  oneof condition {
    Pks pks = 3;
    string expr = 4;
  }
  string db_name = 5;
}

/**
* Response from insert/update/delete entities
*/
message MutationResult {
  common.Status status = 1;
  repeated uint32 succ_index = 2;
  repeated uint32 err_index = 3; 
  bool acknowledged = 4;
  int64 insert_cnt = 5;
  int64 delete_cnt = 6;
  int64 update_cnt = 7;
  repeated int64 pks = 8; // returned pks for auto-pk
}

/**
* Request to do knn search
*/
message SearchRequest {
  string collection_name = 1;
  string partition_name = 2;
  common.KnnParam knn_param = 3;
  uint32 topk = 4;
  string filter = 5;
  repeated string output_fields = 6;
  map<string, string> extra_params = 7;
  string db_name = 8;
}

/**
* Response from do knn search
*/
message SearchResults {
  common.Status status = 1;
  repeated common.SearchResult results = 2;
}

/**
* Request to get entity by pk
*/
message GetRequest {
  string collection_name = 1;
  string partition_name = 2;
  int64 pk = 3;
  repeated string output_fields = 4;
  map<string, string> extra_params = 5;
  string db_name = 6;
}

/**
* Response from get entity by pk
*/
message GetResult {
  common.Status status = 1;
  common.EntityResult result = 2;
}


//! Http Request
message HttpRequest {};

//! Http Response
message HttpResponse {};

