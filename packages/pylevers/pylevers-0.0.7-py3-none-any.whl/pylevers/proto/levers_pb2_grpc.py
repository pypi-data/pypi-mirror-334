# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import common_pb2 as proto_dot_common__pb2
from proto import levers_pb2 as proto_dot_levers__pb2


class LeversServiceStub(object):
    """! GRPC service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/levers.proto.levers.LeversService/Connect',
                request_serializer=proto_dot_levers__pb2.ConnectRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.ConnectResponse.FromString,
                )
        self.CreateDatabase = channel.unary_unary(
                '/levers.proto.levers.LeversService/CreateDatabase',
                request_serializer=proto_dot_levers__pb2.CreateDatabaseRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.DropDatabase = channel.unary_unary(
                '/levers.proto.levers.LeversService/DropDatabase',
                request_serializer=proto_dot_levers__pb2.DropDatabaseRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.ListDatabase = channel.unary_unary(
                '/levers.proto.levers.LeversService/ListDatabase',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.ListDatabasesResponse.FromString,
                )
        self.CreateCollection = channel.unary_unary(
                '/levers.proto.levers.LeversService/CreateCollection',
                request_serializer=proto_dot_levers__pb2.CreateCollectionRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.DropCollection = channel.unary_unary(
                '/levers.proto.levers.LeversService/DropCollection',
                request_serializer=proto_dot_levers__pb2.DropCollectionRequest.SerializeToString,
                response_deserializer=proto_dot_common__pb2.Status.FromString,
                )
        self.ListCollections = channel.unary_unary(
                '/levers.proto.levers.LeversService/ListCollections',
                request_serializer=proto_dot_levers__pb2.ListCollectionsRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.ListCollectionsResponse.FromString,
                )
        self.DescribeCollection = channel.unary_unary(
                '/levers.proto.levers.LeversService/DescribeCollection',
                request_serializer=proto_dot_levers__pb2.DescribeCollectionRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.DescribeCollectionResponse.FromString,
                )
        self.StatsCollection = channel.unary_unary(
                '/levers.proto.levers.LeversService/StatsCollection',
                request_serializer=proto_dot_levers__pb2.StatsCollectionRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.StatsCollectionResponse.FromString,
                )
        self.Insert = channel.unary_unary(
                '/levers.proto.levers.LeversService/Insert',
                request_serializer=proto_dot_levers__pb2.InsertRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.MutationResult.FromString,
                )
        self.Update = channel.unary_unary(
                '/levers.proto.levers.LeversService/Update',
                request_serializer=proto_dot_levers__pb2.UpdateRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.MutationResult.FromString,
                )
        self.Delete = channel.unary_unary(
                '/levers.proto.levers.LeversService/Delete',
                request_serializer=proto_dot_levers__pb2.DeleteRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.MutationResult.FromString,
                )
        self.Search = channel.unary_unary(
                '/levers.proto.levers.LeversService/Search',
                request_serializer=proto_dot_levers__pb2.SearchRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.SearchResults.FromString,
                )
        self.Get = channel.unary_unary(
                '/levers.proto.levers.LeversService/Get',
                request_serializer=proto_dot_levers__pb2.GetRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.GetResult.FromString,
                )


class LeversServiceServicer(object):
    """! GRPC service
    """

    def Connect(self, request, context):
        """connect to exchange client server information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDatabase(self, request, context):
        """create database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropDatabase(self, request, context):
        """drop database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatabase(self, request, context):
        """list database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCollection(self, request, context):
        """create collection 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropCollection(self, request, context):
        """drop collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCollections(self, request, context):
        """list all collections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeCollection(self, request, context):
        """describe some collections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StatsCollection(self, request, context):
        """statistic some collections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Insert(self, request, context):
        """insert entities into collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """update entities into collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """delete some entities from collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """do knn search on collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """get specific entity by pk on collection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LeversServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=proto_dot_levers__pb2.ConnectRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.ConnectResponse.SerializeToString,
            ),
            'CreateDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDatabase,
                    request_deserializer=proto_dot_levers__pb2.CreateDatabaseRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'DropDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.DropDatabase,
                    request_deserializer=proto_dot_levers__pb2.DropDatabaseRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'ListDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatabase,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_levers__pb2.ListDatabasesResponse.SerializeToString,
            ),
            'CreateCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCollection,
                    request_deserializer=proto_dot_levers__pb2.CreateCollectionRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'DropCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DropCollection,
                    request_deserializer=proto_dot_levers__pb2.DropCollectionRequest.FromString,
                    response_serializer=proto_dot_common__pb2.Status.SerializeToString,
            ),
            'ListCollections': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCollections,
                    request_deserializer=proto_dot_levers__pb2.ListCollectionsRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.ListCollectionsResponse.SerializeToString,
            ),
            'DescribeCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeCollection,
                    request_deserializer=proto_dot_levers__pb2.DescribeCollectionRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.DescribeCollectionResponse.SerializeToString,
            ),
            'StatsCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.StatsCollection,
                    request_deserializer=proto_dot_levers__pb2.StatsCollectionRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.StatsCollectionResponse.SerializeToString,
            ),
            'Insert': grpc.unary_unary_rpc_method_handler(
                    servicer.Insert,
                    request_deserializer=proto_dot_levers__pb2.InsertRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.MutationResult.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=proto_dot_levers__pb2.UpdateRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.MutationResult.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=proto_dot_levers__pb2.DeleteRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.MutationResult.SerializeToString,
            ),
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=proto_dot_levers__pb2.SearchRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.SearchResults.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=proto_dot_levers__pb2.GetRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.GetResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'levers.proto.levers.LeversService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LeversService(object):
    """! GRPC service
    """

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Connect',
            proto_dot_levers__pb2.ConnectRequest.SerializeToString,
            proto_dot_levers__pb2.ConnectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/CreateDatabase',
            proto_dot_levers__pb2.CreateDatabaseRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/DropDatabase',
            proto_dot_levers__pb2.DropDatabaseRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/ListDatabase',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_levers__pb2.ListDatabasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/CreateCollection',
            proto_dot_levers__pb2.CreateCollectionRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/DropCollection',
            proto_dot_levers__pb2.DropCollectionRequest.SerializeToString,
            proto_dot_common__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListCollections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/ListCollections',
            proto_dot_levers__pb2.ListCollectionsRequest.SerializeToString,
            proto_dot_levers__pb2.ListCollectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DescribeCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/DescribeCollection',
            proto_dot_levers__pb2.DescribeCollectionRequest.SerializeToString,
            proto_dot_levers__pb2.DescribeCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StatsCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/StatsCollection',
            proto_dot_levers__pb2.StatsCollectionRequest.SerializeToString,
            proto_dot_levers__pb2.StatsCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Insert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Insert',
            proto_dot_levers__pb2.InsertRequest.SerializeToString,
            proto_dot_levers__pb2.MutationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Update',
            proto_dot_levers__pb2.UpdateRequest.SerializeToString,
            proto_dot_levers__pb2.MutationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Delete',
            proto_dot_levers__pb2.DeleteRequest.SerializeToString,
            proto_dot_levers__pb2.MutationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Search',
            proto_dot_levers__pb2.SearchRequest.SerializeToString,
            proto_dot_levers__pb2.SearchResults.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.LeversService/Get',
            proto_dot_levers__pb2.GetRequest.SerializeToString,
            proto_dot_levers__pb2.GetResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HttpLeversServiceStub(object):
    """! Restful APIs 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/levers.proto.levers.HttpLeversService/connect',
                request_serializer=proto_dot_levers__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.HttpResponse.FromString,
                )
        self.collection = channel.unary_unary(
                '/levers.proto.levers.HttpLeversService/collection',
                request_serializer=proto_dot_levers__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.HttpResponse.FromString,
                )
        self.entities = channel.unary_unary(
                '/levers.proto.levers.HttpLeversService/entities',
                request_serializer=proto_dot_levers__pb2.HttpRequest.SerializeToString,
                response_deserializer=proto_dot_levers__pb2.HttpResponse.FromString,
                )


class HttpLeversServiceServicer(object):
    """! Restful APIs 
    """

    def connect(self, request, context):
        """HTTP: POST /v1/connect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def collection(self, request, context):
        """Http: POST /v1/collection/create
        Http: POST /v1/collection/drop
        Http: POST /v1/collection/describe
        Http: POST /v1/collection/stats
        Http: POST /v1/collection/list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def entities(self, request, context):
        """Http: POST /v1/entities/insert
        Http: POST /v1/entities/update
        Http: POST /v1/entities/delete
        Http: POST /v1/entities/search
        Http: POST /v1/entities/get
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HttpLeversServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=proto_dot_levers__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.HttpResponse.SerializeToString,
            ),
            'collection': grpc.unary_unary_rpc_method_handler(
                    servicer.collection,
                    request_deserializer=proto_dot_levers__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.HttpResponse.SerializeToString,
            ),
            'entities': grpc.unary_unary_rpc_method_handler(
                    servicer.entities,
                    request_deserializer=proto_dot_levers__pb2.HttpRequest.FromString,
                    response_serializer=proto_dot_levers__pb2.HttpResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'levers.proto.levers.HttpLeversService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HttpLeversService(object):
    """! Restful APIs 
    """

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.HttpLeversService/connect',
            proto_dot_levers__pb2.HttpRequest.SerializeToString,
            proto_dot_levers__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.HttpLeversService/collection',
            proto_dot_levers__pb2.HttpRequest.SerializeToString,
            proto_dot_levers__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def entities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/levers.proto.levers.HttpLeversService/entities',
            proto_dot_levers__pb2.HttpRequest.SerializeToString,
            proto_dot_levers__pb2.HttpResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
