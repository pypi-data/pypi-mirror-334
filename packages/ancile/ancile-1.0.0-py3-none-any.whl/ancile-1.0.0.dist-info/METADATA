Metadata-Version: 2.2
Name: ancile
Version: 1.0.0
Summary: Ancile is a release risk assessment tool that analyzes differences between Git tags and evaluates changes based on configurable risk categories.
Author-email: Leading Works S√†RL <admin@leading.works>
License: GPL-3.0-only
Project-URL: Homepage, https://gitlab.com/leading-works/floss/ancile
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.1.8
Requires-Dist: GitPython>=3.1.44
Requires-Dist: PyYAML>=6.0.2
Requires-Dist: rich>=13.9.4
Requires-Dist: toml>=0.10.2
Provides-Extra: dev
Requires-Dist: pytest>=8.3.5; extra == "dev"
Requires-Dist: pytest-bdd>=8.1.0; extra == "dev"
Requires-Dist: pytest-console-scripts>=1.4.1; extra == "dev"
Requires-Dist: pytest-cov>=6.0.0; extra == "dev"
Requires-Dist: pytest-html>=4.1.1; extra == "dev"
Requires-Dist: pytest-xdist>=3.6.1; extra == "dev"
Requires-Dist: black>=25.1.0; extra == "dev"
Requires-Dist: flake8>=7.1.2; extra == "dev"
Requires-Dist: mypy>=1.15.0; extra == "dev"

# Ancile

> Your shield against risky releases

Ancile is a release risk assessment tool that analyzes differences between Git tags and evaluates changes based on configurable risk categories.

## üõ°Ô∏è Overview

Ancile helps development teams identify potential risks in releases by:
- Comparing Git tags to analyze changes between versions
- Mapping changed files to predefined risk categories
- Generating risk assessment reports for releases

## ‚ú® Features

- Git tag differential analysis
- Configurable risk categories and folder mappings
- Risk assessment scoring
- Detailed reporting
- Easy integration with CI/CD pipelines

## üöÄ Getting Started

### Docker Usage

```bash
# Print usage
docker run ancile --help

# Assess risk between two tags
docker run -v $(pwd):/var/opt/ancile ancile --risk-config /var/opt/ancile/risk_mappings.yaml --stable 1.0.0 --change 1.1.0 --repo-path /var/opt/ancile

# Use with local repository
docker run -v /path/to/your/repo:/var/opt/ancile ancile --risk-config /var/opt/ancile/risk_mappings.yaml --stable 1.0.0 --change 1.1.0 --repo-path /var/opt/ancile
```

### Prerequisites

- Python 3.12 or higher
- Git

### Installation

```bash
pip install ancile
```

### CLI Usage

The primary way to use Ancile is through its command-line interface:

```bash
# Ask for help
ancile --help

# Basic usage
ancile --risk-config risks.yaml --stable 1.0.0 --change 1.0.1

# With optional repository path
ancile --risk-config risks.yaml --stable 1.0.0 --change 1.0.1 --repo-path /path/to/repo

# To generate a default risk mapping configuration
ancile --generate-config --risk-config risk_mappings.yaml
```

#### CLI Options:

See also the usage with `ancile --help`.

- `--generate-config`: a flag to generate a risk mappings template
- `--risk-config`: Path to risk mapping configuration file (default: risk_mappings.yaml)
- `--stable`: The stable tag currently in production
- `--change`: The new tag to assess for release
- `--repo-path`: Path to the git repository (default: current directory)
- `--debug`: very verbose output
- `--verbose`: prints out more information
- `--version`: prints the current version of Ancile

The primary way to use Ancile is through its command-line interface:

```bash
# Basic usage
ancile --risk_mappings=risks.yaml --stable=1.0.0 --change=1.0.1

# With optional repository path
ancile --risk_mappings=risks.yaml --stable=1.0.0 --change=1.0.1 --repo-path=/path/to/repo
```

### Development

1. Clone the repository
2. Create a virtual environment: `python -m venv venv`
3. Activate the virtual environment:
    - Windows: `venv\Scripts\activate`
    - Unix/MacOS: `source venv/bin/activate`
4. Install development dependencies: `pip install -r requirements.txt`
5. Install the package in editable mode: `pip install -e .`

### Testing

Run tests with pytest:

```bash
pytest tests/
```

## ‚öôÔ∏è Configuration

Create an `ancile.yaml` in your project root:

```yaml
mappings:
  - folder: /docs
    risk: LOW
  - folder: /tests
    risk: LOW
  - folder: /src/core
    risk: HIGH
  - folder: /src/api
    risk: HIGH
```

## Exit Codes

The tool returns different exit codes depending on the risk assessment:

- `0`: LOW risk
- `1`: MEDIUM risk
- `2`: HIGH risk

This allows for easy integration with CI/CD pipelines to automate deployment decisions.

## ü§ù Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## üìù License

This project is licensed under the GNU General Public License v3.0 only - see the [LICENSE](LICENSE) file for details.

Copyright (C) 2025 Leading Works S√†RL

This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

## üîç Etymology

The name "Ancile" comes from Greek mythology, referring to the shield of Zeus and Athena. Just as the divine ancile protected the gods, this tool helps protect your releases by identifying potential risks.

## ‚ú® Acknowledgments

- Inspired by the need for better release risk assessment

---
Made with ‚ù§Ô∏è by Leading Works S√†RL
