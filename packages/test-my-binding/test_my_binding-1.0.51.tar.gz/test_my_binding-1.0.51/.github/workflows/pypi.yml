name: pypi

on:
  workflow_dispatch:
  push:
    branches:
      - main  # Temporarily triggering on the main branch (Remove this after testing)

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: manylinux
            arch: x86_64
            repair_tool: auditwheel

          - os: macos-latest
            platform: macOS
            arch: x86_64
            repair_tool: delocate

          - os: macos-latest
            platform: macOS
            arch: arm64
            repair_tool: delocate

          - os: windows-latest
            platform: Windows
            arch: x86_64
            repair_tool: delvewheel

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade pip
          pip install cibuildwheel==2.23.1

      - name: Clean build artifacts (Linux/Mac)
        if: runner.os != 'Windows'
        shell: bash
        run: rm -rf build dist wheelhouse *.egg-info || true

      - name: Clean build artifacts (Windows)
        if: runner.os == 'Windows'
        shell: bash  # Forces Bash instead of PowerShell
        run: |
          rm -rf build dist wheelhouse *.egg-info || true

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_SKIP: "*-musllinux_* *-win32 *_i686 *-win_arm64"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.13
        run: python -m cibuildwheel --output-dir wheelhouse .

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build SDist
        run: python -m build --sdist

      - name: Upload SDist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  publish:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/test_my_binding
    permissions:
      id-token: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: List files before upload (Linux/Mac)
        if: runner.os != 'Windows'
        shell: bash
        run: ls -lh dist/

      - name: List files before upload (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: ls -lh dist/

      - name: Publish to PyPI
        run: python -m twine upload dist/*

      - name: Publish missing macOS x86_64 wheel (if needed)
        run: python -m twine upload dist/*.cp39-*macosx_11_0_x86_64*.whl || true
